
RTOS_Task_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bcc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fac  08004fac  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fb4  08004fb4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004138  2000006c  08005028  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041a4  08005028  000241a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ed8  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000218b  00000000  00000000  00029fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ab  00000000  00000000  0002cb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001790b  00000000  00000000  0002d343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b825  00000000  00000000  00044c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d76a  00000000  00000000  00050473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ff8  00000000  00000000  000ddbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e0bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d54 	.word	0x08004d54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004d54 	.word	0x08004d54

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000088 	.word	0x20000088
 80005ac:	200000dc 	.word	0x200000dc

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_write>:
#include<stdio.h>

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
int _write(int file,char *ptr,int len)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b086      	sub	sp, #24
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	60b9      	str	r1, [r7, #8]
 8000608:	607a      	str	r2, [r7, #4]
	int i=0;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e009      	b.n	8000628 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	60ba      	str	r2, [r7, #8]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffc7 	bl	80005b0 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	3301      	adds	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	dbf1      	blt.n	8000614 <_write+0x16>
	return len;
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b5b0      	push	{r4, r5, r7, lr}
 800063e:	b0ac      	sub	sp, #176	; 0xb0
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fb1d 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f8a9 	bl	800079c <SystemClock_Config>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 800064a:	2300      	movs	r3, #0
 800064c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000650:	2300      	movs	r3, #0
 8000652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000656:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f94b 	bl	80018f6 <osMutexCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a40      	ldr	r2, [pc, #256]	; (8000764 <main+0x128>)
 8000664:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000666:	2300      	movs	r3, #0
 8000668:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000672:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000676:	2101      	movs	r1, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f954 	bl	8001926 <osSemaphoreCreate>
 800067e:	4603      	mov	r3, r0
 8000680:	4a39      	ldr	r2, [pc, #228]	; (8000768 <main+0x12c>)
 8000682:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000684:	4b39      	ldr	r3, [pc, #228]	; (800076c <main+0x130>)
 8000686:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800068a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800068c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000690:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f977 	bl	800198a <osMessageCreate>
 800069c:	4603      	mov	r3, r0
 800069e:	4a34      	ldr	r2, [pc, #208]	; (8000770 <main+0x134>)
 80006a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 80006a2:	4b34      	ldr	r3, [pc, #208]	; (8000774 <main+0x138>)
 80006a4:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80006a8:	461d      	mov	r5, r3
 80006aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 80006b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f8ba 	bl	8001836 <osThreadCreate>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a2c      	ldr	r2, [pc, #176]	; (8000778 <main+0x13c>)
 80006c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80006c8:	4b2c      	ldr	r3, [pc, #176]	; (800077c <main+0x140>)
 80006ca:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80006ce:	461d      	mov	r5, r3
 80006d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80006dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f8a7 	bl	8001836 <osThreadCreate>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a25      	ldr	r2, [pc, #148]	; (8000780 <main+0x144>)
 80006ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <main+0x148>)
 80006f0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80006f4:	461d      	mov	r5, r3
 80006f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000702:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f001 f894 	bl	8001836 <osThreadCreate>
 800070e:	4603      	mov	r3, r0
 8000710:	4a1d      	ldr	r2, [pc, #116]	; (8000788 <main+0x14c>)
 8000712:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <main+0x150>)
 8000716:	f107 0420 	add.w	r4, r7, #32
 800071a:	461d      	mov	r5, r3
 800071c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f881 	bl	8001836 <osThreadCreate>
 8000734:	4603      	mov	r3, r0
 8000736:	4a16      	ldr	r2, [pc, #88]	; (8000790 <main+0x154>)
 8000738:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityNormal, 0, 128);
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <main+0x158>)
 800073c:	1d3c      	adds	r4, r7, #4
 800073e:	461d      	mov	r5, r3
 8000740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f001 f870 	bl	8001836 <osThreadCreate>
 8000756:	4603      	mov	r3, r0
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <main+0x15c>)
 800075a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800075c:	f001 f864 	bl	8001828 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000760:	e7fe      	b.n	8000760 <main+0x124>
 8000762:	bf00      	nop
 8000764:	200002f4 	.word	0x200002f4
 8000768:	200002f8 	.word	0x200002f8
 800076c:	08004d6c 	.word	0x08004d6c
 8000770:	200002f0 	.word	0x200002f0
 8000774:	08004d88 	.word	0x08004d88
 8000778:	200002dc 	.word	0x200002dc
 800077c:	08004db0 	.word	0x08004db0
 8000780:	200002e0 	.word	0x200002e0
 8000784:	08004dd8 	.word	0x08004dd8
 8000788:	200002e4 	.word	0x200002e4
 800078c:	08004e00 	.word	0x08004e00
 8000790:	200002e8 	.word	0x200002e8
 8000794:	08004e28 	.word	0x08004e28
 8000798:	200002ec 	.word	0x200002ec

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 fd3c 	bl	8004228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b28      	ldr	r3, [pc, #160]	; (8000868 <SystemClock_Config+0xcc>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	4a27      	ldr	r2, [pc, #156]	; (8000868 <SystemClock_Config+0xcc>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	; 0x40
 80007d0:	4b25      	ldr	r3, [pc, #148]	; (8000868 <SystemClock_Config+0xcc>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <SystemClock_Config+0xd0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <SystemClock_Config+0xd0>)
 80007e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <SystemClock_Config+0xd0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800080c:	2310      	movs	r3, #16
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000810:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000816:	2304      	movs	r3, #4
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800081a:	2304      	movs	r3, #4
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fb84 	bl	8000f30 <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800082e:	f000 f913 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2302      	movs	r3, #2
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2102      	movs	r1, #2
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fde6 	bl	8001420 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800085a:	f000 f8fd 	bl	8000a58 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	; 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  printf("task01\n");
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <StartTask01+0x40>)
 800087a:	f003 fbf5 	bl	8004068 <puts>

	  xSemaphoreTake(myBinarySem01Handle,100);
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <StartTask01+0x44>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2164      	movs	r1, #100	; 0x64
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fcc1 	bl	800220c <xQueueSemaphoreTake>

	  printf("task 01 take sem\n");
 800088a:	480b      	ldr	r0, [pc, #44]	; (80008b8 <StartTask01+0x48>)
 800088c:	f003 fbec 	bl	8004068 <puts>



	  xSemaphoreGive(myBinarySem01Handle);
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <StartTask01+0x44>)
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	f001 fad9 	bl	8001e50 <xQueueGenericSend>

	  printf("task 01 give sem\n");
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <StartTask01+0x4c>)
 80008a0:	f003 fbe2 	bl	8004068 <puts>

	  osDelay(1000);
 80008a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a8:	f001 f811 	bl	80018ce <osDelay>
	  printf("task01\n");
 80008ac:	e7e4      	b.n	8000878 <StartTask01+0x8>
 80008ae:	bf00      	nop
 80008b0:	08004e44 	.word	0x08004e44
 80008b4:	200002f8 	.word	0x200002f8
 80008b8:	08004e4c 	.word	0x08004e4c
 80008bc:	08004e60 	.word	0x08004e60

080008c0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	char tx[]="send";
 80008c8:	4a18      	ldr	r2, [pc, #96]	; (800092c <StartTask02+0x6c>)
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008d2:	6018      	str	r0, [r3, #0]
 80008d4:	3304      	adds	r3, #4
 80008d6:	7019      	strb	r1, [r3, #0]

	for(;;)
	{

		printf("task02\n");
 80008d8:	4815      	ldr	r0, [pc, #84]	; (8000930 <StartTask02+0x70>)
 80008da:	f003 fbc5 	bl	8004068 <puts>
		xSemaphoreTake(myMutex01Handle,100);
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <StartTask02+0x74>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2164      	movs	r1, #100	; 0x64
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fc91 	bl	800220c <xQueueSemaphoreTake>

		printf("task 02 take mutex\n");
 80008ea:	4813      	ldr	r0, [pc, #76]	; (8000938 <StartTask02+0x78>)
 80008ec:	f003 fbbc 	bl	8004068 <puts>


		if(xQueueSend(myQueue01Handle,tx,100)==pdTRUE)
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <StartTask02+0x7c>)
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	f107 0108 	add.w	r1, r7, #8
 80008f8:	2300      	movs	r3, #0
 80008fa:	2264      	movs	r2, #100	; 0x64
 80008fc:	f001 faa8 	bl	8001e50 <xQueueGenericSend>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d102      	bne.n	800090c <StartTask02+0x4c>
		{

				printf("queue send from task2\n");
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <StartTask02+0x80>)
 8000908:	f003 fbae 	bl	8004068 <puts>
		}



		xSemaphoreGive(myMutex01Handle);
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <StartTask02+0x74>)
 800090e:	6818      	ldr	r0, [r3, #0]
 8000910:	2300      	movs	r3, #0
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	f001 fa9b 	bl	8001e50 <xQueueGenericSend>
		printf("task 02 give mutex\n");
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <StartTask02+0x84>)
 800091c:	f003 fba4 	bl	8004068 <puts>
		osDelay(1000);
 8000920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000924:	f000 ffd3 	bl	80018ce <osDelay>
		printf("task02\n");
 8000928:	e7d6      	b.n	80008d8 <StartTask02+0x18>
 800092a:	bf00      	nop
 800092c:	08004ebc 	.word	0x08004ebc
 8000930:	08004e74 	.word	0x08004e74
 8000934:	200002f4 	.word	0x200002f4
 8000938:	08004e7c 	.word	0x08004e7c
 800093c:	200002f0 	.word	0x200002f0
 8000940:	08004e90 	.word	0x08004e90
 8000944:	08004ea8 	.word	0x08004ea8

08000948 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  printf("task03\n");
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <StartTask03+0x40>)
 8000952:	f003 fb89 	bl	8004068 <puts>

	  xSemaphoreTake(myBinarySem01Handle,100);
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <StartTask03+0x44>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2164      	movs	r1, #100	; 0x64
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fc55 	bl	800220c <xQueueSemaphoreTake>

	  printf("task03 take sem \n");
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <StartTask03+0x48>)
 8000964:	f003 fb80 	bl	8004068 <puts>



	  xSemaphoreGive(myBinarySem01Handle);
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <StartTask03+0x44>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	2300      	movs	r3, #0
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	f001 fa6d 	bl	8001e50 <xQueueGenericSend>

	  printf("task03 give sem \n");
 8000976:	4807      	ldr	r0, [pc, #28]	; (8000994 <StartTask03+0x4c>)
 8000978:	f003 fb76 	bl	8004068 <puts>

	  osDelay(1000);
 800097c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000980:	f000 ffa5 	bl	80018ce <osDelay>
	  printf("task03\n");
 8000984:	e7e4      	b.n	8000950 <StartTask03+0x8>
 8000986:	bf00      	nop
 8000988:	08004ec4 	.word	0x08004ec4
 800098c:	200002f8 	.word	0x200002f8
 8000990:	08004ecc 	.word	0x08004ecc
 8000994:	08004ee0 	.word	0x08004ee0

08000998 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
	char rx[20]={'\0'};
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]

	for(;;)
	{

		printf("task04\n");
 80009b2:	4810      	ldr	r0, [pc, #64]	; (80009f4 <StartTask04+0x5c>)
 80009b4:	f003 fb58 	bl	8004068 <puts>

		if(xQueueReceive(myQueue01Handle, rx,100)==pdTRUE)
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <StartTask04+0x60>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f107 010c 	add.w	r1, r7, #12
 80009c0:	2264      	movs	r2, #100	; 0x64
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fb42 	bl	800204c <xQueueReceive>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d106      	bne.n	80009dc <StartTask04+0x44>
		{

			printf("task 04 rx from queue %s\n",rx);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <StartTask04+0x64>)
 80009d6:	f003 fae1 	bl	8003f9c <iprintf>
 80009da:	e002      	b.n	80009e2 <StartTask04+0x4a>
		}
		else
		{
			printf("not receive\n");
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <StartTask04+0x68>)
 80009de:	f003 fb43 	bl	8004068 <puts>
		}

		printf("task 04 end\n");
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <StartTask04+0x6c>)
 80009e4:	f003 fb40 	bl	8004068 <puts>

		osDelay(1000);
 80009e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ec:	f000 ff6f 	bl	80018ce <osDelay>
		printf("task04\n");
 80009f0:	e7df      	b.n	80009b2 <StartTask04+0x1a>
 80009f2:	bf00      	nop
 80009f4:	08004ef4 	.word	0x08004ef4
 80009f8:	200002f0 	.word	0x200002f0
 80009fc:	08004efc 	.word	0x08004efc
 8000a00:	08004f18 	.word	0x08004f18
 8000a04:	08004f24 	.word	0x08004f24

08000a08 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  printf("task05\n");
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <StartTask05+0x40>)
 8000a12:	f003 fb29 	bl	8004068 <puts>

	  xSemaphoreTake(myMutex01Handle,100);
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <StartTask05+0x44>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2164      	movs	r1, #100	; 0x64
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fbf5 	bl	800220c <xQueueSemaphoreTake>

	  printf("task 05 take mutex\n");
 8000a22:	480b      	ldr	r0, [pc, #44]	; (8000a50 <StartTask05+0x48>)
 8000a24:	f003 fb20 	bl	8004068 <puts>



	  xSemaphoreGive(myMutex01Handle);
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <StartTask05+0x44>)
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	f001 fa0d 	bl	8001e50 <xQueueGenericSend>

	  printf("task 05 give mutex\n");
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <StartTask05+0x4c>)
 8000a38:	f003 fb16 	bl	8004068 <puts>

	  osDelay(1000);
 8000a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a40:	f000 ff45 	bl	80018ce <osDelay>
	  printf("task05\n");
 8000a44:	e7e4      	b.n	8000a10 <StartTask05+0x8>
 8000a46:	bf00      	nop
 8000a48:	08004f30 	.word	0x08004f30
 8000a4c:	200002f4 	.word	0x200002f4
 8000a50:	08004f38 	.word	0x08004f38
 8000a54:	08004f4c 	.word	0x08004f4c

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 f91e 	bl	8000d24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ae8:	f002 fb8a 	bl	8003200 <xTaskGetSchedulerState>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d001      	beq.n	8000af6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000af2:	f002 ff69 	bl	80039c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e00a      	b.n	8000b22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0c:	f3af 8000 	nop.w
 8000b10:	4601      	mov	r1, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	b2ca      	uxtb	r2, r1
 8000b1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dbf0      	blt.n	8000b0c <_read+0x12>
  }

  return len;
 8000b2a:	687b      	ldr	r3, [r7, #4]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <_isatty>:

int _isatty(int file)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b74:	2301      	movs	r3, #1
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f003 fb7a 	bl	80042c4 <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20020000 	.word	0x20020000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	200002fc 	.word	0x200002fc
 8000c04:	200041a8 	.word	0x200041a8

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c48:	4c0b      	ldr	r4, [pc, #44]	; (8000c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c56:	f7ff ffd7 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f003 fb39 	bl	80042d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fced 	bl	800063c <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c70:	08004fbc 	.word	0x08004fbc
  ldr r2, =_sbss
 8000c74:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c78:	200041a4 	.word	0x200041a4

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f90d 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff fed6 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f917 	bl	8000f16 <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f000 f8ed 	bl	8000ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000004 	.word	0x20000004

08000d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000300 	.word	0x20000300

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000300 	.word	0x20000300

08000d64 <__NVIC_SetPriorityGrouping>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_SetPriority>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <SysTick_Config>:
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f7ff ff8e 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff47 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff5c 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff8e 	bl	8000e1c <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffb0 	bl	8000e84 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e267      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d075      	beq.n	800103a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f4e:	4b88      	ldr	r3, [pc, #544]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d00c      	beq.n	8000f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f5a:	4b85      	ldr	r3, [pc, #532]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d112      	bne.n	8000f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f66:	4b82      	ldr	r3, [pc, #520]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f72:	d10b      	bne.n	8000f8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	4b7e      	ldr	r3, [pc, #504]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d05b      	beq.n	8001038 <HAL_RCC_OscConfig+0x108>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d157      	bne.n	8001038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e242      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f94:	d106      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x74>
 8000f96:	4b76      	ldr	r3, [pc, #472]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a75      	ldr	r2, [pc, #468]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e01d      	b.n	8000fe0 <HAL_RCC_OscConfig+0xb0>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x98>
 8000fae:	4b70      	ldr	r3, [pc, #448]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a6f      	ldr	r2, [pc, #444]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b6d      	ldr	r3, [pc, #436]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a6c      	ldr	r2, [pc, #432]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e00b      	b.n	8000fe0 <HAL_RCC_OscConfig+0xb0>
 8000fc8:	4b69      	ldr	r3, [pc, #420]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a68      	ldr	r2, [pc, #416]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b66      	ldr	r3, [pc, #408]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a65      	ldr	r2, [pc, #404]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d013      	beq.n	8001010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff feb0 	bl	8000d4c <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff feac 	bl	8000d4c <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e207      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	4b5b      	ldr	r3, [pc, #364]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f0      	beq.n	8000ff0 <HAL_RCC_OscConfig+0xc0>
 800100e:	e014      	b.n	800103a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fe9c 	bl	8000d4c <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fe98 	bl	8000d4c <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	; 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e1f3      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102a:	4b51      	ldr	r3, [pc, #324]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0xe8>
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d063      	beq.n	800110e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001046:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00b      	beq.n	800106a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800105a:	2b08      	cmp	r3, #8
 800105c:	d11c      	bne.n	8001098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d116      	bne.n	8001098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <HAL_RCC_OscConfig+0x152>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d001      	beq.n	8001082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e1c7      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4937      	ldr	r1, [pc, #220]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001096:	e03a      	b.n	800110e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d020      	beq.n	80010e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a0:	4b34      	ldr	r3, [pc, #208]	; (8001174 <HAL_RCC_OscConfig+0x244>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a6:	f7ff fe51 	bl	8000d4c <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fe4d 	bl	8000d4c <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e1a8      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4925      	ldr	r1, [pc, #148]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
 80010e0:	e015      	b.n	800110e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	4b24      	ldr	r3, [pc, #144]	; (8001174 <HAL_RCC_OscConfig+0x244>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e8:	f7ff fe30 	bl	8000d4c <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f0:	f7ff fe2c 	bl	8000d4c <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e187      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d036      	beq.n	8001188 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d016      	beq.n	8001150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_RCC_OscConfig+0x248>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001128:	f7ff fe10 	bl	8000d4c <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001130:	f7ff fe0c 	bl	8000d4c <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e167      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_RCC_OscConfig+0x240>)
 8001144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x200>
 800114e:	e01b      	b.n	8001188 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_RCC_OscConfig+0x248>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001156:	f7ff fdf9 	bl	8000d4c <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115c:	e00e      	b.n	800117c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115e:	f7ff fdf5 	bl	8000d4c <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d907      	bls.n	800117c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e150      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
 8001170:	40023800 	.word	0x40023800
 8001174:	42470000 	.word	0x42470000
 8001178:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117c:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 800117e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ea      	bne.n	800115e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 8097 	beq.w	80012c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119a:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10f      	bne.n	80011c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b7d      	ldr	r3, [pc, #500]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a7c      	ldr	r2, [pc, #496]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b7a      	ldr	r3, [pc, #488]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011c2:	2301      	movs	r3, #1
 80011c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c6:	4b77      	ldr	r3, [pc, #476]	; (80013a4 <HAL_RCC_OscConfig+0x474>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d118      	bne.n	8001204 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d2:	4b74      	ldr	r3, [pc, #464]	; (80013a4 <HAL_RCC_OscConfig+0x474>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a73      	ldr	r2, [pc, #460]	; (80013a4 <HAL_RCC_OscConfig+0x474>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011de:	f7ff fdb5 	bl	8000d4c <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e6:	f7ff fdb1 	bl	8000d4c <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e10c      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	4b6a      	ldr	r3, [pc, #424]	; (80013a4 <HAL_RCC_OscConfig+0x474>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d106      	bne.n	800121a <HAL_RCC_OscConfig+0x2ea>
 800120c:	4b64      	ldr	r3, [pc, #400]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 800120e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001210:	4a63      	ldr	r2, [pc, #396]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6713      	str	r3, [r2, #112]	; 0x70
 8001218:	e01c      	b.n	8001254 <HAL_RCC_OscConfig+0x324>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b05      	cmp	r3, #5
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x30c>
 8001222:	4b5f      	ldr	r3, [pc, #380]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001226:	4a5e      	ldr	r2, [pc, #376]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6713      	str	r3, [r2, #112]	; 0x70
 800122e:	4b5c      	ldr	r3, [pc, #368]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001232:	4a5b      	ldr	r2, [pc, #364]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6713      	str	r3, [r2, #112]	; 0x70
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0x324>
 800123c:	4b58      	ldr	r3, [pc, #352]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001240:	4a57      	ldr	r2, [pc, #348]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001242:	f023 0301 	bic.w	r3, r3, #1
 8001246:	6713      	str	r3, [r2, #112]	; 0x70
 8001248:	4b55      	ldr	r3, [pc, #340]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 800124a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124c:	4a54      	ldr	r2, [pc, #336]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 800124e:	f023 0304 	bic.w	r3, r3, #4
 8001252:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d015      	beq.n	8001288 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125c:	f7ff fd76 	bl	8000d4c <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001262:	e00a      	b.n	800127a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001264:	f7ff fd72 	bl	8000d4c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001272:	4293      	cmp	r3, r2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e0cb      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127a:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 800127c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0ee      	beq.n	8001264 <HAL_RCC_OscConfig+0x334>
 8001286:	e014      	b.n	80012b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001288:	f7ff fd60 	bl	8000d4c <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128e:	e00a      	b.n	80012a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001290:	f7ff fd5c 	bl	8000d4c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	; 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e0b5      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 80012a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1ee      	bne.n	8001290 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d105      	bne.n	80012c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b8:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	4a38      	ldr	r2, [pc, #224]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 80012be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80a1 	beq.w	8001410 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d05c      	beq.n	8001394 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d141      	bne.n	8001366 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_RCC_OscConfig+0x478>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fd30 	bl	8000d4c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff fd2c 	bl	8000d4c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e087      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	019b      	lsls	r3, r3, #6
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	085b      	lsrs	r3, r3, #1
 8001326:	3b01      	subs	r3, #1
 8001328:	041b      	lsls	r3, r3, #16
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	491b      	ldr	r1, [pc, #108]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_RCC_OscConfig+0x478>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fd05 	bl	8000d4c <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001346:	f7ff fd01 	bl	8000d4c <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e05c      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x416>
 8001364:	e054      	b.n	8001410 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_RCC_OscConfig+0x478>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fcee 	bl	8000d4c <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fcea 	bl	8000d4c <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e045      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_RCC_OscConfig+0x470>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x444>
 8001392:	e03d      	b.n	8001410 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d107      	bne.n	80013ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e038      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000
 80013a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x4ec>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d028      	beq.n	800140c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d121      	bne.n	800140c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d11a      	bne.n	800140c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013dc:	4013      	ands	r3, r2
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d111      	bne.n	800140c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	3b01      	subs	r3, #1
 80013f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d107      	bne.n	800140c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0cc      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001434:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d90c      	bls.n	800145c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0b8      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001474:	4b59      	ldr	r3, [pc, #356]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a58      	ldr	r2, [pc, #352]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800147e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800148c:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4a52      	ldr	r2, [pc, #328]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001498:	4b50      	ldr	r3, [pc, #320]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	494d      	ldr	r1, [pc, #308]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d044      	beq.n	8001540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d119      	bne.n	80014fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e07f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d003      	beq.n	80014de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d109      	bne.n	80014fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e06f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e067      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f023 0203 	bic.w	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4934      	ldr	r1, [pc, #208]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001510:	f7ff fc1c 	bl	8000d4c <HAL_GetTick>
 8001514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	e00a      	b.n	800152e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001518:	f7ff fc18 	bl	8000d4c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e04f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 020c 	and.w	r2, r3, #12
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	429a      	cmp	r2, r3
 800153e:	d1eb      	bne.n	8001518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d20c      	bcs.n	8001568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e032      	b.n	80015ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4916      	ldr	r1, [pc, #88]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	490e      	ldr	r1, [pc, #56]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015a6:	f000 f821 	bl	80015ec <HAL_RCC_GetSysClockFreq>
 80015aa:	4602      	mov	r2, r0
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	490a      	ldr	r1, [pc, #40]	; (80015e0 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	5ccb      	ldrb	r3, [r1, r3]
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1c8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fb7c 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00
 80015dc:	40023800 	.word	0x40023800
 80015e0:	08004f68 	.word	0x08004f68
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f0:	b094      	sub	sp, #80	; 0x50
 80015f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	647b      	str	r3, [r7, #68]	; 0x44
 80015f8:	2300      	movs	r3, #0
 80015fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015fc:	2300      	movs	r3, #0
 80015fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001604:	4b79      	ldr	r3, [pc, #484]	; (80017ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b08      	cmp	r3, #8
 800160e:	d00d      	beq.n	800162c <HAL_RCC_GetSysClockFreq+0x40>
 8001610:	2b08      	cmp	r3, #8
 8001612:	f200 80e1 	bhi.w	80017d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x34>
 800161a:	2b04      	cmp	r3, #4
 800161c:	d003      	beq.n	8001626 <HAL_RCC_GetSysClockFreq+0x3a>
 800161e:	e0db      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001620:	4b73      	ldr	r3, [pc, #460]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001624:	e0db      	b.n	80017de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001626:	4b73      	ldr	r3, [pc, #460]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800162a:	e0d8      	b.n	80017de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800162c:	4b6f      	ldr	r3, [pc, #444]	; (80017ec <HAL_RCC_GetSysClockFreq+0x200>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001634:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001636:	4b6d      	ldr	r3, [pc, #436]	; (80017ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d063      	beq.n	800170a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001642:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	099b      	lsrs	r3, r3, #6
 8001648:	2200      	movs	r2, #0
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
 800164c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800164e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
 8001656:	2300      	movs	r3, #0
 8001658:	637b      	str	r3, [r7, #52]	; 0x34
 800165a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800165e:	4622      	mov	r2, r4
 8001660:	462b      	mov	r3, r5
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	0159      	lsls	r1, r3, #5
 800166c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001670:	0150      	lsls	r0, r2, #5
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4621      	mov	r1, r4
 8001678:	1a51      	subs	r1, r2, r1
 800167a:	6139      	str	r1, [r7, #16]
 800167c:	4629      	mov	r1, r5
 800167e:	eb63 0301 	sbc.w	r3, r3, r1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001690:	4659      	mov	r1, fp
 8001692:	018b      	lsls	r3, r1, #6
 8001694:	4651      	mov	r1, sl
 8001696:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800169a:	4651      	mov	r1, sl
 800169c:	018a      	lsls	r2, r1, #6
 800169e:	4651      	mov	r1, sl
 80016a0:	ebb2 0801 	subs.w	r8, r2, r1
 80016a4:	4659      	mov	r1, fp
 80016a6:	eb63 0901 	sbc.w	r9, r3, r1
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016be:	4690      	mov	r8, r2
 80016c0:	4699      	mov	r9, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	eb18 0303 	adds.w	r3, r8, r3
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	462b      	mov	r3, r5
 80016cc:	eb49 0303 	adc.w	r3, r9, r3
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016de:	4629      	mov	r1, r5
 80016e0:	024b      	lsls	r3, r1, #9
 80016e2:	4621      	mov	r1, r4
 80016e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016e8:	4621      	mov	r1, r4
 80016ea:	024a      	lsls	r2, r1, #9
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016f2:	2200      	movs	r2, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016fc:	f7fe fdc0 	bl	8000280 <__aeabi_uldivmod>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4613      	mov	r3, r2
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001708:	e058      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_RCC_GetSysClockFreq+0x200>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	099b      	lsrs	r3, r3, #6
 8001710:	2200      	movs	r2, #0
 8001712:	4618      	mov	r0, r3
 8001714:	4611      	mov	r1, r2
 8001716:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800171a:	623b      	str	r3, [r7, #32]
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
 8001720:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001724:	4642      	mov	r2, r8
 8001726:	464b      	mov	r3, r9
 8001728:	f04f 0000 	mov.w	r0, #0
 800172c:	f04f 0100 	mov.w	r1, #0
 8001730:	0159      	lsls	r1, r3, #5
 8001732:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001736:	0150      	lsls	r0, r2, #5
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4641      	mov	r1, r8
 800173e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001742:	4649      	mov	r1, r9
 8001744:	eb63 0b01 	sbc.w	fp, r3, r1
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001754:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001758:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800175c:	ebb2 040a 	subs.w	r4, r2, sl
 8001760:	eb63 050b 	sbc.w	r5, r3, fp
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	00eb      	lsls	r3, r5, #3
 800176e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001772:	00e2      	lsls	r2, r4, #3
 8001774:	4614      	mov	r4, r2
 8001776:	461d      	mov	r5, r3
 8001778:	4643      	mov	r3, r8
 800177a:	18e3      	adds	r3, r4, r3
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	464b      	mov	r3, r9
 8001780:	eb45 0303 	adc.w	r3, r5, r3
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001792:	4629      	mov	r1, r5
 8001794:	028b      	lsls	r3, r1, #10
 8001796:	4621      	mov	r1, r4
 8001798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800179c:	4621      	mov	r1, r4
 800179e:	028a      	lsls	r2, r1, #10
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a6:	2200      	movs	r2, #0
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	61fa      	str	r2, [r7, #28]
 80017ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017b0:	f7fe fd66 	bl	8000280 <__aeabi_uldivmod>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4613      	mov	r3, r2
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_GetSysClockFreq+0x200>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	0c1b      	lsrs	r3, r3, #16
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	3301      	adds	r3, #1
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80017cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017d6:	e002      	b.n	80017de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3750      	adds	r7, #80	; 0x50
 80017e4:	46bd      	mov	sp, r7
 80017e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	00f42400 	.word	0x00f42400
 80017f4:	007a1200 	.word	0x007a1200

080017f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180a:	2b84      	cmp	r3, #132	; 0x84
 800180c:	d005      	beq.n	800181a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800180e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4413      	add	r3, r2
 8001816:	3303      	adds	r3, #3
 8001818:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800182c:	f001 f8ea 	bl	8002a04 <vTaskStartScheduler>
  
  return osOK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}

08001836 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001838:	b089      	sub	sp, #36	; 0x24
 800183a:	af04      	add	r7, sp, #16
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <osThreadCreate+0x54>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01c      	beq.n	800188a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685c      	ldr	r4, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691e      	ldr	r6, [r3, #16]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ffc8 	bl	80017f8 <makeFreeRtosPriority>
 8001868:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001872:	9202      	str	r2, [sp, #8]
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	9100      	str	r1, [sp, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	4632      	mov	r2, r6
 800187c:	4629      	mov	r1, r5
 800187e:	4620      	mov	r0, r4
 8001880:	f000 fef8 	bl	8002674 <xTaskCreateStatic>
 8001884:	4603      	mov	r3, r0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e01c      	b.n	80018c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685c      	ldr	r4, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001896:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ffaa 	bl	80017f8 <makeFreeRtosPriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	9200      	str	r2, [sp, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	4632      	mov	r2, r6
 80018b2:	4629      	mov	r1, r5
 80018b4:	4620      	mov	r0, r4
 80018b6:	f000 ff3a 	bl	800272e <xTaskCreate>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d001      	beq.n	80018c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e000      	b.n	80018c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80018c4:	68fb      	ldr	r3, [r7, #12]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <osDelay+0x16>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	e000      	b.n	80018e6 <osDelay+0x18>
 80018e4:	2301      	movs	r3, #1
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 f858 	bl	800299c <vTaskDelay>
  
  return osOK;
 80018ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4619      	mov	r1, r3
 800190c:	2001      	movs	r0, #1
 800190e:	f000 fa84 	bl	8001e1a <xQueueCreateMutexStatic>
 8001912:	4603      	mov	r3, r0
 8001914:	e003      	b.n	800191e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8001916:	2001      	movs	r0, #1
 8001918:	f000 fa67 	bl	8001dea <xQueueCreateMutex>
 800191c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af02      	add	r7, sp, #8
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00f      	beq.n	8001958 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d10a      	bne.n	8001954 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2203      	movs	r2, #3
 8001944:	9200      	str	r2, [sp, #0]
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2001      	movs	r0, #1
 800194c:	f000 f962 	bl	8001c14 <xQueueGenericCreateStatic>
 8001950:	4603      	mov	r3, r0
 8001952:	e016      	b.n	8001982 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001954:	2300      	movs	r3, #0
 8001956:	e014      	b.n	8001982 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d110      	bne.n	8001980 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800195e:	2203      	movs	r2, #3
 8001960:	2100      	movs	r1, #0
 8001962:	2001      	movs	r0, #1
 8001964:	f000 f9ce 	bl	8001d04 <xQueueGenericCreate>
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <osSemaphoreCreate+0x56>
 8001970:	2300      	movs	r3, #0
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fa6a 	bl	8001e50 <xQueueGenericSend>
      return sema;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	e000      	b.n	8001982 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001980:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800198a:	b590      	push	{r4, r7, lr}
 800198c:	b085      	sub	sp, #20
 800198e:	af02      	add	r7, sp, #8
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d011      	beq.n	80019c0 <osMessageCreate+0x36>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00d      	beq.n	80019c0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2400      	movs	r4, #0
 80019b6:	9400      	str	r4, [sp, #0]
 80019b8:	f000 f92c 	bl	8001c14 <xQueueGenericCreateStatic>
 80019bc:	4603      	mov	r3, r0
 80019be:	e008      	b.n	80019d2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	f000 f99a 	bl	8001d04 <xQueueGenericCreate>
 80019d0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}

080019da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f103 0208 	add.w	r2, r3, #8
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f04f 32ff 	mov.w	r2, #4294967295
 80019f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f103 0208 	add.w	r2, r3, #8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f103 0208 	add.w	r2, r3, #8
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	601a      	str	r2, [r3, #0]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a92:	d103      	bne.n	8001a9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	e00c      	b.n	8001ab6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e002      	b.n	8001aaa <vListInsert+0x2e>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d2f6      	bcs.n	8001aa4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	601a      	str	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6892      	ldr	r2, [r2, #8]
 8001b04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6852      	ldr	r2, [r2, #4]
 8001b0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d103      	bne.n	8001b22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	1e5a      	subs	r2, r3, #1
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10a      	bne.n	8001b6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5c:	f383 8811 	msr	BASEPRI, r3
 8001b60:	f3bf 8f6f 	isb	sy
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b6a:	bf00      	nop
 8001b6c:	e7fe      	b.n	8001b6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001b6e:	f001 fe99 	bl	80038a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	68f9      	ldr	r1, [r7, #12]
 8001b7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	441a      	add	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	68f9      	ldr	r1, [r7, #12]
 8001ba2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	441a      	add	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	22ff      	movs	r2, #255	; 0xff
 8001bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	22ff      	movs	r2, #255	; 0xff
 8001bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d114      	bne.n	8001bee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01a      	beq.n	8001c02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3310      	adds	r3, #16
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 f959 	bl	8002e88 <xTaskRemoveFromEventList>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d012      	beq.n	8001c02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <xQueueGenericReset+0xcc>)
 8001bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	f3bf 8f4f 	dsb	sy
 8001be8:	f3bf 8f6f 	isb	sy
 8001bec:	e009      	b.n	8001c02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3310      	adds	r3, #16
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fef1 	bl	80019da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3324      	adds	r3, #36	; 0x24
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff feec 	bl	80019da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c02:	f001 fe7f 	bl	8003904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	e000ed04 	.word	0xe000ed04

08001c14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08e      	sub	sp, #56	; 0x38
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10a      	bne.n	8001c3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2c:	f383 8811 	msr	BASEPRI, r3
 8001c30:	f3bf 8f6f 	isb	sy
 8001c34:	f3bf 8f4f 	dsb	sy
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001c3a:	bf00      	nop
 8001c3c:	e7fe      	b.n	8001c3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c48:	f383 8811 	msr	BASEPRI, r3
 8001c4c:	f3bf 8f6f 	isb	sy
 8001c50:	f3bf 8f4f 	dsb	sy
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001c56:	bf00      	nop
 8001c58:	e7fe      	b.n	8001c58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <xQueueGenericCreateStatic+0x52>
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <xQueueGenericCreateStatic+0x56>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <xQueueGenericCreateStatic+0x58>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10a      	bne.n	8001c86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c74:	f383 8811 	msr	BASEPRI, r3
 8001c78:	f3bf 8f6f 	isb	sy
 8001c7c:	f3bf 8f4f 	dsb	sy
 8001c80:	623b      	str	r3, [r7, #32]
}
 8001c82:	bf00      	nop
 8001c84:	e7fe      	b.n	8001c84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <xQueueGenericCreateStatic+0x7e>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <xQueueGenericCreateStatic+0x82>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <xQueueGenericCreateStatic+0x84>
 8001c96:	2300      	movs	r3, #0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10a      	bne.n	8001cb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca0:	f383 8811 	msr	BASEPRI, r3
 8001ca4:	f3bf 8f6f 	isb	sy
 8001ca8:	f3bf 8f4f 	dsb	sy
 8001cac:	61fb      	str	r3, [r7, #28]
}
 8001cae:	bf00      	nop
 8001cb0:	e7fe      	b.n	8001cb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001cb2:	2348      	movs	r3, #72	; 0x48
 8001cb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b48      	cmp	r3, #72	; 0x48
 8001cba:	d00a      	beq.n	8001cd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc0:	f383 8811 	msr	BASEPRI, r3
 8001cc4:	f3bf 8f6f 	isb	sy
 8001cc8:	f3bf 8f4f 	dsb	sy
 8001ccc:	61bb      	str	r3, [r7, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	e7fe      	b.n	8001cd0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001cd2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00d      	beq.n	8001cfa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ce6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f83f 	bl	8001d78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3730      	adds	r7, #48	; 0x30
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10a      	bne.n	8001d2e <xQueueGenericCreate+0x2a>
	__asm volatile
 8001d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1c:	f383 8811 	msr	BASEPRI, r3
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	613b      	str	r3, [r7, #16]
}
 8001d2a:	bf00      	nop
 8001d2c:	e7fe      	b.n	8001d2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	3348      	adds	r3, #72	; 0x48
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 fe93 	bl	8003a68 <pvPortMalloc>
 8001d42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d011      	beq.n	8001d6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3348      	adds	r3, #72	; 0x48
 8001d52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	4613      	mov	r3, r2
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	68b9      	ldr	r1, [r7, #8]
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f805 	bl	8001d78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001d6e:	69bb      	ldr	r3, [r7, #24]
	}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e002      	b.n	8001d9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001da6:	2101      	movs	r1, #1
 8001da8:	69b8      	ldr	r0, [r7, #24]
 8001daa:	f7ff fecb 	bl	8001b44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00e      	beq.n	8001de2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f837 	bl	8001e50 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001df4:	2301      	movs	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6939      	ldr	r1, [r7, #16]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff7e 	bl	8001d04 <xQueueGenericCreate>
 8001e08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff ffd3 	bl	8001db6 <prvInitialiseMutex>

		return xNewQueue;
 8001e10:	68fb      	ldr	r3, [r7, #12]
	}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b088      	sub	sp, #32
 8001e1e:	af02      	add	r7, sp, #8
 8001e20:	4603      	mov	r3, r0
 8001e22:	6039      	str	r1, [r7, #0]
 8001e24:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001e26:	2301      	movs	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2200      	movs	r2, #0
 8001e36:	6939      	ldr	r1, [r7, #16]
 8001e38:	6978      	ldr	r0, [r7, #20]
 8001e3a:	f7ff feeb 	bl	8001c14 <xQueueGenericCreateStatic>
 8001e3e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff ffb8 	bl	8001db6 <prvInitialiseMutex>

		return xNewQueue;
 8001e46:	68fb      	ldr	r3, [r7, #12]
	}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08e      	sub	sp, #56	; 0x38
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <xQueueGenericSend+0x32>
	__asm volatile
 8001e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001e7e:	bf00      	nop
 8001e80:	e7fe      	b.n	8001e80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d103      	bne.n	8001e90 <xQueueGenericSend+0x40>
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <xQueueGenericSend+0x44>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <xQueueGenericSend+0x46>
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10a      	bne.n	8001eb0 <xQueueGenericSend+0x60>
	__asm volatile
 8001e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001eac:	bf00      	nop
 8001eae:	e7fe      	b.n	8001eae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d103      	bne.n	8001ebe <xQueueGenericSend+0x6e>
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <xQueueGenericSend+0x72>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <xQueueGenericSend+0x74>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <xQueueGenericSend+0x8e>
	__asm volatile
 8001ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ecc:	f383 8811 	msr	BASEPRI, r3
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	623b      	str	r3, [r7, #32]
}
 8001eda:	bf00      	nop
 8001edc:	e7fe      	b.n	8001edc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ede:	f001 f98f 	bl	8003200 <xTaskGetSchedulerState>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <xQueueGenericSend+0x9e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <xQueueGenericSend+0xa2>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <xQueueGenericSend+0xa4>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <xQueueGenericSend+0xbe>
	__asm volatile
 8001ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efc:	f383 8811 	msr	BASEPRI, r3
 8001f00:	f3bf 8f6f 	isb	sy
 8001f04:	f3bf 8f4f 	dsb	sy
 8001f08:	61fb      	str	r3, [r7, #28]
}
 8001f0a:	bf00      	nop
 8001f0c:	e7fe      	b.n	8001f0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f0e:	f001 fcc9 	bl	80038a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d302      	bcc.n	8001f24 <xQueueGenericSend+0xd4>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d129      	bne.n	8001f78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f2a:	f000 fa93 	bl	8002454 <prvCopyDataToQueue>
 8001f2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d010      	beq.n	8001f5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	3324      	adds	r3, #36	; 0x24
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 ffa3 	bl	8002e88 <xTaskRemoveFromEventList>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001f48:	4b3f      	ldr	r3, [pc, #252]	; (8002048 <xQueueGenericSend+0x1f8>)
 8001f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	f3bf 8f6f 	isb	sy
 8001f58:	e00a      	b.n	8001f70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001f60:	4b39      	ldr	r3, [pc, #228]	; (8002048 <xQueueGenericSend+0x1f8>)
 8001f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f70:	f001 fcc8 	bl	8003904 <vPortExitCritical>
				return pdPASS;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e063      	b.n	8002040 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f7e:	f001 fcc1 	bl	8003904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e05c      	b.n	8002040 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d106      	bne.n	8001f9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 ffdb 	bl	8002f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f96:	2301      	movs	r3, #1
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f9a:	f001 fcb3 	bl	8003904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f9e:	f000 fd91 	bl	8002ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001fa2:	f001 fc7f 	bl	80038a4 <vPortEnterCritical>
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb2:	d103      	bne.n	8001fbc <xQueueGenericSend+0x16c>
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d103      	bne.n	8001fd2 <xQueueGenericSend+0x182>
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fd2:	f001 fc97 	bl	8003904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fd6:	1d3a      	adds	r2, r7, #4
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 ffca 	bl	8002f78 <xTaskCheckForTimeOut>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d124      	bne.n	8002034 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fec:	f000 fb2a 	bl	8002644 <prvIsQueueFull>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d018      	beq.n	8002028 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	3310      	adds	r3, #16
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 ff1e 	bl	8002e40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002006:	f000 fab5 	bl	8002574 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800200a:	f000 fd69 	bl	8002ae0 <xTaskResumeAll>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	f47f af7c 	bne.w	8001f0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <xQueueGenericSend+0x1f8>)
 8002018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	f3bf 8f4f 	dsb	sy
 8002022:	f3bf 8f6f 	isb	sy
 8002026:	e772      	b.n	8001f0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800202a:	f000 faa3 	bl	8002574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800202e:	f000 fd57 	bl	8002ae0 <xTaskResumeAll>
 8002032:	e76c      	b.n	8001f0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002036:	f000 fa9d 	bl	8002574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800203a:	f000 fd51 	bl	8002ae0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800203e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002040:	4618      	mov	r0, r3
 8002042:	3738      	adds	r7, #56	; 0x38
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	e000ed04 	.word	0xe000ed04

0800204c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10a      	bne.n	800207c <xQueueReceive+0x30>
	__asm volatile
 8002066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	623b      	str	r3, [r7, #32]
}
 8002078:	bf00      	nop
 800207a:	e7fe      	b.n	800207a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <xQueueReceive+0x3e>
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <xQueueReceive+0x42>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <xQueueReceive+0x44>
 800208e:	2300      	movs	r3, #0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <xQueueReceive+0x5e>
	__asm volatile
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	61fb      	str	r3, [r7, #28]
}
 80020a6:	bf00      	nop
 80020a8:	e7fe      	b.n	80020a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020aa:	f001 f8a9 	bl	8003200 <xTaskGetSchedulerState>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <xQueueReceive+0x6e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <xQueueReceive+0x72>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <xQueueReceive+0x74>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <xQueueReceive+0x8e>
	__asm volatile
 80020c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c8:	f383 8811 	msr	BASEPRI, r3
 80020cc:	f3bf 8f6f 	isb	sy
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	61bb      	str	r3, [r7, #24]
}
 80020d6:	bf00      	nop
 80020d8:	e7fe      	b.n	80020d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020da:	f001 fbe3 	bl	80038a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01f      	beq.n	800212a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020ee:	f000 fa1b 	bl	8002528 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	1e5a      	subs	r2, r3, #1
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00f      	beq.n	8002122 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	3310      	adds	r3, #16
 8002106:	4618      	mov	r0, r3
 8002108:	f000 febe 	bl	8002e88 <xTaskRemoveFromEventList>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <xQueueReceive+0x1bc>)
 8002114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002122:	f001 fbef 	bl	8003904 <vPortExitCritical>
				return pdPASS;
 8002126:	2301      	movs	r3, #1
 8002128:	e069      	b.n	80021fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002130:	f001 fbe8 	bl	8003904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002134:	2300      	movs	r3, #0
 8002136:	e062      	b.n	80021fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800213e:	f107 0310 	add.w	r3, r7, #16
 8002142:	4618      	mov	r0, r3
 8002144:	f000 ff02 	bl	8002f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002148:	2301      	movs	r3, #1
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800214c:	f001 fbda 	bl	8003904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002150:	f000 fcb8 	bl	8002ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002154:	f001 fba6 	bl	80038a4 <vPortEnterCritical>
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800215e:	b25b      	sxtb	r3, r3
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d103      	bne.n	800216e <xQueueReceive+0x122>
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002174:	b25b      	sxtb	r3, r3
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217a:	d103      	bne.n	8002184 <xQueueReceive+0x138>
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002184:	f001 fbbe 	bl	8003904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002188:	1d3a      	adds	r2, r7, #4
 800218a:	f107 0310 	add.w	r3, r7, #16
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fef1 	bl	8002f78 <xTaskCheckForTimeOut>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d123      	bne.n	80021e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800219c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800219e:	f000 fa3b 	bl	8002618 <prvIsQueueEmpty>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d017      	beq.n	80021d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	3324      	adds	r3, #36	; 0x24
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fe45 	bl	8002e40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021b8:	f000 f9dc 	bl	8002574 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021bc:	f000 fc90 	bl	8002ae0 <xTaskResumeAll>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d189      	bne.n	80020da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <xQueueReceive+0x1bc>)
 80021c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	f3bf 8f4f 	dsb	sy
 80021d2:	f3bf 8f6f 	isb	sy
 80021d6:	e780      	b.n	80020da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80021d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021da:	f000 f9cb 	bl	8002574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021de:	f000 fc7f 	bl	8002ae0 <xTaskResumeAll>
 80021e2:	e77a      	b.n	80020da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80021e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021e6:	f000 f9c5 	bl	8002574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021ea:	f000 fc79 	bl	8002ae0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021f0:	f000 fa12 	bl	8002618 <prvIsQueueEmpty>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f43f af6f 	beq.w	80020da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80021fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3730      	adds	r7, #48	; 0x30
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000ed04 	.word	0xe000ed04

0800220c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08e      	sub	sp, #56	; 0x38
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002216:	2300      	movs	r3, #0
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800221e:	2300      	movs	r3, #0
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10a      	bne.n	800223e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	623b      	str	r3, [r7, #32]
}
 800223a:	bf00      	nop
 800223c:	e7fe      	b.n	800223c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224a:	f383 8811 	msr	BASEPRI, r3
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	61fb      	str	r3, [r7, #28]
}
 8002258:	bf00      	nop
 800225a:	e7fe      	b.n	800225a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800225c:	f000 ffd0 	bl	8003200 <xTaskGetSchedulerState>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d102      	bne.n	800226c <xQueueSemaphoreTake+0x60>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <xQueueSemaphoreTake+0x64>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <xQueueSemaphoreTake+0x66>
 8002270:	2300      	movs	r3, #0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10a      	bne.n	800228c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	61bb      	str	r3, [r7, #24]
}
 8002288:	bf00      	nop
 800228a:	e7fe      	b.n	800228a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800228c:	f001 fb0a 	bl	80038a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d024      	beq.n	80022e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	1e5a      	subs	r2, r3, #1
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d104      	bne.n	80022b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80022ac:	f001 f950 	bl	8003550 <pvTaskIncrementMutexHeldCount>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00f      	beq.n	80022de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	3310      	adds	r3, #16
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fde0 	bl	8002e88 <xTaskRemoveFromEventList>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d007      	beq.n	80022de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <xQueueSemaphoreTake+0x214>)
 80022d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f3bf 8f4f 	dsb	sy
 80022da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80022de:	f001 fb11 	bl	8003904 <vPortExitCritical>
				return pdPASS;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e097      	b.n	8002416 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d111      	bne.n	8002310 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	617b      	str	r3, [r7, #20]
}
 8002304:	bf00      	nop
 8002306:	e7fe      	b.n	8002306 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002308:	f001 fafc 	bl	8003904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800230c:	2300      	movs	r3, #0
 800230e:	e082      	b.n	8002416 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fe16 	bl	8002f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002320:	2301      	movs	r3, #1
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002324:	f001 faee 	bl	8003904 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002328:	f000 fbcc 	bl	8002ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800232c:	f001 faba 	bl	80038a4 <vPortEnterCritical>
 8002330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002336:	b25b      	sxtb	r3, r3
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d103      	bne.n	8002346 <xQueueSemaphoreTake+0x13a>
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800234c:	b25b      	sxtb	r3, r3
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d103      	bne.n	800235c <xQueueSemaphoreTake+0x150>
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800235c:	f001 fad2 	bl	8003904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002360:	463a      	mov	r2, r7
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fe05 	bl	8002f78 <xTaskCheckForTimeOut>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d132      	bne.n	80023da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002376:	f000 f94f 	bl	8002618 <prvIsQueueEmpty>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d026      	beq.n	80023ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002388:	f001 fa8c 	bl	80038a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 ff53 	bl	800323c <xTaskPriorityInherit>
 8002396:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002398:	f001 fab4 	bl	8003904 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	3324      	adds	r3, #36	; 0x24
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fd4b 	bl	8002e40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023ac:	f000 f8e2 	bl	8002574 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023b0:	f000 fb96 	bl	8002ae0 <xTaskResumeAll>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f47f af68 	bne.w	800228c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <xQueueSemaphoreTake+0x214>)
 80023be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	e75e      	b.n	800228c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80023ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023d0:	f000 f8d0 	bl	8002574 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023d4:	f000 fb84 	bl	8002ae0 <xTaskResumeAll>
 80023d8:	e758      	b.n	800228c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80023da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023dc:	f000 f8ca 	bl	8002574 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023e0:	f000 fb7e 	bl	8002ae0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023e6:	f000 f917 	bl	8002618 <prvIsQueueEmpty>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f43f af4d 	beq.w	800228c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80023f8:	f001 fa54 	bl	80038a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80023fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023fe:	f000 f811 	bl	8002424 <prvGetDisinheritPriorityAfterTimeout>
 8002402:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240a:	4618      	mov	r0, r3
 800240c:	f001 f812 	bl	8003434 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002410:	f001 fa78 	bl	8003904 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002414:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002416:	4618      	mov	r0, r3
 8002418:	3738      	adds	r7, #56	; 0x38
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000ed04 	.word	0xe000ed04

08002424 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e001      	b.n	8002446 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002446:	68fb      	ldr	r3, [r7, #12]
	}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d14d      	bne.n	8002516 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 ff52 	bl	8003328 <xTaskPriorityDisinherit>
 8002484:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e043      	b.n	8002516 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d119      	bne.n	80024c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6858      	ldr	r0, [r3, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	461a      	mov	r2, r3
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	f001 ff3c 	bl	800431c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	441a      	add	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d32b      	bcc.n	8002516 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	e026      	b.n	8002516 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	68d8      	ldr	r0, [r3, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	461a      	mov	r2, r3
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	f001 ff22 	bl	800431c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	425b      	negs	r3, r3
 80024e2:	441a      	add	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d207      	bcs.n	8002504 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	425b      	negs	r3, r3
 80024fe:	441a      	add	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d105      	bne.n	8002516 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	3b01      	subs	r3, #1
 8002514:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800251e:	697b      	ldr	r3, [r7, #20]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d018      	beq.n	800256c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	441a      	add	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	429a      	cmp	r2, r3
 8002552:	d303      	bcc.n	800255c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68d9      	ldr	r1, [r3, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	461a      	mov	r2, r3
 8002566:	6838      	ldr	r0, [r7, #0]
 8002568:	f001 fed8 	bl	800431c <memcpy>
	}
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800257c:	f001 f992 	bl	80038a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002586:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002588:	e011      	b.n	80025ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3324      	adds	r3, #36	; 0x24
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fc76 	bl	8002e88 <xTaskRemoveFromEventList>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80025a2:	f000 fd4b 	bl	800303c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	dce9      	bgt.n	800258a <prvUnlockQueue+0x16>
 80025b6:	e000      	b.n	80025ba <prvUnlockQueue+0x46>
					break;
 80025b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	22ff      	movs	r2, #255	; 0xff
 80025be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80025c2:	f001 f99f 	bl	8003904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80025c6:	f001 f96d 	bl	80038a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025d2:	e011      	b.n	80025f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3310      	adds	r3, #16
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fc51 	bl	8002e88 <xTaskRemoveFromEventList>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80025ec:	f000 fd26 	bl	800303c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80025f0:	7bbb      	ldrb	r3, [r7, #14]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	dce9      	bgt.n	80025d4 <prvUnlockQueue+0x60>
 8002600:	e000      	b.n	8002604 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002602:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	22ff      	movs	r2, #255	; 0xff
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800260c:	f001 f97a 	bl	8003904 <vPortExitCritical>
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002620:	f001 f940 	bl	80038a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800262c:	2301      	movs	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	e001      	b.n	8002636 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002636:	f001 f965 	bl	8003904 <vPortExitCritical>

	return xReturn;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800264c:	f001 f92a 	bl	80038a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	429a      	cmp	r2, r3
 800265a:	d102      	bne.n	8002662 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800265c:	2301      	movs	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e001      	b.n	8002666 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002666:	f001 f94d 	bl	8003904 <vPortExitCritical>

	return xReturn;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08e      	sub	sp, #56	; 0x38
 8002678:	af04      	add	r7, sp, #16
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	623b      	str	r3, [r7, #32]
}
 800269a:	bf00      	nop
 800269c:	e7fe      	b.n	800269c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <xTaskCreateStatic+0x46>
	__asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	61fb      	str	r3, [r7, #28]
}
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80026ba:	2354      	movs	r3, #84	; 0x54
 80026bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b54      	cmp	r3, #84	; 0x54
 80026c2:	d00a      	beq.n	80026da <xTaskCreateStatic+0x66>
	__asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	61bb      	str	r3, [r7, #24]
}
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80026da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01e      	beq.n	8002720 <xTaskCreateStatic+0xac>
 80026e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d01b      	beq.n	8002720 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80026fa:	2300      	movs	r3, #0
 80026fc:	9303      	str	r3, [sp, #12]
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f850 	bl	80027b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800271a:	f000 f8d5 	bl	80028c8 <prvAddNewTaskToReadyList>
 800271e:	e001      	b.n	8002724 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002724:	697b      	ldr	r3, [r7, #20]
	}
 8002726:	4618      	mov	r0, r3
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800272e:	b580      	push	{r7, lr}
 8002730:	b08c      	sub	sp, #48	; 0x30
 8002732:	af04      	add	r7, sp, #16
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4618      	mov	r0, r3
 8002744:	f001 f990 	bl	8003a68 <pvPortMalloc>
 8002748:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00e      	beq.n	800276e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002750:	2054      	movs	r0, #84	; 0x54
 8002752:	f001 f989 	bl	8003a68 <pvPortMalloc>
 8002756:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
 8002764:	e005      	b.n	8002772 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f001 fa4a 	bl	8003c00 <vPortFree>
 800276c:	e001      	b.n	8002772 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d017      	beq.n	80027a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	2300      	movs	r3, #0
 8002784:	9303      	str	r3, [sp, #12]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f80e 	bl	80027b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800279c:	69f8      	ldr	r0, [r7, #28]
 800279e:	f000 f893 	bl	80028c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	e002      	b.n	80027ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80027ae:	69bb      	ldr	r3, [r7, #24]
	}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3720      	adds	r7, #32
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027d0:	3b01      	subs	r3, #1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f023 0307 	bic.w	r3, r3, #7
 80027de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <prvInitialiseNewTask+0x48>
	__asm volatile
 80027ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	617b      	str	r3, [r7, #20]
}
 80027fc:	bf00      	nop
 80027fe:	e7fe      	b.n	80027fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01f      	beq.n	8002846 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e012      	b.n	8002832 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	4413      	add	r3, r2
 8002812:	7819      	ldrb	r1, [r3, #0]
 8002814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	3334      	adds	r3, #52	; 0x34
 800281c:	460a      	mov	r2, r1
 800281e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	3301      	adds	r3, #1
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	2b0f      	cmp	r3, #15
 8002836:	d9e9      	bls.n	800280c <prvInitialiseNewTask+0x54>
 8002838:	e000      	b.n	800283c <prvInitialiseNewTask+0x84>
			{
				break;
 800283a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002844:	e003      	b.n	800284e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	2b06      	cmp	r3, #6
 8002852:	d901      	bls.n	8002858 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002854:	2306      	movs	r3, #6
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	2200      	movs	r2, #0
 8002868:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286c:	3304      	adds	r3, #4
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f8d3 	bl	8001a1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	3318      	adds	r3, #24
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff f8ce 	bl	8001a1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002882:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	f1c3 0207 	rsb	r2, r3, #7
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002892:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	2200      	movs	r2, #0
 8002898:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	68f9      	ldr	r1, [r7, #12]
 80028a6:	69b8      	ldr	r0, [r7, #24]
 80028a8:	f000 fecc 	bl	8003644 <pxPortInitialiseStack>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80028b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028be:	bf00      	nop
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80028d0:	f000 ffe8 	bl	80038a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <prvAddNewTaskToReadyList+0xb8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	4a29      	ldr	r2, [pc, #164]	; (8002980 <prvAddNewTaskToReadyList+0xb8>)
 80028dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80028de:	4b29      	ldr	r3, [pc, #164]	; (8002984 <prvAddNewTaskToReadyList+0xbc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80028e6:	4a27      	ldr	r2, [pc, #156]	; (8002984 <prvAddNewTaskToReadyList+0xbc>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028ec:	4b24      	ldr	r3, [pc, #144]	; (8002980 <prvAddNewTaskToReadyList+0xb8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d110      	bne.n	8002916 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80028f4:	f000 fbc6 	bl	8003084 <prvInitialiseTaskLists>
 80028f8:	e00d      	b.n	8002916 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80028fa:	4b23      	ldr	r3, [pc, #140]	; (8002988 <prvAddNewTaskToReadyList+0xc0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <prvAddNewTaskToReadyList+0xbc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	429a      	cmp	r2, r3
 800290e:	d802      	bhi.n	8002916 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002910:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <prvAddNewTaskToReadyList+0xbc>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <prvAddNewTaskToReadyList+0xc4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3301      	adds	r3, #1
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <prvAddNewTaskToReadyList+0xc4>)
 800291e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	2201      	movs	r2, #1
 8002926:	409a      	lsls	r2, r3
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <prvAddNewTaskToReadyList+0xc8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4313      	orrs	r3, r2
 800292e:	4a18      	ldr	r2, [pc, #96]	; (8002990 <prvAddNewTaskToReadyList+0xc8>)
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4a15      	ldr	r2, [pc, #84]	; (8002994 <prvAddNewTaskToReadyList+0xcc>)
 8002940:	441a      	add	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	4619      	mov	r1, r3
 8002948:	4610      	mov	r0, r2
 800294a:	f7ff f873 	bl	8001a34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800294e:	f000 ffd9 	bl	8003904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <prvAddNewTaskToReadyList+0xc0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00e      	beq.n	8002978 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <prvAddNewTaskToReadyList+0xbc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	429a      	cmp	r2, r3
 8002966:	d207      	bcs.n	8002978 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <prvAddNewTaskToReadyList+0xd0>)
 800296a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000404 	.word	0x20000404
 8002984:	20000304 	.word	0x20000304
 8002988:	20000410 	.word	0x20000410
 800298c:	20000420 	.word	0x20000420
 8002990:	2000040c 	.word	0x2000040c
 8002994:	20000308 	.word	0x20000308
 8002998:	e000ed04 	.word	0xe000ed04

0800299c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d017      	beq.n	80029de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <vTaskDelay+0x60>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <vTaskDelay+0x30>
	__asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	60bb      	str	r3, [r7, #8]
}
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80029cc:	f000 f87a 	bl	8002ac4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029d0:	2100      	movs	r1, #0
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fdd0 	bl	8003578 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80029d8:	f000 f882 	bl	8002ae0 <xTaskResumeAll>
 80029dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <vTaskDelay+0x64>)
 80029e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000042c 	.word	0x2000042c
 8002a00:	e000ed04 	.word	0xe000ed04

08002a04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a12:	463a      	mov	r2, r7
 8002a14:	1d39      	adds	r1, r7, #4
 8002a16:	f107 0308 	add.w	r3, r7, #8
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fdae 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002a20:	6839      	ldr	r1, [r7, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	9202      	str	r2, [sp, #8]
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	460a      	mov	r2, r1
 8002a32:	491e      	ldr	r1, [pc, #120]	; (8002aac <vTaskStartScheduler+0xa8>)
 8002a34:	481e      	ldr	r0, [pc, #120]	; (8002ab0 <vTaskStartScheduler+0xac>)
 8002a36:	f7ff fe1d 	bl	8002674 <xTaskCreateStatic>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <vTaskStartScheduler+0xb0>)
 8002a3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a40:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <vTaskStartScheduler+0xb0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	e001      	b.n	8002a52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d116      	bne.n	8002a86 <vTaskStartScheduler+0x82>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	613b      	str	r3, [r7, #16]
}
 8002a6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <vTaskStartScheduler+0xb4>)
 8002a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <vTaskStartScheduler+0xb8>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <vTaskStartScheduler+0xbc>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a80:	f000 fe6e 	bl	8003760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a84:	e00e      	b.n	8002aa4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d10a      	bne.n	8002aa4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	60fb      	str	r3, [r7, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	e7fe      	b.n	8002aa2 <vTaskStartScheduler+0x9e>
}
 8002aa4:	bf00      	nop
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	08004f60 	.word	0x08004f60
 8002ab0:	08003055 	.word	0x08003055
 8002ab4:	20000428 	.word	0x20000428
 8002ab8:	20000424 	.word	0x20000424
 8002abc:	20000410 	.word	0x20000410
 8002ac0:	20000408 	.word	0x20000408

08002ac4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <vTaskSuspendAll+0x18>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	4a03      	ldr	r2, [pc, #12]	; (8002adc <vTaskSuspendAll+0x18>)
 8002ad0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	2000042c 	.word	0x2000042c

08002ae0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <xTaskResumeAll+0x114>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <xTaskResumeAll+0x2c>
	__asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	603b      	str	r3, [r7, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	e7fe      	b.n	8002b0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b0c:	f000 feca 	bl	80038a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b10:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <xTaskResumeAll+0x114>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	4a37      	ldr	r2, [pc, #220]	; (8002bf4 <xTaskResumeAll+0x114>)
 8002b18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <xTaskResumeAll+0x114>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d161      	bne.n	8002be6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b22:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <xTaskResumeAll+0x118>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d05d      	beq.n	8002be6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b2a:	e02e      	b.n	8002b8a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b2c:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <xTaskResumeAll+0x11c>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3318      	adds	r3, #24
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe ffd8 	bl	8001aee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3304      	adds	r3, #4
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe ffd3 	bl	8001aee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <xTaskResumeAll+0x120>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	4a2a      	ldr	r2, [pc, #168]	; (8002c00 <xTaskResumeAll+0x120>)
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <xTaskResumeAll+0x124>)
 8002b68:	441a      	add	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f7fe ff5f 	bl	8001a34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7a:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <xTaskResumeAll+0x128>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002b84:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <xTaskResumeAll+0x12c>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <xTaskResumeAll+0x11c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1cc      	bne.n	8002b2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b98:	f000 fb12 	bl	80031c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <xTaskResumeAll+0x130>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ba8:	f000 f836 	bl	8002c18 <xTaskIncrementTick>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <xTaskResumeAll+0x12c>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f1      	bne.n	8002ba8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002bc4:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <xTaskResumeAll+0x130>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <xTaskResumeAll+0x12c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <xTaskResumeAll+0x134>)
 8002bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002be6:	f000 fe8d 	bl	8003904 <vPortExitCritical>

	return xAlreadyYielded;
 8002bea:	68bb      	ldr	r3, [r7, #8]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	2000042c 	.word	0x2000042c
 8002bf8:	20000404 	.word	0x20000404
 8002bfc:	200003c4 	.word	0x200003c4
 8002c00:	2000040c 	.word	0x2000040c
 8002c04:	20000308 	.word	0x20000308
 8002c08:	20000304 	.word	0x20000304
 8002c0c:	20000418 	.word	0x20000418
 8002c10:	20000414 	.word	0x20000414
 8002c14:	e000ed04 	.word	0xe000ed04

08002c18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c22:	4b4e      	ldr	r3, [pc, #312]	; (8002d5c <xTaskIncrementTick+0x144>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 808e 	bne.w	8002d48 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c2c:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <xTaskIncrementTick+0x148>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c34:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <xTaskIncrementTick+0x148>)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d120      	bne.n	8002c82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c40:	4b48      	ldr	r3, [pc, #288]	; (8002d64 <xTaskIncrementTick+0x14c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <xTaskIncrementTick+0x48>
	__asm volatile
 8002c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4e:	f383 8811 	msr	BASEPRI, r3
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	603b      	str	r3, [r7, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	e7fe      	b.n	8002c5e <xTaskIncrementTick+0x46>
 8002c60:	4b40      	ldr	r3, [pc, #256]	; (8002d64 <xTaskIncrementTick+0x14c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <xTaskIncrementTick+0x150>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a3e      	ldr	r2, [pc, #248]	; (8002d64 <xTaskIncrementTick+0x14c>)
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4a3e      	ldr	r2, [pc, #248]	; (8002d68 <xTaskIncrementTick+0x150>)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b3d      	ldr	r3, [pc, #244]	; (8002d6c <xTaskIncrementTick+0x154>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	4a3c      	ldr	r2, [pc, #240]	; (8002d6c <xTaskIncrementTick+0x154>)
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	f000 fa9f 	bl	80031c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c82:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <xTaskIncrementTick+0x158>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d348      	bcc.n	8002d1e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c8c:	4b35      	ldr	r3, [pc, #212]	; (8002d64 <xTaskIncrementTick+0x14c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d104      	bne.n	8002ca0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c96:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <xTaskIncrementTick+0x158>)
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	601a      	str	r2, [r3, #0]
					break;
 8002c9e:	e03e      	b.n	8002d1e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ca0:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <xTaskIncrementTick+0x14c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d203      	bcs.n	8002cc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002cb8:	4a2d      	ldr	r2, [pc, #180]	; (8002d70 <xTaskIncrementTick+0x158>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002cbe:	e02e      	b.n	8002d1e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe ff12 	bl	8001aee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3318      	adds	r3, #24
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe ff09 	bl	8001aee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <xTaskIncrementTick+0x15c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <xTaskIncrementTick+0x15c>)
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <xTaskIncrementTick+0x160>)
 8002cfc:	441a      	add	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3304      	adds	r3, #4
 8002d02:	4619      	mov	r1, r3
 8002d04:	4610      	mov	r0, r2
 8002d06:	f7fe fe95 	bl	8001a34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <xTaskIncrementTick+0x164>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d3b9      	bcc.n	8002c8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d1c:	e7b6      	b.n	8002c8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <xTaskIncrementTick+0x164>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d24:	4914      	ldr	r1, [pc, #80]	; (8002d78 <xTaskIncrementTick+0x160>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d901      	bls.n	8002d3a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002d36:	2301      	movs	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <xTaskIncrementTick+0x168>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002d42:	2301      	movs	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e004      	b.n	8002d52 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <xTaskIncrementTick+0x16c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	4a0d      	ldr	r2, [pc, #52]	; (8002d84 <xTaskIncrementTick+0x16c>)
 8002d50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002d52:	697b      	ldr	r3, [r7, #20]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	2000042c 	.word	0x2000042c
 8002d60:	20000408 	.word	0x20000408
 8002d64:	200003bc 	.word	0x200003bc
 8002d68:	200003c0 	.word	0x200003c0
 8002d6c:	2000041c 	.word	0x2000041c
 8002d70:	20000424 	.word	0x20000424
 8002d74:	2000040c 	.word	0x2000040c
 8002d78:	20000308 	.word	0x20000308
 8002d7c:	20000304 	.word	0x20000304
 8002d80:	20000418 	.word	0x20000418
 8002d84:	20000414 	.word	0x20000414

08002d88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d8e:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <vTaskSwitchContext+0xa4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <vTaskSwitchContext+0xa8>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d9c:	e03f      	b.n	8002e1e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <vTaskSwitchContext+0xa8>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <vTaskSwitchContext+0xac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002db2:	7afb      	ldrb	r3, [r7, #11]
 8002db4:	f1c3 031f 	rsb	r3, r3, #31
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	491f      	ldr	r1, [pc, #124]	; (8002e38 <vTaskSwitchContext+0xb0>)
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10a      	bne.n	8002de4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	607b      	str	r3, [r7, #4]
}
 8002de0:	bf00      	nop
 8002de2:	e7fe      	b.n	8002de2 <vTaskSwitchContext+0x5a>
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <vTaskSwitchContext+0xb0>)
 8002df0:	4413      	add	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	3308      	adds	r3, #8
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d104      	bne.n	8002e14 <vTaskSwitchContext+0x8c>
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	4a08      	ldr	r2, [pc, #32]	; (8002e3c <vTaskSwitchContext+0xb4>)
 8002e1c:	6013      	str	r3, [r2, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	2000042c 	.word	0x2000042c
 8002e30:	20000418 	.word	0x20000418
 8002e34:	2000040c 	.word	0x2000040c
 8002e38:	20000308 	.word	0x20000308
 8002e3c:	20000304 	.word	0x20000304

08002e40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	60fb      	str	r3, [r7, #12]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <vTaskPlaceOnEventList+0x44>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3318      	adds	r3, #24
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fe fe04 	bl	8001a7c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e74:	2101      	movs	r1, #1
 8002e76:	6838      	ldr	r0, [r7, #0]
 8002e78:	f000 fb7e 	bl	8003578 <prvAddCurrentTaskToDelayedList>
}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000304 	.word	0x20000304

08002e88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	60fb      	str	r3, [r7, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	e7fe      	b.n	8002eb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	3318      	adds	r3, #24
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fe18 	bl	8001aee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <xTaskRemoveFromEventList+0xac>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11c      	bne.n	8002f00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fe0f 	bl	8001aee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <xTaskRemoveFromEventList+0xb0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <xTaskRemoveFromEventList+0xb0>)
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <xTaskRemoveFromEventList+0xb4>)
 8002ef0:	441a      	add	r2, r3
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4610      	mov	r0, r2
 8002efa:	f7fe fd9b 	bl	8001a34 <vListInsertEnd>
 8002efe:	e005      	b.n	8002f0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	3318      	adds	r3, #24
 8002f04:	4619      	mov	r1, r3
 8002f06:	480e      	ldr	r0, [pc, #56]	; (8002f40 <xTaskRemoveFromEventList+0xb8>)
 8002f08:	f7fe fd94 	bl	8001a34 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <xTaskRemoveFromEventList+0xbc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d905      	bls.n	8002f26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <xTaskRemoveFromEventList+0xc0>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e001      	b.n	8002f2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002f2a:	697b      	ldr	r3, [r7, #20]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	2000042c 	.word	0x2000042c
 8002f38:	2000040c 	.word	0x2000040c
 8002f3c:	20000308 	.word	0x20000308
 8002f40:	200003c4 	.word	0x200003c4
 8002f44:	20000304 	.word	0x20000304
 8002f48:	20000418 	.word	0x20000418

08002f4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <vTaskInternalSetTimeOutState+0x24>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <vTaskInternalSetTimeOutState+0x28>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	605a      	str	r2, [r3, #4]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	2000041c 	.word	0x2000041c
 8002f74:	20000408 	.word	0x20000408

08002f78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	613b      	str	r3, [r7, #16]
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	60fb      	str	r3, [r7, #12]
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002fba:	f000 fc73 	bl	80038a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <xTaskCheckForTimeOut+0xbc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d102      	bne.n	8002fde <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	e023      	b.n	8003026 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <xTaskCheckForTimeOut+0xc0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d007      	beq.n	8002ffa <xTaskCheckForTimeOut+0x82>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d302      	bcc.n	8002ffa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	e015      	b.n	8003026 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	429a      	cmp	r2, r3
 8003002:	d20b      	bcs.n	800301c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	1ad2      	subs	r2, r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff9b 	bl	8002f4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	e004      	b.n	8003026 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003022:	2301      	movs	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003026:	f000 fc6d 	bl	8003904 <vPortExitCritical>

	return xReturn;
 800302a:	69fb      	ldr	r3, [r7, #28]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000408 	.word	0x20000408
 8003038:	2000041c 	.word	0x2000041c

0800303c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <vTaskMissedYield+0x14>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	20000418 	.word	0x20000418

08003054 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800305c:	f000 f852 	bl	8003104 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <prvIdleTask+0x28>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d9f9      	bls.n	800305c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <prvIdleTask+0x2c>)
 800306a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003078:	e7f0      	b.n	800305c <prvIdleTask+0x8>
 800307a:	bf00      	nop
 800307c:	20000308 	.word	0x20000308
 8003080:	e000ed04 	.word	0xe000ed04

08003084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800308a:	2300      	movs	r3, #0
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	e00c      	b.n	80030aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4a12      	ldr	r2, [pc, #72]	; (80030e4 <prvInitialiseTaskLists+0x60>)
 800309c:	4413      	add	r3, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe fc9b 	bl	80019da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3301      	adds	r3, #1
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b06      	cmp	r3, #6
 80030ae:	d9ef      	bls.n	8003090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80030b0:	480d      	ldr	r0, [pc, #52]	; (80030e8 <prvInitialiseTaskLists+0x64>)
 80030b2:	f7fe fc92 	bl	80019da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80030b6:	480d      	ldr	r0, [pc, #52]	; (80030ec <prvInitialiseTaskLists+0x68>)
 80030b8:	f7fe fc8f 	bl	80019da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80030bc:	480c      	ldr	r0, [pc, #48]	; (80030f0 <prvInitialiseTaskLists+0x6c>)
 80030be:	f7fe fc8c 	bl	80019da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80030c2:	480c      	ldr	r0, [pc, #48]	; (80030f4 <prvInitialiseTaskLists+0x70>)
 80030c4:	f7fe fc89 	bl	80019da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80030c8:	480b      	ldr	r0, [pc, #44]	; (80030f8 <prvInitialiseTaskLists+0x74>)
 80030ca:	f7fe fc86 	bl	80019da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <prvInitialiseTaskLists+0x78>)
 80030d0:	4a05      	ldr	r2, [pc, #20]	; (80030e8 <prvInitialiseTaskLists+0x64>)
 80030d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <prvInitialiseTaskLists+0x7c>)
 80030d6:	4a05      	ldr	r2, [pc, #20]	; (80030ec <prvInitialiseTaskLists+0x68>)
 80030d8:	601a      	str	r2, [r3, #0]
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000308 	.word	0x20000308
 80030e8:	20000394 	.word	0x20000394
 80030ec:	200003a8 	.word	0x200003a8
 80030f0:	200003c4 	.word	0x200003c4
 80030f4:	200003d8 	.word	0x200003d8
 80030f8:	200003f0 	.word	0x200003f0
 80030fc:	200003bc 	.word	0x200003bc
 8003100:	200003c0 	.word	0x200003c0

08003104 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800310a:	e019      	b.n	8003140 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800310c:	f000 fbca 	bl	80038a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <prvCheckTasksWaitingTermination+0x50>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3304      	adds	r3, #4
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe fce6 	bl	8001aee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <prvCheckTasksWaitingTermination+0x54>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3b01      	subs	r3, #1
 8003128:	4a0b      	ldr	r2, [pc, #44]	; (8003158 <prvCheckTasksWaitingTermination+0x54>)
 800312a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <prvCheckTasksWaitingTermination+0x58>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3b01      	subs	r3, #1
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <prvCheckTasksWaitingTermination+0x58>)
 8003134:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003136:	f000 fbe5 	bl	8003904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f810 	bl	8003160 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <prvCheckTasksWaitingTermination+0x58>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e1      	bne.n	800310c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200003d8 	.word	0x200003d8
 8003158:	20000404 	.word	0x20000404
 800315c:	200003ec 	.word	0x200003ec

08003160 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800316e:	2b00      	cmp	r3, #0
 8003170:	d108      	bne.n	8003184 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fd42 	bl	8003c00 <vPortFree>
				vPortFree( pxTCB );
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fd3f 	bl	8003c00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003182:	e018      	b.n	80031b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800318a:	2b01      	cmp	r3, #1
 800318c:	d103      	bne.n	8003196 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fd36 	bl	8003c00 <vPortFree>
	}
 8003194:	e00f      	b.n	80031b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800319c:	2b02      	cmp	r3, #2
 800319e:	d00a      	beq.n	80031b6 <prvDeleteTCB+0x56>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	60fb      	str	r3, [r7, #12]
}
 80031b2:	bf00      	nop
 80031b4:	e7fe      	b.n	80031b4 <prvDeleteTCB+0x54>
	}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <prvResetNextTaskUnblockTime+0x38>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d104      	bne.n	80031da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <prvResetNextTaskUnblockTime+0x3c>)
 80031d2:	f04f 32ff 	mov.w	r2, #4294967295
 80031d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80031d8:	e008      	b.n	80031ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <prvResetNextTaskUnblockTime+0x38>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a04      	ldr	r2, [pc, #16]	; (80031fc <prvResetNextTaskUnblockTime+0x3c>)
 80031ea:	6013      	str	r3, [r2, #0]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	200003bc 	.word	0x200003bc
 80031fc:	20000424 	.word	0x20000424

08003200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <xTaskGetSchedulerState+0x34>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800320e:	2301      	movs	r3, #1
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	e008      	b.n	8003226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <xTaskGetSchedulerState+0x38>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800321c:	2302      	movs	r3, #2
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	e001      	b.n	8003226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003226:	687b      	ldr	r3, [r7, #4]
	}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	20000410 	.word	0x20000410
 8003238:	2000042c 	.word	0x2000042c

0800323c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d05e      	beq.n	8003310 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	4b31      	ldr	r3, [pc, #196]	; (800331c <xTaskPriorityInherit+0xe0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	429a      	cmp	r2, r3
 800325e:	d24e      	bcs.n	80032fe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	db06      	blt.n	8003276 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003268:	4b2c      	ldr	r3, [pc, #176]	; (800331c <xTaskPriorityInherit+0xe0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	f1c3 0207 	rsb	r2, r3, #7
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6959      	ldr	r1, [r3, #20]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4a26      	ldr	r2, [pc, #152]	; (8003320 <xTaskPriorityInherit+0xe4>)
 8003288:	4413      	add	r3, r2
 800328a:	4299      	cmp	r1, r3
 800328c:	d12f      	bne.n	80032ee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3304      	adds	r3, #4
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe fc2b 	bl	8001aee <uxListRemove>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	2201      	movs	r2, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43da      	mvns	r2, r3
 80032aa:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <xTaskPriorityInherit+0xe8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4013      	ands	r3, r2
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <xTaskPriorityInherit+0xe8>)
 80032b2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <xTaskPriorityInherit+0xe0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	2201      	movs	r2, #1
 80032c4:	409a      	lsls	r2, r3
 80032c6:	4b17      	ldr	r3, [pc, #92]	; (8003324 <xTaskPriorityInherit+0xe8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <xTaskPriorityInherit+0xe8>)
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4a10      	ldr	r2, [pc, #64]	; (8003320 <xTaskPriorityInherit+0xe4>)
 80032de:	441a      	add	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f7fe fba4 	bl	8001a34 <vListInsertEnd>
 80032ec:	e004      	b.n	80032f8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <xTaskPriorityInherit+0xe0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e008      	b.n	8003310 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <xTaskPriorityInherit+0xe0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	429a      	cmp	r2, r3
 800330a:	d201      	bcs.n	8003310 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800330c:	2301      	movs	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003310:	68fb      	ldr	r3, [r7, #12]
	}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000304 	.word	0x20000304
 8003320:	20000308 	.word	0x20000308
 8003324:	2000040c 	.word	0x2000040c

08003328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d06e      	beq.n	800341c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800333e:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <xTaskPriorityDisinherit+0x100>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	429a      	cmp	r2, r3
 8003346:	d00a      	beq.n	800335e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	60fb      	str	r3, [r7, #12]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	60bb      	str	r3, [r7, #8]
}
 8003378:	bf00      	nop
 800337a:	e7fe      	b.n	800337a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003380:	1e5a      	subs	r2, r3, #1
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	429a      	cmp	r2, r3
 8003390:	d044      	beq.n	800341c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003396:	2b00      	cmp	r3, #0
 8003398:	d140      	bne.n	800341c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	3304      	adds	r3, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fba5 	bl	8001aee <uxListRemove>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d115      	bne.n	80033d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ae:	491f      	ldr	r1, [pc, #124]	; (800342c <xTaskPriorityDisinherit+0x104>)
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <xTaskPriorityDisinherit+0xae>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2201      	movs	r2, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	4b18      	ldr	r3, [pc, #96]	; (8003430 <xTaskPriorityDisinherit+0x108>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4013      	ands	r3, r2
 80033d2:	4a17      	ldr	r2, [pc, #92]	; (8003430 <xTaskPriorityDisinherit+0x108>)
 80033d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	f1c3 0207 	rsb	r2, r3, #7
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	2201      	movs	r2, #1
 80033f0:	409a      	lsls	r2, r3
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <xTaskPriorityDisinherit+0x108>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <xTaskPriorityDisinherit+0x108>)
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4a08      	ldr	r2, [pc, #32]	; (800342c <xTaskPriorityDisinherit+0x104>)
 800340a:	441a      	add	r2, r3
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	3304      	adds	r3, #4
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f7fe fb0e 	bl	8001a34 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003418:	2301      	movs	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800341c:	697b      	ldr	r3, [r7, #20]
	}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000304 	.word	0x20000304
 800342c:	20000308 	.word	0x20000308
 8003430:	2000040c 	.word	0x2000040c

08003434 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003442:	2301      	movs	r3, #1
 8003444:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d077      	beq.n	800353c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	60fb      	str	r3, [r7, #12]
}
 8003466:	bf00      	nop
 8003468:	e7fe      	b.n	8003468 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d902      	bls.n	800347a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	e002      	b.n	8003480 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	429a      	cmp	r2, r3
 8003488:	d058      	beq.n	800353c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	429a      	cmp	r2, r3
 8003492:	d153      	bne.n	800353c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	429a      	cmp	r2, r3
 800349c:	d10a      	bne.n	80034b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	60bb      	str	r3, [r7, #8]
}
 80034b0:	bf00      	nop
 80034b2:	e7fe      	b.n	80034b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	db04      	blt.n	80034d2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f1c3 0207 	rsb	r2, r3, #7
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	6959      	ldr	r1, [r3, #20]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4a19      	ldr	r2, [pc, #100]	; (8003548 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80034e2:	4413      	add	r3, r2
 80034e4:	4299      	cmp	r1, r3
 80034e6:	d129      	bne.n	800353c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fafe 	bl	8001aee <uxListRemove>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	2201      	movs	r2, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4013      	ands	r3, r2
 800350a:	4a10      	ldr	r2, [pc, #64]	; (800354c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800350c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	2201      	movs	r2, #1
 8003514:	409a      	lsls	r2, r3
 8003516:	4b0d      	ldr	r3, [pc, #52]	; (800354c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4313      	orrs	r3, r2
 800351c:	4a0b      	ldr	r2, [pc, #44]	; (800354c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4a06      	ldr	r2, [pc, #24]	; (8003548 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800352e:	441a      	add	r2, r3
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f7fe fa7c 	bl	8001a34 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800353c:	bf00      	nop
 800353e:	3720      	adds	r7, #32
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000304 	.word	0x20000304
 8003548:	20000308 	.word	0x20000308
 800354c:	2000040c 	.word	0x2000040c

08003550 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003554:	4b07      	ldr	r3, [pc, #28]	; (8003574 <pvTaskIncrementMutexHeldCount+0x24>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <pvTaskIncrementMutexHeldCount+0x24>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003562:	3201      	adds	r2, #1
 8003564:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003566:	4b03      	ldr	r3, [pc, #12]	; (8003574 <pvTaskIncrementMutexHeldCount+0x24>)
 8003568:	681b      	ldr	r3, [r3, #0]
	}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	20000304 	.word	0x20000304

08003578 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003582:	4b29      	ldr	r3, [pc, #164]	; (8003628 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003588:	4b28      	ldr	r3, [pc, #160]	; (800362c <prvAddCurrentTaskToDelayedList+0xb4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3304      	adds	r3, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe faad 	bl	8001aee <uxListRemove>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <prvAddCurrentTaskToDelayedList+0xb4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	2201      	movs	r2, #1
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	4b21      	ldr	r3, [pc, #132]	; (8003630 <prvAddCurrentTaskToDelayedList+0xb8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4013      	ands	r3, r2
 80035ae:	4a20      	ldr	r2, [pc, #128]	; (8003630 <prvAddCurrentTaskToDelayedList+0xb8>)
 80035b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d10a      	bne.n	80035d0 <prvAddCurrentTaskToDelayedList+0x58>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <prvAddCurrentTaskToDelayedList+0xb4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3304      	adds	r3, #4
 80035c6:	4619      	mov	r1, r3
 80035c8:	481a      	ldr	r0, [pc, #104]	; (8003634 <prvAddCurrentTaskToDelayedList+0xbc>)
 80035ca:	f7fe fa33 	bl	8001a34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035ce:	e026      	b.n	800361e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035d8:	4b14      	ldr	r3, [pc, #80]	; (800362c <prvAddCurrentTaskToDelayedList+0xb4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d209      	bcs.n	80035fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e8:	4b13      	ldr	r3, [pc, #76]	; (8003638 <prvAddCurrentTaskToDelayedList+0xc0>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3304      	adds	r3, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7fe fa41 	bl	8001a7c <vListInsert>
}
 80035fa:	e010      	b.n	800361e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <prvAddCurrentTaskToDelayedList+0xc4>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3304      	adds	r3, #4
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7fe fa37 	bl	8001a7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	429a      	cmp	r2, r3
 8003616:	d202      	bcs.n	800361e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003618:	4a09      	ldr	r2, [pc, #36]	; (8003640 <prvAddCurrentTaskToDelayedList+0xc8>)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6013      	str	r3, [r2, #0]
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000408 	.word	0x20000408
 800362c:	20000304 	.word	0x20000304
 8003630:	2000040c 	.word	0x2000040c
 8003634:	200003f0 	.word	0x200003f0
 8003638:	200003c0 	.word	0x200003c0
 800363c:	200003bc 	.word	0x200003bc
 8003640:	20000424 	.word	0x20000424

08003644 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3b04      	subs	r3, #4
 8003654:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800365c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3b04      	subs	r3, #4
 8003662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f023 0201 	bic.w	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3b04      	subs	r3, #4
 8003672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003674:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <pxPortInitialiseStack+0x64>)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3b14      	subs	r3, #20
 800367e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3b04      	subs	r3, #4
 800368a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f06f 0202 	mvn.w	r2, #2
 8003692:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3b20      	subs	r3, #32
 8003698:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	080036ad 	.word	0x080036ad

080036ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80036b6:	4b12      	ldr	r3, [pc, #72]	; (8003700 <prvTaskExitError+0x54>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d00a      	beq.n	80036d6 <prvTaskExitError+0x2a>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	60fb      	str	r3, [r7, #12]
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <prvTaskExitError+0x28>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	60bb      	str	r3, [r7, #8]
}
 80036e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80036ea:	bf00      	nop
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0fc      	beq.n	80036ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036f2:	bf00      	nop
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	2000000c 	.word	0x2000000c
	...

08003710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <pxCurrentTCBConst2>)
 8003712:	6819      	ldr	r1, [r3, #0]
 8003714:	6808      	ldr	r0, [r1, #0]
 8003716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371a:	f380 8809 	msr	PSP, r0
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f04f 0000 	mov.w	r0, #0
 8003726:	f380 8811 	msr	BASEPRI, r0
 800372a:	4770      	bx	lr
 800372c:	f3af 8000 	nop.w

08003730 <pxCurrentTCBConst2>:
 8003730:	20000304 	.word	0x20000304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop

08003738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003738:	4808      	ldr	r0, [pc, #32]	; (800375c <prvPortStartFirstTask+0x24>)
 800373a:	6800      	ldr	r0, [r0, #0]
 800373c:	6800      	ldr	r0, [r0, #0]
 800373e:	f380 8808 	msr	MSP, r0
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	f380 8814 	msr	CONTROL, r0
 800374a:	b662      	cpsie	i
 800374c:	b661      	cpsie	f
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	df00      	svc	0
 8003758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800375a:	bf00      	nop
 800375c:	e000ed08 	.word	0xe000ed08

08003760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003766:	4b46      	ldr	r3, [pc, #280]	; (8003880 <xPortStartScheduler+0x120>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a46      	ldr	r2, [pc, #280]	; (8003884 <xPortStartScheduler+0x124>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d10a      	bne.n	8003786 <xPortStartScheduler+0x26>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	613b      	str	r3, [r7, #16]
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003786:	4b3e      	ldr	r3, [pc, #248]	; (8003880 <xPortStartScheduler+0x120>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3f      	ldr	r2, [pc, #252]	; (8003888 <xPortStartScheduler+0x128>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d10a      	bne.n	80037a6 <xPortStartScheduler+0x46>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	60fb      	str	r3, [r7, #12]
}
 80037a2:	bf00      	nop
 80037a4:	e7fe      	b.n	80037a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <xPortStartScheduler+0x12c>)
 80037a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	22ff      	movs	r2, #255	; 0xff
 80037b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	4b31      	ldr	r3, [pc, #196]	; (8003890 <xPortStartScheduler+0x130>)
 80037cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037ce:	4b31      	ldr	r3, [pc, #196]	; (8003894 <xPortStartScheduler+0x134>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037d4:	e009      	b.n	80037ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80037d6:	4b2f      	ldr	r3, [pc, #188]	; (8003894 <xPortStartScheduler+0x134>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3b01      	subs	r3, #1
 80037dc:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <xPortStartScheduler+0x134>)
 80037de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d0ef      	beq.n	80037d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037f6:	4b27      	ldr	r3, [pc, #156]	; (8003894 <xPortStartScheduler+0x134>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f1c3 0307 	rsb	r3, r3, #7
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d00a      	beq.n	8003818 <xPortStartScheduler+0xb8>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	60bb      	str	r3, [r7, #8]
}
 8003814:	bf00      	nop
 8003816:	e7fe      	b.n	8003816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003818:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <xPortStartScheduler+0x134>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <xPortStartScheduler+0x134>)
 8003820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <xPortStartScheduler+0x134>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800382a:	4a1a      	ldr	r2, [pc, #104]	; (8003894 <xPortStartScheduler+0x134>)
 800382c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003836:	4b18      	ldr	r3, [pc, #96]	; (8003898 <xPortStartScheduler+0x138>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a17      	ldr	r2, [pc, #92]	; (8003898 <xPortStartScheduler+0x138>)
 800383c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <xPortStartScheduler+0x138>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a14      	ldr	r2, [pc, #80]	; (8003898 <xPortStartScheduler+0x138>)
 8003848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800384c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800384e:	f000 f8dd 	bl	8003a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <xPortStartScheduler+0x13c>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003858:	f000 f8fc 	bl	8003a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800385c:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <xPortStartScheduler+0x140>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0f      	ldr	r2, [pc, #60]	; (80038a0 <xPortStartScheduler+0x140>)
 8003862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003868:	f7ff ff66 	bl	8003738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800386c:	f7ff fa8c 	bl	8002d88 <vTaskSwitchContext>
	prvTaskExitError();
 8003870:	f7ff ff1c 	bl	80036ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	e000ed00 	.word	0xe000ed00
 8003884:	410fc271 	.word	0x410fc271
 8003888:	410fc270 	.word	0x410fc270
 800388c:	e000e400 	.word	0xe000e400
 8003890:	20000430 	.word	0x20000430
 8003894:	20000434 	.word	0x20000434
 8003898:	e000ed20 	.word	0xe000ed20
 800389c:	2000000c 	.word	0x2000000c
 80038a0:	e000ef34 	.word	0xe000ef34

080038a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
	__asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	607b      	str	r3, [r7, #4]
}
 80038bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <vPortEnterCritical+0x58>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	4a0d      	ldr	r2, [pc, #52]	; (80038fc <vPortEnterCritical+0x58>)
 80038c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <vPortEnterCritical+0x58>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10f      	bne.n	80038f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <vPortEnterCritical+0x5c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	603b      	str	r3, [r7, #0]
}
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <vPortEnterCritical+0x4a>
	}
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	2000000c 	.word	0x2000000c
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <vPortExitCritical+0x50>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <vPortExitCritical+0x24>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	607b      	str	r3, [r7, #4]
}
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <vPortExitCritical+0x50>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3b01      	subs	r3, #1
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <vPortExitCritical+0x50>)
 8003930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <vPortExitCritical+0x50>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <vPortExitCritical+0x42>
 800393a:	2300      	movs	r3, #0
 800393c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	2000000c 	.word	0x2000000c
	...

08003960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003960:	f3ef 8009 	mrs	r0, PSP
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <pxCurrentTCBConst>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	f01e 0f10 	tst.w	lr, #16
 8003970:	bf08      	it	eq
 8003972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397a:	6010      	str	r0, [r2, #0]
 800397c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003984:	f380 8811 	msr	BASEPRI, r0
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f7ff f9fa 	bl	8002d88 <vTaskSwitchContext>
 8003994:	f04f 0000 	mov.w	r0, #0
 8003998:	f380 8811 	msr	BASEPRI, r0
 800399c:	bc09      	pop	{r0, r3}
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	6808      	ldr	r0, [r1, #0]
 80039a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a6:	f01e 0f10 	tst.w	lr, #16
 80039aa:	bf08      	it	eq
 80039ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80039b0:	f380 8809 	msr	PSP, r0
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	f3af 8000 	nop.w

080039c0 <pxCurrentTCBConst>:
 80039c0:	20000304 	.word	0x20000304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop

080039c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	607b      	str	r3, [r7, #4]
}
 80039e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80039e2:	f7ff f919 	bl	8002c18 <xTaskIncrementTick>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <xPortSysTickHandler+0x40>)
 80039ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	2300      	movs	r3, #0
 80039f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f383 8811 	msr	BASEPRI, r3
}
 80039fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	e000ed04 	.word	0xe000ed04

08003a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <vPortSetupTimerInterrupt+0x34>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <vPortSetupTimerInterrupt+0x38>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <vPortSetupTimerInterrupt+0x3c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <vPortSetupTimerInterrupt+0x40>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	099b      	lsrs	r3, r3, #6
 8003a28:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <vPortSetupTimerInterrupt+0x44>)
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <vPortSetupTimerInterrupt+0x34>)
 8003a30:	2207      	movs	r2, #7
 8003a32:	601a      	str	r2, [r3, #0]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	e000e010 	.word	0xe000e010
 8003a44:	e000e018 	.word	0xe000e018
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	10624dd3 	.word	0x10624dd3
 8003a50:	e000e014 	.word	0xe000e014

08003a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a64 <vPortEnableVFP+0x10>
 8003a58:	6801      	ldr	r1, [r0, #0]
 8003a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a5e:	6001      	str	r1, [r0, #0]
 8003a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003a62:	bf00      	nop
 8003a64:	e000ed88 	.word	0xe000ed88

08003a68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a74:	f7ff f826 	bl	8002ac4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a78:	4b5b      	ldr	r3, [pc, #364]	; (8003be8 <pvPortMalloc+0x180>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a80:	f000 f920 	bl	8003cc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a84:	4b59      	ldr	r3, [pc, #356]	; (8003bec <pvPortMalloc+0x184>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f040 8093 	bne.w	8003bb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01d      	beq.n	8003ad4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003a98:	2208      	movs	r2, #8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d014      	beq.n	8003ad4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f023 0307 	bic.w	r3, r3, #7
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <pvPortMalloc+0x6c>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	617b      	str	r3, [r7, #20]
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d06e      	beq.n	8003bb8 <pvPortMalloc+0x150>
 8003ada:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <pvPortMalloc+0x188>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d869      	bhi.n	8003bb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ae4:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <pvPortMalloc+0x18c>)
 8003ae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ae8:	4b42      	ldr	r3, [pc, #264]	; (8003bf4 <pvPortMalloc+0x18c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aee:	e004      	b.n	8003afa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d903      	bls.n	8003b0c <pvPortMalloc+0xa4>
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f1      	bne.n	8003af0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b0c:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <pvPortMalloc+0x180>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d050      	beq.n	8003bb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	4413      	add	r3, r2
 8003b1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	1ad2      	subs	r2, r2, r3
 8003b30:	2308      	movs	r3, #8
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d91f      	bls.n	8003b78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <pvPortMalloc+0xf8>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	613b      	str	r3, [r7, #16]
}
 8003b5c:	bf00      	nop
 8003b5e:	e7fe      	b.n	8003b5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	1ad2      	subs	r2, r2, r3
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b72:	69b8      	ldr	r0, [r7, #24]
 8003b74:	f000 f908 	bl	8003d88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <pvPortMalloc+0x188>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	4a1b      	ldr	r2, [pc, #108]	; (8003bf0 <pvPortMalloc+0x188>)
 8003b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b86:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <pvPortMalloc+0x188>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <pvPortMalloc+0x190>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d203      	bcs.n	8003b9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b92:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <pvPortMalloc+0x188>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <pvPortMalloc+0x190>)
 8003b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	4b13      	ldr	r3, [pc, #76]	; (8003bec <pvPortMalloc+0x184>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <pvPortMalloc+0x194>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	4a11      	ldr	r2, [pc, #68]	; (8003bfc <pvPortMalloc+0x194>)
 8003bb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003bb8:	f7fe ff92 	bl	8002ae0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <pvPortMalloc+0x174>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	60fb      	str	r3, [r7, #12]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <pvPortMalloc+0x172>
	return pvReturn;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3728      	adds	r7, #40	; 0x28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20004040 	.word	0x20004040
 8003bec:	20004054 	.word	0x20004054
 8003bf0:	20004044 	.word	0x20004044
 8003bf4:	20004038 	.word	0x20004038
 8003bf8:	20004048 	.word	0x20004048
 8003bfc:	2000404c 	.word	0x2000404c

08003c00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d04d      	beq.n	8003cae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c12:	2308      	movs	r3, #8
 8003c14:	425b      	negs	r3, r3
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4413      	add	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <vPortFree+0xb8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <vPortFree+0x44>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	60fb      	str	r3, [r7, #12]
}
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <vPortFree+0x62>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	60bb      	str	r3, [r7, #8]
}
 8003c5e:	bf00      	nop
 8003c60:	e7fe      	b.n	8003c60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <vPortFree+0xb8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01e      	beq.n	8003cae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11a      	bne.n	8003cae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <vPortFree+0xb8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	401a      	ands	r2, r3
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c88:	f7fe ff1c 	bl	8002ac4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <vPortFree+0xbc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4413      	add	r3, r2
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <vPortFree+0xbc>)
 8003c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c9a:	6938      	ldr	r0, [r7, #16]
 8003c9c:	f000 f874 	bl	8003d88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ca0:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <vPortFree+0xc0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	4a06      	ldr	r2, [pc, #24]	; (8003cc0 <vPortFree+0xc0>)
 8003ca8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003caa:	f7fe ff19 	bl	8002ae0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20004054 	.word	0x20004054
 8003cbc:	20004044 	.word	0x20004044
 8003cc0:	20004050 	.word	0x20004050

08003cc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003cce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <prvHeapInit+0xac>)
 8003cd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00c      	beq.n	8003cf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3307      	adds	r3, #7
 8003ce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0307 	bic.w	r3, r3, #7
 8003cea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <prvHeapInit+0xac>)
 8003cf4:	4413      	add	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <prvHeapInit+0xb0>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d02:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <prvHeapInit+0xb0>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d10:	2208      	movs	r2, #8
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0307 	bic.w	r3, r3, #7
 8003d1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <prvHeapInit+0xb4>)
 8003d24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d26:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <prvHeapInit+0xb4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <prvHeapInit+0xb4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	1ad2      	subs	r2, r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <prvHeapInit+0xb4>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <prvHeapInit+0xb8>)
 8003d52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <prvHeapInit+0xbc>)
 8003d5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <prvHeapInit+0xc0>)
 8003d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d62:	601a      	str	r2, [r3, #0]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	20000438 	.word	0x20000438
 8003d74:	20004038 	.word	0x20004038
 8003d78:	20004040 	.word	0x20004040
 8003d7c:	20004048 	.word	0x20004048
 8003d80:	20004044 	.word	0x20004044
 8003d84:	20004054 	.word	0x20004054

08003d88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d90:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <prvInsertBlockIntoFreeList+0xac>)
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e002      	b.n	8003d9c <prvInsertBlockIntoFreeList+0x14>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d8f7      	bhi.n	8003d96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	4413      	add	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d108      	bne.n	8003dca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	441a      	add	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	441a      	add	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d118      	bne.n	8003e10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <prvInsertBlockIntoFreeList+0xb0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d00d      	beq.n	8003e06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	441a      	add	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e008      	b.n	8003e18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <prvInsertBlockIntoFreeList+0xb0>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e003      	b.n	8003e18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d002      	beq.n	8003e26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20004038 	.word	0x20004038
 8003e38:	20004040 	.word	0x20004040

08003e3c <std>:
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	b510      	push	{r4, lr}
 8003e40:	4604      	mov	r4, r0
 8003e42:	e9c0 3300 	strd	r3, r3, [r0]
 8003e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e4a:	6083      	str	r3, [r0, #8]
 8003e4c:	8181      	strh	r1, [r0, #12]
 8003e4e:	6643      	str	r3, [r0, #100]	; 0x64
 8003e50:	81c2      	strh	r2, [r0, #14]
 8003e52:	6183      	str	r3, [r0, #24]
 8003e54:	4619      	mov	r1, r3
 8003e56:	2208      	movs	r2, #8
 8003e58:	305c      	adds	r0, #92	; 0x5c
 8003e5a:	f000 f9e5 	bl	8004228 <memset>
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <std+0x38>)
 8003e60:	6263      	str	r3, [r4, #36]	; 0x24
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <std+0x3c>)
 8003e64:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <std+0x40>)
 8003e68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e6a:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <std+0x44>)
 8003e6c:	6224      	str	r4, [r4, #32]
 8003e6e:	6323      	str	r3, [r4, #48]	; 0x30
 8003e70:	bd10      	pop	{r4, pc}
 8003e72:	bf00      	nop
 8003e74:	08004079 	.word	0x08004079
 8003e78:	0800409b 	.word	0x0800409b
 8003e7c:	080040d3 	.word	0x080040d3
 8003e80:	080040f7 	.word	0x080040f7

08003e84 <stdio_exit_handler>:
 8003e84:	4a02      	ldr	r2, [pc, #8]	; (8003e90 <stdio_exit_handler+0xc>)
 8003e86:	4903      	ldr	r1, [pc, #12]	; (8003e94 <stdio_exit_handler+0x10>)
 8003e88:	4803      	ldr	r0, [pc, #12]	; (8003e98 <stdio_exit_handler+0x14>)
 8003e8a:	f000 b869 	b.w	8003f60 <_fwalk_sglue>
 8003e8e:	bf00      	nop
 8003e90:	20000010 	.word	0x20000010
 8003e94:	08004bdd 	.word	0x08004bdd
 8003e98:	2000001c 	.word	0x2000001c

08003e9c <cleanup_stdio>:
 8003e9c:	6841      	ldr	r1, [r0, #4]
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <cleanup_stdio+0x34>)
 8003ea0:	4299      	cmp	r1, r3
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	d001      	beq.n	8003eac <cleanup_stdio+0x10>
 8003ea8:	f000 fe98 	bl	8004bdc <_fflush_r>
 8003eac:	68a1      	ldr	r1, [r4, #8]
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <cleanup_stdio+0x38>)
 8003eb0:	4299      	cmp	r1, r3
 8003eb2:	d002      	beq.n	8003eba <cleanup_stdio+0x1e>
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 fe91 	bl	8004bdc <_fflush_r>
 8003eba:	68e1      	ldr	r1, [r4, #12]
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <cleanup_stdio+0x3c>)
 8003ebe:	4299      	cmp	r1, r3
 8003ec0:	d004      	beq.n	8003ecc <cleanup_stdio+0x30>
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ec8:	f000 be88 	b.w	8004bdc <_fflush_r>
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	bf00      	nop
 8003ed0:	20004058 	.word	0x20004058
 8003ed4:	200040c0 	.word	0x200040c0
 8003ed8:	20004128 	.word	0x20004128

08003edc <global_stdio_init.part.0>:
 8003edc:	b510      	push	{r4, lr}
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <global_stdio_init.part.0+0x30>)
 8003ee0:	4c0b      	ldr	r4, [pc, #44]	; (8003f10 <global_stdio_init.part.0+0x34>)
 8003ee2:	4a0c      	ldr	r2, [pc, #48]	; (8003f14 <global_stdio_init.part.0+0x38>)
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2104      	movs	r1, #4
 8003eec:	f7ff ffa6 	bl	8003e3c <std>
 8003ef0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	2109      	movs	r1, #9
 8003ef8:	f7ff ffa0 	bl	8003e3c <std>
 8003efc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003f00:	2202      	movs	r2, #2
 8003f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f06:	2112      	movs	r1, #18
 8003f08:	f7ff bf98 	b.w	8003e3c <std>
 8003f0c:	20004190 	.word	0x20004190
 8003f10:	20004058 	.word	0x20004058
 8003f14:	08003e85 	.word	0x08003e85

08003f18 <__sfp_lock_acquire>:
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <__sfp_lock_acquire+0x8>)
 8003f1a:	f000 b9fd 	b.w	8004318 <__retarget_lock_acquire_recursive>
 8003f1e:	bf00      	nop
 8003f20:	20004199 	.word	0x20004199

08003f24 <__sfp_lock_release>:
 8003f24:	4801      	ldr	r0, [pc, #4]	; (8003f2c <__sfp_lock_release+0x8>)
 8003f26:	f000 b9f8 	b.w	800431a <__retarget_lock_release_recursive>
 8003f2a:	bf00      	nop
 8003f2c:	20004199 	.word	0x20004199

08003f30 <__sinit>:
 8003f30:	b510      	push	{r4, lr}
 8003f32:	4604      	mov	r4, r0
 8003f34:	f7ff fff0 	bl	8003f18 <__sfp_lock_acquire>
 8003f38:	6a23      	ldr	r3, [r4, #32]
 8003f3a:	b11b      	cbz	r3, 8003f44 <__sinit+0x14>
 8003f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f40:	f7ff bff0 	b.w	8003f24 <__sfp_lock_release>
 8003f44:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <__sinit+0x28>)
 8003f46:	6223      	str	r3, [r4, #32]
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <__sinit+0x2c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f5      	bne.n	8003f3c <__sinit+0xc>
 8003f50:	f7ff ffc4 	bl	8003edc <global_stdio_init.part.0>
 8003f54:	e7f2      	b.n	8003f3c <__sinit+0xc>
 8003f56:	bf00      	nop
 8003f58:	08003e9d 	.word	0x08003e9d
 8003f5c:	20004190 	.word	0x20004190

08003f60 <_fwalk_sglue>:
 8003f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f64:	4607      	mov	r7, r0
 8003f66:	4688      	mov	r8, r1
 8003f68:	4614      	mov	r4, r2
 8003f6a:	2600      	movs	r6, #0
 8003f6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f70:	f1b9 0901 	subs.w	r9, r9, #1
 8003f74:	d505      	bpl.n	8003f82 <_fwalk_sglue+0x22>
 8003f76:	6824      	ldr	r4, [r4, #0]
 8003f78:	2c00      	cmp	r4, #0
 8003f7a:	d1f7      	bne.n	8003f6c <_fwalk_sglue+0xc>
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f82:	89ab      	ldrh	r3, [r5, #12]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d907      	bls.n	8003f98 <_fwalk_sglue+0x38>
 8003f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	d003      	beq.n	8003f98 <_fwalk_sglue+0x38>
 8003f90:	4629      	mov	r1, r5
 8003f92:	4638      	mov	r0, r7
 8003f94:	47c0      	blx	r8
 8003f96:	4306      	orrs	r6, r0
 8003f98:	3568      	adds	r5, #104	; 0x68
 8003f9a:	e7e9      	b.n	8003f70 <_fwalk_sglue+0x10>

08003f9c <iprintf>:
 8003f9c:	b40f      	push	{r0, r1, r2, r3}
 8003f9e:	b507      	push	{r0, r1, r2, lr}
 8003fa0:	4906      	ldr	r1, [pc, #24]	; (8003fbc <iprintf+0x20>)
 8003fa2:	ab04      	add	r3, sp, #16
 8003fa4:	6808      	ldr	r0, [r1, #0]
 8003fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003faa:	6881      	ldr	r1, [r0, #8]
 8003fac:	9301      	str	r3, [sp, #4]
 8003fae:	f000 fae5 	bl	800457c <_vfiprintf_r>
 8003fb2:	b003      	add	sp, #12
 8003fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fb8:	b004      	add	sp, #16
 8003fba:	4770      	bx	lr
 8003fbc:	20000068 	.word	0x20000068

08003fc0 <_puts_r>:
 8003fc0:	6a03      	ldr	r3, [r0, #32]
 8003fc2:	b570      	push	{r4, r5, r6, lr}
 8003fc4:	6884      	ldr	r4, [r0, #8]
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	460e      	mov	r6, r1
 8003fca:	b90b      	cbnz	r3, 8003fd0 <_puts_r+0x10>
 8003fcc:	f7ff ffb0 	bl	8003f30 <__sinit>
 8003fd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fd2:	07db      	lsls	r3, r3, #31
 8003fd4:	d405      	bmi.n	8003fe2 <_puts_r+0x22>
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	0598      	lsls	r0, r3, #22
 8003fda:	d402      	bmi.n	8003fe2 <_puts_r+0x22>
 8003fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fde:	f000 f99b 	bl	8004318 <__retarget_lock_acquire_recursive>
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	0719      	lsls	r1, r3, #28
 8003fe6:	d513      	bpl.n	8004010 <_puts_r+0x50>
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	b18b      	cbz	r3, 8004010 <_puts_r+0x50>
 8003fec:	3e01      	subs	r6, #1
 8003fee:	68a3      	ldr	r3, [r4, #8]
 8003ff0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	60a3      	str	r3, [r4, #8]
 8003ff8:	b9e9      	cbnz	r1, 8004036 <_puts_r+0x76>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	da2e      	bge.n	800405c <_puts_r+0x9c>
 8003ffe:	4622      	mov	r2, r4
 8004000:	210a      	movs	r1, #10
 8004002:	4628      	mov	r0, r5
 8004004:	f000 f87b 	bl	80040fe <__swbuf_r>
 8004008:	3001      	adds	r0, #1
 800400a:	d007      	beq.n	800401c <_puts_r+0x5c>
 800400c:	250a      	movs	r5, #10
 800400e:	e007      	b.n	8004020 <_puts_r+0x60>
 8004010:	4621      	mov	r1, r4
 8004012:	4628      	mov	r0, r5
 8004014:	f000 f8b0 	bl	8004178 <__swsetup_r>
 8004018:	2800      	cmp	r0, #0
 800401a:	d0e7      	beq.n	8003fec <_puts_r+0x2c>
 800401c:	f04f 35ff 	mov.w	r5, #4294967295
 8004020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004022:	07da      	lsls	r2, r3, #31
 8004024:	d405      	bmi.n	8004032 <_puts_r+0x72>
 8004026:	89a3      	ldrh	r3, [r4, #12]
 8004028:	059b      	lsls	r3, r3, #22
 800402a:	d402      	bmi.n	8004032 <_puts_r+0x72>
 800402c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800402e:	f000 f974 	bl	800431a <__retarget_lock_release_recursive>
 8004032:	4628      	mov	r0, r5
 8004034:	bd70      	pop	{r4, r5, r6, pc}
 8004036:	2b00      	cmp	r3, #0
 8004038:	da04      	bge.n	8004044 <_puts_r+0x84>
 800403a:	69a2      	ldr	r2, [r4, #24]
 800403c:	429a      	cmp	r2, r3
 800403e:	dc06      	bgt.n	800404e <_puts_r+0x8e>
 8004040:	290a      	cmp	r1, #10
 8004042:	d004      	beq.n	800404e <_puts_r+0x8e>
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	6022      	str	r2, [r4, #0]
 800404a:	7019      	strb	r1, [r3, #0]
 800404c:	e7cf      	b.n	8003fee <_puts_r+0x2e>
 800404e:	4622      	mov	r2, r4
 8004050:	4628      	mov	r0, r5
 8004052:	f000 f854 	bl	80040fe <__swbuf_r>
 8004056:	3001      	adds	r0, #1
 8004058:	d1c9      	bne.n	8003fee <_puts_r+0x2e>
 800405a:	e7df      	b.n	800401c <_puts_r+0x5c>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	250a      	movs	r5, #10
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	6022      	str	r2, [r4, #0]
 8004064:	701d      	strb	r5, [r3, #0]
 8004066:	e7db      	b.n	8004020 <_puts_r+0x60>

08004068 <puts>:
 8004068:	4b02      	ldr	r3, [pc, #8]	; (8004074 <puts+0xc>)
 800406a:	4601      	mov	r1, r0
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	f7ff bfa7 	b.w	8003fc0 <_puts_r>
 8004072:	bf00      	nop
 8004074:	20000068 	.word	0x20000068

08004078 <__sread>:
 8004078:	b510      	push	{r4, lr}
 800407a:	460c      	mov	r4, r1
 800407c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004080:	f000 f8fc 	bl	800427c <_read_r>
 8004084:	2800      	cmp	r0, #0
 8004086:	bfab      	itete	ge
 8004088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800408a:	89a3      	ldrhlt	r3, [r4, #12]
 800408c:	181b      	addge	r3, r3, r0
 800408e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004092:	bfac      	ite	ge
 8004094:	6563      	strge	r3, [r4, #84]	; 0x54
 8004096:	81a3      	strhlt	r3, [r4, #12]
 8004098:	bd10      	pop	{r4, pc}

0800409a <__swrite>:
 800409a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409e:	461f      	mov	r7, r3
 80040a0:	898b      	ldrh	r3, [r1, #12]
 80040a2:	05db      	lsls	r3, r3, #23
 80040a4:	4605      	mov	r5, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	4616      	mov	r6, r2
 80040aa:	d505      	bpl.n	80040b8 <__swrite+0x1e>
 80040ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b0:	2302      	movs	r3, #2
 80040b2:	2200      	movs	r2, #0
 80040b4:	f000 f8d0 	bl	8004258 <_lseek_r>
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040c2:	81a3      	strh	r3, [r4, #12]
 80040c4:	4632      	mov	r2, r6
 80040c6:	463b      	mov	r3, r7
 80040c8:	4628      	mov	r0, r5
 80040ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ce:	f000 b8e7 	b.w	80042a0 <_write_r>

080040d2 <__sseek>:
 80040d2:	b510      	push	{r4, lr}
 80040d4:	460c      	mov	r4, r1
 80040d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040da:	f000 f8bd 	bl	8004258 <_lseek_r>
 80040de:	1c43      	adds	r3, r0, #1
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	bf15      	itete	ne
 80040e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80040e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040ee:	81a3      	strheq	r3, [r4, #12]
 80040f0:	bf18      	it	ne
 80040f2:	81a3      	strhne	r3, [r4, #12]
 80040f4:	bd10      	pop	{r4, pc}

080040f6 <__sclose>:
 80040f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040fa:	f000 b89d 	b.w	8004238 <_close_r>

080040fe <__swbuf_r>:
 80040fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004100:	460e      	mov	r6, r1
 8004102:	4614      	mov	r4, r2
 8004104:	4605      	mov	r5, r0
 8004106:	b118      	cbz	r0, 8004110 <__swbuf_r+0x12>
 8004108:	6a03      	ldr	r3, [r0, #32]
 800410a:	b90b      	cbnz	r3, 8004110 <__swbuf_r+0x12>
 800410c:	f7ff ff10 	bl	8003f30 <__sinit>
 8004110:	69a3      	ldr	r3, [r4, #24]
 8004112:	60a3      	str	r3, [r4, #8]
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	071a      	lsls	r2, r3, #28
 8004118:	d525      	bpl.n	8004166 <__swbuf_r+0x68>
 800411a:	6923      	ldr	r3, [r4, #16]
 800411c:	b31b      	cbz	r3, 8004166 <__swbuf_r+0x68>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	6922      	ldr	r2, [r4, #16]
 8004122:	1a98      	subs	r0, r3, r2
 8004124:	6963      	ldr	r3, [r4, #20]
 8004126:	b2f6      	uxtb	r6, r6
 8004128:	4283      	cmp	r3, r0
 800412a:	4637      	mov	r7, r6
 800412c:	dc04      	bgt.n	8004138 <__swbuf_r+0x3a>
 800412e:	4621      	mov	r1, r4
 8004130:	4628      	mov	r0, r5
 8004132:	f000 fd53 	bl	8004bdc <_fflush_r>
 8004136:	b9e0      	cbnz	r0, 8004172 <__swbuf_r+0x74>
 8004138:	68a3      	ldr	r3, [r4, #8]
 800413a:	3b01      	subs	r3, #1
 800413c:	60a3      	str	r3, [r4, #8]
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	6022      	str	r2, [r4, #0]
 8004144:	701e      	strb	r6, [r3, #0]
 8004146:	6962      	ldr	r2, [r4, #20]
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	429a      	cmp	r2, r3
 800414c:	d004      	beq.n	8004158 <__swbuf_r+0x5a>
 800414e:	89a3      	ldrh	r3, [r4, #12]
 8004150:	07db      	lsls	r3, r3, #31
 8004152:	d506      	bpl.n	8004162 <__swbuf_r+0x64>
 8004154:	2e0a      	cmp	r6, #10
 8004156:	d104      	bne.n	8004162 <__swbuf_r+0x64>
 8004158:	4621      	mov	r1, r4
 800415a:	4628      	mov	r0, r5
 800415c:	f000 fd3e 	bl	8004bdc <_fflush_r>
 8004160:	b938      	cbnz	r0, 8004172 <__swbuf_r+0x74>
 8004162:	4638      	mov	r0, r7
 8004164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004166:	4621      	mov	r1, r4
 8004168:	4628      	mov	r0, r5
 800416a:	f000 f805 	bl	8004178 <__swsetup_r>
 800416e:	2800      	cmp	r0, #0
 8004170:	d0d5      	beq.n	800411e <__swbuf_r+0x20>
 8004172:	f04f 37ff 	mov.w	r7, #4294967295
 8004176:	e7f4      	b.n	8004162 <__swbuf_r+0x64>

08004178 <__swsetup_r>:
 8004178:	b538      	push	{r3, r4, r5, lr}
 800417a:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <__swsetup_r+0xac>)
 800417c:	4605      	mov	r5, r0
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	460c      	mov	r4, r1
 8004182:	b118      	cbz	r0, 800418c <__swsetup_r+0x14>
 8004184:	6a03      	ldr	r3, [r0, #32]
 8004186:	b90b      	cbnz	r3, 800418c <__swsetup_r+0x14>
 8004188:	f7ff fed2 	bl	8003f30 <__sinit>
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004192:	0718      	lsls	r0, r3, #28
 8004194:	d422      	bmi.n	80041dc <__swsetup_r+0x64>
 8004196:	06d9      	lsls	r1, r3, #27
 8004198:	d407      	bmi.n	80041aa <__swsetup_r+0x32>
 800419a:	2309      	movs	r3, #9
 800419c:	602b      	str	r3, [r5, #0]
 800419e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	e034      	b.n	8004214 <__swsetup_r+0x9c>
 80041aa:	0758      	lsls	r0, r3, #29
 80041ac:	d512      	bpl.n	80041d4 <__swsetup_r+0x5c>
 80041ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041b0:	b141      	cbz	r1, 80041c4 <__swsetup_r+0x4c>
 80041b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041b6:	4299      	cmp	r1, r3
 80041b8:	d002      	beq.n	80041c0 <__swsetup_r+0x48>
 80041ba:	4628      	mov	r0, r5
 80041bc:	f000 f8bc 	bl	8004338 <_free_r>
 80041c0:	2300      	movs	r3, #0
 80041c2:	6363      	str	r3, [r4, #52]	; 0x34
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041ca:	81a3      	strh	r3, [r4, #12]
 80041cc:	2300      	movs	r3, #0
 80041ce:	6063      	str	r3, [r4, #4]
 80041d0:	6923      	ldr	r3, [r4, #16]
 80041d2:	6023      	str	r3, [r4, #0]
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	f043 0308 	orr.w	r3, r3, #8
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	6923      	ldr	r3, [r4, #16]
 80041de:	b94b      	cbnz	r3, 80041f4 <__swsetup_r+0x7c>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ea:	d003      	beq.n	80041f4 <__swsetup_r+0x7c>
 80041ec:	4621      	mov	r1, r4
 80041ee:	4628      	mov	r0, r5
 80041f0:	f000 fd42 	bl	8004c78 <__smakebuf_r>
 80041f4:	89a0      	ldrh	r0, [r4, #12]
 80041f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041fa:	f010 0301 	ands.w	r3, r0, #1
 80041fe:	d00a      	beq.n	8004216 <__swsetup_r+0x9e>
 8004200:	2300      	movs	r3, #0
 8004202:	60a3      	str	r3, [r4, #8]
 8004204:	6963      	ldr	r3, [r4, #20]
 8004206:	425b      	negs	r3, r3
 8004208:	61a3      	str	r3, [r4, #24]
 800420a:	6923      	ldr	r3, [r4, #16]
 800420c:	b943      	cbnz	r3, 8004220 <__swsetup_r+0xa8>
 800420e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004212:	d1c4      	bne.n	800419e <__swsetup_r+0x26>
 8004214:	bd38      	pop	{r3, r4, r5, pc}
 8004216:	0781      	lsls	r1, r0, #30
 8004218:	bf58      	it	pl
 800421a:	6963      	ldrpl	r3, [r4, #20]
 800421c:	60a3      	str	r3, [r4, #8]
 800421e:	e7f4      	b.n	800420a <__swsetup_r+0x92>
 8004220:	2000      	movs	r0, #0
 8004222:	e7f7      	b.n	8004214 <__swsetup_r+0x9c>
 8004224:	20000068 	.word	0x20000068

08004228 <memset>:
 8004228:	4402      	add	r2, r0
 800422a:	4603      	mov	r3, r0
 800422c:	4293      	cmp	r3, r2
 800422e:	d100      	bne.n	8004232 <memset+0xa>
 8004230:	4770      	bx	lr
 8004232:	f803 1b01 	strb.w	r1, [r3], #1
 8004236:	e7f9      	b.n	800422c <memset+0x4>

08004238 <_close_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	4d06      	ldr	r5, [pc, #24]	; (8004254 <_close_r+0x1c>)
 800423c:	2300      	movs	r3, #0
 800423e:	4604      	mov	r4, r0
 8004240:	4608      	mov	r0, r1
 8004242:	602b      	str	r3, [r5, #0]
 8004244:	f7fc fc76 	bl	8000b34 <_close>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_close_r+0x1a>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_close_r+0x1a>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	20004194 	.word	0x20004194

08004258 <_lseek_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4d07      	ldr	r5, [pc, #28]	; (8004278 <_lseek_r+0x20>)
 800425c:	4604      	mov	r4, r0
 800425e:	4608      	mov	r0, r1
 8004260:	4611      	mov	r1, r2
 8004262:	2200      	movs	r2, #0
 8004264:	602a      	str	r2, [r5, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	f7fc fc8b 	bl	8000b82 <_lseek>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d102      	bne.n	8004276 <_lseek_r+0x1e>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	b103      	cbz	r3, 8004276 <_lseek_r+0x1e>
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	bd38      	pop	{r3, r4, r5, pc}
 8004278:	20004194 	.word	0x20004194

0800427c <_read_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4d07      	ldr	r5, [pc, #28]	; (800429c <_read_r+0x20>)
 8004280:	4604      	mov	r4, r0
 8004282:	4608      	mov	r0, r1
 8004284:	4611      	mov	r1, r2
 8004286:	2200      	movs	r2, #0
 8004288:	602a      	str	r2, [r5, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	f7fc fc35 	bl	8000afa <_read>
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	d102      	bne.n	800429a <_read_r+0x1e>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	b103      	cbz	r3, 800429a <_read_r+0x1e>
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	20004194 	.word	0x20004194

080042a0 <_write_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	4d07      	ldr	r5, [pc, #28]	; (80042c0 <_write_r+0x20>)
 80042a4:	4604      	mov	r4, r0
 80042a6:	4608      	mov	r0, r1
 80042a8:	4611      	mov	r1, r2
 80042aa:	2200      	movs	r2, #0
 80042ac:	602a      	str	r2, [r5, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f7fc f9a5 	bl	80005fe <_write>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d102      	bne.n	80042be <_write_r+0x1e>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	b103      	cbz	r3, 80042be <_write_r+0x1e>
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	20004194 	.word	0x20004194

080042c4 <__errno>:
 80042c4:	4b01      	ldr	r3, [pc, #4]	; (80042cc <__errno+0x8>)
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000068 	.word	0x20000068

080042d0 <__libc_init_array>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	4d0d      	ldr	r5, [pc, #52]	; (8004308 <__libc_init_array+0x38>)
 80042d4:	4c0d      	ldr	r4, [pc, #52]	; (800430c <__libc_init_array+0x3c>)
 80042d6:	1b64      	subs	r4, r4, r5
 80042d8:	10a4      	asrs	r4, r4, #2
 80042da:	2600      	movs	r6, #0
 80042dc:	42a6      	cmp	r6, r4
 80042de:	d109      	bne.n	80042f4 <__libc_init_array+0x24>
 80042e0:	4d0b      	ldr	r5, [pc, #44]	; (8004310 <__libc_init_array+0x40>)
 80042e2:	4c0c      	ldr	r4, [pc, #48]	; (8004314 <__libc_init_array+0x44>)
 80042e4:	f000 fd36 	bl	8004d54 <_init>
 80042e8:	1b64      	subs	r4, r4, r5
 80042ea:	10a4      	asrs	r4, r4, #2
 80042ec:	2600      	movs	r6, #0
 80042ee:	42a6      	cmp	r6, r4
 80042f0:	d105      	bne.n	80042fe <__libc_init_array+0x2e>
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f8:	4798      	blx	r3
 80042fa:	3601      	adds	r6, #1
 80042fc:	e7ee      	b.n	80042dc <__libc_init_array+0xc>
 80042fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004302:	4798      	blx	r3
 8004304:	3601      	adds	r6, #1
 8004306:	e7f2      	b.n	80042ee <__libc_init_array+0x1e>
 8004308:	08004fb4 	.word	0x08004fb4
 800430c:	08004fb4 	.word	0x08004fb4
 8004310:	08004fb4 	.word	0x08004fb4
 8004314:	08004fb8 	.word	0x08004fb8

08004318 <__retarget_lock_acquire_recursive>:
 8004318:	4770      	bx	lr

0800431a <__retarget_lock_release_recursive>:
 800431a:	4770      	bx	lr

0800431c <memcpy>:
 800431c:	440a      	add	r2, r1
 800431e:	4291      	cmp	r1, r2
 8004320:	f100 33ff 	add.w	r3, r0, #4294967295
 8004324:	d100      	bne.n	8004328 <memcpy+0xc>
 8004326:	4770      	bx	lr
 8004328:	b510      	push	{r4, lr}
 800432a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800432e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004332:	4291      	cmp	r1, r2
 8004334:	d1f9      	bne.n	800432a <memcpy+0xe>
 8004336:	bd10      	pop	{r4, pc}

08004338 <_free_r>:
 8004338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800433a:	2900      	cmp	r1, #0
 800433c:	d044      	beq.n	80043c8 <_free_r+0x90>
 800433e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004342:	9001      	str	r0, [sp, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f1a1 0404 	sub.w	r4, r1, #4
 800434a:	bfb8      	it	lt
 800434c:	18e4      	addlt	r4, r4, r3
 800434e:	f000 f8df 	bl	8004510 <__malloc_lock>
 8004352:	4a1e      	ldr	r2, [pc, #120]	; (80043cc <_free_r+0x94>)
 8004354:	9801      	ldr	r0, [sp, #4]
 8004356:	6813      	ldr	r3, [r2, #0]
 8004358:	b933      	cbnz	r3, 8004368 <_free_r+0x30>
 800435a:	6063      	str	r3, [r4, #4]
 800435c:	6014      	str	r4, [r2, #0]
 800435e:	b003      	add	sp, #12
 8004360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004364:	f000 b8da 	b.w	800451c <__malloc_unlock>
 8004368:	42a3      	cmp	r3, r4
 800436a:	d908      	bls.n	800437e <_free_r+0x46>
 800436c:	6825      	ldr	r5, [r4, #0]
 800436e:	1961      	adds	r1, r4, r5
 8004370:	428b      	cmp	r3, r1
 8004372:	bf01      	itttt	eq
 8004374:	6819      	ldreq	r1, [r3, #0]
 8004376:	685b      	ldreq	r3, [r3, #4]
 8004378:	1949      	addeq	r1, r1, r5
 800437a:	6021      	streq	r1, [r4, #0]
 800437c:	e7ed      	b.n	800435a <_free_r+0x22>
 800437e:	461a      	mov	r2, r3
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	b10b      	cbz	r3, 8004388 <_free_r+0x50>
 8004384:	42a3      	cmp	r3, r4
 8004386:	d9fa      	bls.n	800437e <_free_r+0x46>
 8004388:	6811      	ldr	r1, [r2, #0]
 800438a:	1855      	adds	r5, r2, r1
 800438c:	42a5      	cmp	r5, r4
 800438e:	d10b      	bne.n	80043a8 <_free_r+0x70>
 8004390:	6824      	ldr	r4, [r4, #0]
 8004392:	4421      	add	r1, r4
 8004394:	1854      	adds	r4, r2, r1
 8004396:	42a3      	cmp	r3, r4
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	d1e0      	bne.n	800435e <_free_r+0x26>
 800439c:	681c      	ldr	r4, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	6053      	str	r3, [r2, #4]
 80043a2:	440c      	add	r4, r1
 80043a4:	6014      	str	r4, [r2, #0]
 80043a6:	e7da      	b.n	800435e <_free_r+0x26>
 80043a8:	d902      	bls.n	80043b0 <_free_r+0x78>
 80043aa:	230c      	movs	r3, #12
 80043ac:	6003      	str	r3, [r0, #0]
 80043ae:	e7d6      	b.n	800435e <_free_r+0x26>
 80043b0:	6825      	ldr	r5, [r4, #0]
 80043b2:	1961      	adds	r1, r4, r5
 80043b4:	428b      	cmp	r3, r1
 80043b6:	bf04      	itt	eq
 80043b8:	6819      	ldreq	r1, [r3, #0]
 80043ba:	685b      	ldreq	r3, [r3, #4]
 80043bc:	6063      	str	r3, [r4, #4]
 80043be:	bf04      	itt	eq
 80043c0:	1949      	addeq	r1, r1, r5
 80043c2:	6021      	streq	r1, [r4, #0]
 80043c4:	6054      	str	r4, [r2, #4]
 80043c6:	e7ca      	b.n	800435e <_free_r+0x26>
 80043c8:	b003      	add	sp, #12
 80043ca:	bd30      	pop	{r4, r5, pc}
 80043cc:	2000419c 	.word	0x2000419c

080043d0 <sbrk_aligned>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	4e0e      	ldr	r6, [pc, #56]	; (800440c <sbrk_aligned+0x3c>)
 80043d4:	460c      	mov	r4, r1
 80043d6:	6831      	ldr	r1, [r6, #0]
 80043d8:	4605      	mov	r5, r0
 80043da:	b911      	cbnz	r1, 80043e2 <sbrk_aligned+0x12>
 80043dc:	f000 fcaa 	bl	8004d34 <_sbrk_r>
 80043e0:	6030      	str	r0, [r6, #0]
 80043e2:	4621      	mov	r1, r4
 80043e4:	4628      	mov	r0, r5
 80043e6:	f000 fca5 	bl	8004d34 <_sbrk_r>
 80043ea:	1c43      	adds	r3, r0, #1
 80043ec:	d00a      	beq.n	8004404 <sbrk_aligned+0x34>
 80043ee:	1cc4      	adds	r4, r0, #3
 80043f0:	f024 0403 	bic.w	r4, r4, #3
 80043f4:	42a0      	cmp	r0, r4
 80043f6:	d007      	beq.n	8004408 <sbrk_aligned+0x38>
 80043f8:	1a21      	subs	r1, r4, r0
 80043fa:	4628      	mov	r0, r5
 80043fc:	f000 fc9a 	bl	8004d34 <_sbrk_r>
 8004400:	3001      	adds	r0, #1
 8004402:	d101      	bne.n	8004408 <sbrk_aligned+0x38>
 8004404:	f04f 34ff 	mov.w	r4, #4294967295
 8004408:	4620      	mov	r0, r4
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	200041a0 	.word	0x200041a0

08004410 <_malloc_r>:
 8004410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004414:	1ccd      	adds	r5, r1, #3
 8004416:	f025 0503 	bic.w	r5, r5, #3
 800441a:	3508      	adds	r5, #8
 800441c:	2d0c      	cmp	r5, #12
 800441e:	bf38      	it	cc
 8004420:	250c      	movcc	r5, #12
 8004422:	2d00      	cmp	r5, #0
 8004424:	4607      	mov	r7, r0
 8004426:	db01      	blt.n	800442c <_malloc_r+0x1c>
 8004428:	42a9      	cmp	r1, r5
 800442a:	d905      	bls.n	8004438 <_malloc_r+0x28>
 800442c:	230c      	movs	r3, #12
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	2600      	movs	r6, #0
 8004432:	4630      	mov	r0, r6
 8004434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004438:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800450c <_malloc_r+0xfc>
 800443c:	f000 f868 	bl	8004510 <__malloc_lock>
 8004440:	f8d8 3000 	ldr.w	r3, [r8]
 8004444:	461c      	mov	r4, r3
 8004446:	bb5c      	cbnz	r4, 80044a0 <_malloc_r+0x90>
 8004448:	4629      	mov	r1, r5
 800444a:	4638      	mov	r0, r7
 800444c:	f7ff ffc0 	bl	80043d0 <sbrk_aligned>
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	4604      	mov	r4, r0
 8004454:	d155      	bne.n	8004502 <_malloc_r+0xf2>
 8004456:	f8d8 4000 	ldr.w	r4, [r8]
 800445a:	4626      	mov	r6, r4
 800445c:	2e00      	cmp	r6, #0
 800445e:	d145      	bne.n	80044ec <_malloc_r+0xdc>
 8004460:	2c00      	cmp	r4, #0
 8004462:	d048      	beq.n	80044f6 <_malloc_r+0xe6>
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	4631      	mov	r1, r6
 8004468:	4638      	mov	r0, r7
 800446a:	eb04 0903 	add.w	r9, r4, r3
 800446e:	f000 fc61 	bl	8004d34 <_sbrk_r>
 8004472:	4581      	cmp	r9, r0
 8004474:	d13f      	bne.n	80044f6 <_malloc_r+0xe6>
 8004476:	6821      	ldr	r1, [r4, #0]
 8004478:	1a6d      	subs	r5, r5, r1
 800447a:	4629      	mov	r1, r5
 800447c:	4638      	mov	r0, r7
 800447e:	f7ff ffa7 	bl	80043d0 <sbrk_aligned>
 8004482:	3001      	adds	r0, #1
 8004484:	d037      	beq.n	80044f6 <_malloc_r+0xe6>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	442b      	add	r3, r5
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	f8d8 3000 	ldr.w	r3, [r8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d038      	beq.n	8004506 <_malloc_r+0xf6>
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	42a2      	cmp	r2, r4
 8004498:	d12b      	bne.n	80044f2 <_malloc_r+0xe2>
 800449a:	2200      	movs	r2, #0
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	e00f      	b.n	80044c0 <_malloc_r+0xb0>
 80044a0:	6822      	ldr	r2, [r4, #0]
 80044a2:	1b52      	subs	r2, r2, r5
 80044a4:	d41f      	bmi.n	80044e6 <_malloc_r+0xd6>
 80044a6:	2a0b      	cmp	r2, #11
 80044a8:	d917      	bls.n	80044da <_malloc_r+0xca>
 80044aa:	1961      	adds	r1, r4, r5
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	6025      	str	r5, [r4, #0]
 80044b0:	bf18      	it	ne
 80044b2:	6059      	strne	r1, [r3, #4]
 80044b4:	6863      	ldr	r3, [r4, #4]
 80044b6:	bf08      	it	eq
 80044b8:	f8c8 1000 	streq.w	r1, [r8]
 80044bc:	5162      	str	r2, [r4, r5]
 80044be:	604b      	str	r3, [r1, #4]
 80044c0:	4638      	mov	r0, r7
 80044c2:	f104 060b 	add.w	r6, r4, #11
 80044c6:	f000 f829 	bl	800451c <__malloc_unlock>
 80044ca:	f026 0607 	bic.w	r6, r6, #7
 80044ce:	1d23      	adds	r3, r4, #4
 80044d0:	1af2      	subs	r2, r6, r3
 80044d2:	d0ae      	beq.n	8004432 <_malloc_r+0x22>
 80044d4:	1b9b      	subs	r3, r3, r6
 80044d6:	50a3      	str	r3, [r4, r2]
 80044d8:	e7ab      	b.n	8004432 <_malloc_r+0x22>
 80044da:	42a3      	cmp	r3, r4
 80044dc:	6862      	ldr	r2, [r4, #4]
 80044de:	d1dd      	bne.n	800449c <_malloc_r+0x8c>
 80044e0:	f8c8 2000 	str.w	r2, [r8]
 80044e4:	e7ec      	b.n	80044c0 <_malloc_r+0xb0>
 80044e6:	4623      	mov	r3, r4
 80044e8:	6864      	ldr	r4, [r4, #4]
 80044ea:	e7ac      	b.n	8004446 <_malloc_r+0x36>
 80044ec:	4634      	mov	r4, r6
 80044ee:	6876      	ldr	r6, [r6, #4]
 80044f0:	e7b4      	b.n	800445c <_malloc_r+0x4c>
 80044f2:	4613      	mov	r3, r2
 80044f4:	e7cc      	b.n	8004490 <_malloc_r+0x80>
 80044f6:	230c      	movs	r3, #12
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	4638      	mov	r0, r7
 80044fc:	f000 f80e 	bl	800451c <__malloc_unlock>
 8004500:	e797      	b.n	8004432 <_malloc_r+0x22>
 8004502:	6025      	str	r5, [r4, #0]
 8004504:	e7dc      	b.n	80044c0 <_malloc_r+0xb0>
 8004506:	605b      	str	r3, [r3, #4]
 8004508:	deff      	udf	#255	; 0xff
 800450a:	bf00      	nop
 800450c:	2000419c 	.word	0x2000419c

08004510 <__malloc_lock>:
 8004510:	4801      	ldr	r0, [pc, #4]	; (8004518 <__malloc_lock+0x8>)
 8004512:	f7ff bf01 	b.w	8004318 <__retarget_lock_acquire_recursive>
 8004516:	bf00      	nop
 8004518:	20004198 	.word	0x20004198

0800451c <__malloc_unlock>:
 800451c:	4801      	ldr	r0, [pc, #4]	; (8004524 <__malloc_unlock+0x8>)
 800451e:	f7ff befc 	b.w	800431a <__retarget_lock_release_recursive>
 8004522:	bf00      	nop
 8004524:	20004198 	.word	0x20004198

08004528 <__sfputc_r>:
 8004528:	6893      	ldr	r3, [r2, #8]
 800452a:	3b01      	subs	r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	b410      	push	{r4}
 8004530:	6093      	str	r3, [r2, #8]
 8004532:	da08      	bge.n	8004546 <__sfputc_r+0x1e>
 8004534:	6994      	ldr	r4, [r2, #24]
 8004536:	42a3      	cmp	r3, r4
 8004538:	db01      	blt.n	800453e <__sfputc_r+0x16>
 800453a:	290a      	cmp	r1, #10
 800453c:	d103      	bne.n	8004546 <__sfputc_r+0x1e>
 800453e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004542:	f7ff bddc 	b.w	80040fe <__swbuf_r>
 8004546:	6813      	ldr	r3, [r2, #0]
 8004548:	1c58      	adds	r0, r3, #1
 800454a:	6010      	str	r0, [r2, #0]
 800454c:	7019      	strb	r1, [r3, #0]
 800454e:	4608      	mov	r0, r1
 8004550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004554:	4770      	bx	lr

08004556 <__sfputs_r>:
 8004556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004558:	4606      	mov	r6, r0
 800455a:	460f      	mov	r7, r1
 800455c:	4614      	mov	r4, r2
 800455e:	18d5      	adds	r5, r2, r3
 8004560:	42ac      	cmp	r4, r5
 8004562:	d101      	bne.n	8004568 <__sfputs_r+0x12>
 8004564:	2000      	movs	r0, #0
 8004566:	e007      	b.n	8004578 <__sfputs_r+0x22>
 8004568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456c:	463a      	mov	r2, r7
 800456e:	4630      	mov	r0, r6
 8004570:	f7ff ffda 	bl	8004528 <__sfputc_r>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d1f3      	bne.n	8004560 <__sfputs_r+0xa>
 8004578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800457c <_vfiprintf_r>:
 800457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004580:	460d      	mov	r5, r1
 8004582:	b09d      	sub	sp, #116	; 0x74
 8004584:	4614      	mov	r4, r2
 8004586:	4698      	mov	r8, r3
 8004588:	4606      	mov	r6, r0
 800458a:	b118      	cbz	r0, 8004594 <_vfiprintf_r+0x18>
 800458c:	6a03      	ldr	r3, [r0, #32]
 800458e:	b90b      	cbnz	r3, 8004594 <_vfiprintf_r+0x18>
 8004590:	f7ff fcce 	bl	8003f30 <__sinit>
 8004594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004596:	07d9      	lsls	r1, r3, #31
 8004598:	d405      	bmi.n	80045a6 <_vfiprintf_r+0x2a>
 800459a:	89ab      	ldrh	r3, [r5, #12]
 800459c:	059a      	lsls	r2, r3, #22
 800459e:	d402      	bmi.n	80045a6 <_vfiprintf_r+0x2a>
 80045a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045a2:	f7ff feb9 	bl	8004318 <__retarget_lock_acquire_recursive>
 80045a6:	89ab      	ldrh	r3, [r5, #12]
 80045a8:	071b      	lsls	r3, r3, #28
 80045aa:	d501      	bpl.n	80045b0 <_vfiprintf_r+0x34>
 80045ac:	692b      	ldr	r3, [r5, #16]
 80045ae:	b99b      	cbnz	r3, 80045d8 <_vfiprintf_r+0x5c>
 80045b0:	4629      	mov	r1, r5
 80045b2:	4630      	mov	r0, r6
 80045b4:	f7ff fde0 	bl	8004178 <__swsetup_r>
 80045b8:	b170      	cbz	r0, 80045d8 <_vfiprintf_r+0x5c>
 80045ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045bc:	07dc      	lsls	r4, r3, #31
 80045be:	d504      	bpl.n	80045ca <_vfiprintf_r+0x4e>
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	b01d      	add	sp, #116	; 0x74
 80045c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ca:	89ab      	ldrh	r3, [r5, #12]
 80045cc:	0598      	lsls	r0, r3, #22
 80045ce:	d4f7      	bmi.n	80045c0 <_vfiprintf_r+0x44>
 80045d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045d2:	f7ff fea2 	bl	800431a <__retarget_lock_release_recursive>
 80045d6:	e7f3      	b.n	80045c0 <_vfiprintf_r+0x44>
 80045d8:	2300      	movs	r3, #0
 80045da:	9309      	str	r3, [sp, #36]	; 0x24
 80045dc:	2320      	movs	r3, #32
 80045de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80045e6:	2330      	movs	r3, #48	; 0x30
 80045e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800479c <_vfiprintf_r+0x220>
 80045ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045f0:	f04f 0901 	mov.w	r9, #1
 80045f4:	4623      	mov	r3, r4
 80045f6:	469a      	mov	sl, r3
 80045f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045fc:	b10a      	cbz	r2, 8004602 <_vfiprintf_r+0x86>
 80045fe:	2a25      	cmp	r2, #37	; 0x25
 8004600:	d1f9      	bne.n	80045f6 <_vfiprintf_r+0x7a>
 8004602:	ebba 0b04 	subs.w	fp, sl, r4
 8004606:	d00b      	beq.n	8004620 <_vfiprintf_r+0xa4>
 8004608:	465b      	mov	r3, fp
 800460a:	4622      	mov	r2, r4
 800460c:	4629      	mov	r1, r5
 800460e:	4630      	mov	r0, r6
 8004610:	f7ff ffa1 	bl	8004556 <__sfputs_r>
 8004614:	3001      	adds	r0, #1
 8004616:	f000 80a9 	beq.w	800476c <_vfiprintf_r+0x1f0>
 800461a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800461c:	445a      	add	r2, fp
 800461e:	9209      	str	r2, [sp, #36]	; 0x24
 8004620:	f89a 3000 	ldrb.w	r3, [sl]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80a1 	beq.w	800476c <_vfiprintf_r+0x1f0>
 800462a:	2300      	movs	r3, #0
 800462c:	f04f 32ff 	mov.w	r2, #4294967295
 8004630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004634:	f10a 0a01 	add.w	sl, sl, #1
 8004638:	9304      	str	r3, [sp, #16]
 800463a:	9307      	str	r3, [sp, #28]
 800463c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004640:	931a      	str	r3, [sp, #104]	; 0x68
 8004642:	4654      	mov	r4, sl
 8004644:	2205      	movs	r2, #5
 8004646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800464a:	4854      	ldr	r0, [pc, #336]	; (800479c <_vfiprintf_r+0x220>)
 800464c:	f7fb fdc8 	bl	80001e0 <memchr>
 8004650:	9a04      	ldr	r2, [sp, #16]
 8004652:	b9d8      	cbnz	r0, 800468c <_vfiprintf_r+0x110>
 8004654:	06d1      	lsls	r1, r2, #27
 8004656:	bf44      	itt	mi
 8004658:	2320      	movmi	r3, #32
 800465a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800465e:	0713      	lsls	r3, r2, #28
 8004660:	bf44      	itt	mi
 8004662:	232b      	movmi	r3, #43	; 0x2b
 8004664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004668:	f89a 3000 	ldrb.w	r3, [sl]
 800466c:	2b2a      	cmp	r3, #42	; 0x2a
 800466e:	d015      	beq.n	800469c <_vfiprintf_r+0x120>
 8004670:	9a07      	ldr	r2, [sp, #28]
 8004672:	4654      	mov	r4, sl
 8004674:	2000      	movs	r0, #0
 8004676:	f04f 0c0a 	mov.w	ip, #10
 800467a:	4621      	mov	r1, r4
 800467c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004680:	3b30      	subs	r3, #48	; 0x30
 8004682:	2b09      	cmp	r3, #9
 8004684:	d94d      	bls.n	8004722 <_vfiprintf_r+0x1a6>
 8004686:	b1b0      	cbz	r0, 80046b6 <_vfiprintf_r+0x13a>
 8004688:	9207      	str	r2, [sp, #28]
 800468a:	e014      	b.n	80046b6 <_vfiprintf_r+0x13a>
 800468c:	eba0 0308 	sub.w	r3, r0, r8
 8004690:	fa09 f303 	lsl.w	r3, r9, r3
 8004694:	4313      	orrs	r3, r2
 8004696:	9304      	str	r3, [sp, #16]
 8004698:	46a2      	mov	sl, r4
 800469a:	e7d2      	b.n	8004642 <_vfiprintf_r+0xc6>
 800469c:	9b03      	ldr	r3, [sp, #12]
 800469e:	1d19      	adds	r1, r3, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	9103      	str	r1, [sp, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bfbb      	ittet	lt
 80046a8:	425b      	neglt	r3, r3
 80046aa:	f042 0202 	orrlt.w	r2, r2, #2
 80046ae:	9307      	strge	r3, [sp, #28]
 80046b0:	9307      	strlt	r3, [sp, #28]
 80046b2:	bfb8      	it	lt
 80046b4:	9204      	strlt	r2, [sp, #16]
 80046b6:	7823      	ldrb	r3, [r4, #0]
 80046b8:	2b2e      	cmp	r3, #46	; 0x2e
 80046ba:	d10c      	bne.n	80046d6 <_vfiprintf_r+0x15a>
 80046bc:	7863      	ldrb	r3, [r4, #1]
 80046be:	2b2a      	cmp	r3, #42	; 0x2a
 80046c0:	d134      	bne.n	800472c <_vfiprintf_r+0x1b0>
 80046c2:	9b03      	ldr	r3, [sp, #12]
 80046c4:	1d1a      	adds	r2, r3, #4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	9203      	str	r2, [sp, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bfb8      	it	lt
 80046ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80046d2:	3402      	adds	r4, #2
 80046d4:	9305      	str	r3, [sp, #20]
 80046d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80047ac <_vfiprintf_r+0x230>
 80046da:	7821      	ldrb	r1, [r4, #0]
 80046dc:	2203      	movs	r2, #3
 80046de:	4650      	mov	r0, sl
 80046e0:	f7fb fd7e 	bl	80001e0 <memchr>
 80046e4:	b138      	cbz	r0, 80046f6 <_vfiprintf_r+0x17a>
 80046e6:	9b04      	ldr	r3, [sp, #16]
 80046e8:	eba0 000a 	sub.w	r0, r0, sl
 80046ec:	2240      	movs	r2, #64	; 0x40
 80046ee:	4082      	lsls	r2, r0
 80046f0:	4313      	orrs	r3, r2
 80046f2:	3401      	adds	r4, #1
 80046f4:	9304      	str	r3, [sp, #16]
 80046f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046fa:	4829      	ldr	r0, [pc, #164]	; (80047a0 <_vfiprintf_r+0x224>)
 80046fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004700:	2206      	movs	r2, #6
 8004702:	f7fb fd6d 	bl	80001e0 <memchr>
 8004706:	2800      	cmp	r0, #0
 8004708:	d03f      	beq.n	800478a <_vfiprintf_r+0x20e>
 800470a:	4b26      	ldr	r3, [pc, #152]	; (80047a4 <_vfiprintf_r+0x228>)
 800470c:	bb1b      	cbnz	r3, 8004756 <_vfiprintf_r+0x1da>
 800470e:	9b03      	ldr	r3, [sp, #12]
 8004710:	3307      	adds	r3, #7
 8004712:	f023 0307 	bic.w	r3, r3, #7
 8004716:	3308      	adds	r3, #8
 8004718:	9303      	str	r3, [sp, #12]
 800471a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800471c:	443b      	add	r3, r7
 800471e:	9309      	str	r3, [sp, #36]	; 0x24
 8004720:	e768      	b.n	80045f4 <_vfiprintf_r+0x78>
 8004722:	fb0c 3202 	mla	r2, ip, r2, r3
 8004726:	460c      	mov	r4, r1
 8004728:	2001      	movs	r0, #1
 800472a:	e7a6      	b.n	800467a <_vfiprintf_r+0xfe>
 800472c:	2300      	movs	r3, #0
 800472e:	3401      	adds	r4, #1
 8004730:	9305      	str	r3, [sp, #20]
 8004732:	4619      	mov	r1, r3
 8004734:	f04f 0c0a 	mov.w	ip, #10
 8004738:	4620      	mov	r0, r4
 800473a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800473e:	3a30      	subs	r2, #48	; 0x30
 8004740:	2a09      	cmp	r2, #9
 8004742:	d903      	bls.n	800474c <_vfiprintf_r+0x1d0>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0c6      	beq.n	80046d6 <_vfiprintf_r+0x15a>
 8004748:	9105      	str	r1, [sp, #20]
 800474a:	e7c4      	b.n	80046d6 <_vfiprintf_r+0x15a>
 800474c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004750:	4604      	mov	r4, r0
 8004752:	2301      	movs	r3, #1
 8004754:	e7f0      	b.n	8004738 <_vfiprintf_r+0x1bc>
 8004756:	ab03      	add	r3, sp, #12
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	462a      	mov	r2, r5
 800475c:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <_vfiprintf_r+0x22c>)
 800475e:	a904      	add	r1, sp, #16
 8004760:	4630      	mov	r0, r6
 8004762:	f3af 8000 	nop.w
 8004766:	4607      	mov	r7, r0
 8004768:	1c78      	adds	r0, r7, #1
 800476a:	d1d6      	bne.n	800471a <_vfiprintf_r+0x19e>
 800476c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800476e:	07d9      	lsls	r1, r3, #31
 8004770:	d405      	bmi.n	800477e <_vfiprintf_r+0x202>
 8004772:	89ab      	ldrh	r3, [r5, #12]
 8004774:	059a      	lsls	r2, r3, #22
 8004776:	d402      	bmi.n	800477e <_vfiprintf_r+0x202>
 8004778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800477a:	f7ff fdce 	bl	800431a <__retarget_lock_release_recursive>
 800477e:	89ab      	ldrh	r3, [r5, #12]
 8004780:	065b      	lsls	r3, r3, #25
 8004782:	f53f af1d 	bmi.w	80045c0 <_vfiprintf_r+0x44>
 8004786:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004788:	e71c      	b.n	80045c4 <_vfiprintf_r+0x48>
 800478a:	ab03      	add	r3, sp, #12
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	462a      	mov	r2, r5
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <_vfiprintf_r+0x22c>)
 8004792:	a904      	add	r1, sp, #16
 8004794:	4630      	mov	r0, r6
 8004796:	f000 f879 	bl	800488c <_printf_i>
 800479a:	e7e4      	b.n	8004766 <_vfiprintf_r+0x1ea>
 800479c:	08004f78 	.word	0x08004f78
 80047a0:	08004f82 	.word	0x08004f82
 80047a4:	00000000 	.word	0x00000000
 80047a8:	08004557 	.word	0x08004557
 80047ac:	08004f7e 	.word	0x08004f7e

080047b0 <_printf_common>:
 80047b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b4:	4616      	mov	r6, r2
 80047b6:	4699      	mov	r9, r3
 80047b8:	688a      	ldr	r2, [r1, #8]
 80047ba:	690b      	ldr	r3, [r1, #16]
 80047bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047c0:	4293      	cmp	r3, r2
 80047c2:	bfb8      	it	lt
 80047c4:	4613      	movlt	r3, r2
 80047c6:	6033      	str	r3, [r6, #0]
 80047c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047cc:	4607      	mov	r7, r0
 80047ce:	460c      	mov	r4, r1
 80047d0:	b10a      	cbz	r2, 80047d6 <_printf_common+0x26>
 80047d2:	3301      	adds	r3, #1
 80047d4:	6033      	str	r3, [r6, #0]
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	0699      	lsls	r1, r3, #26
 80047da:	bf42      	ittt	mi
 80047dc:	6833      	ldrmi	r3, [r6, #0]
 80047de:	3302      	addmi	r3, #2
 80047e0:	6033      	strmi	r3, [r6, #0]
 80047e2:	6825      	ldr	r5, [r4, #0]
 80047e4:	f015 0506 	ands.w	r5, r5, #6
 80047e8:	d106      	bne.n	80047f8 <_printf_common+0x48>
 80047ea:	f104 0a19 	add.w	sl, r4, #25
 80047ee:	68e3      	ldr	r3, [r4, #12]
 80047f0:	6832      	ldr	r2, [r6, #0]
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	42ab      	cmp	r3, r5
 80047f6:	dc26      	bgt.n	8004846 <_printf_common+0x96>
 80047f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047fc:	1e13      	subs	r3, r2, #0
 80047fe:	6822      	ldr	r2, [r4, #0]
 8004800:	bf18      	it	ne
 8004802:	2301      	movne	r3, #1
 8004804:	0692      	lsls	r2, r2, #26
 8004806:	d42b      	bmi.n	8004860 <_printf_common+0xb0>
 8004808:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800480c:	4649      	mov	r1, r9
 800480e:	4638      	mov	r0, r7
 8004810:	47c0      	blx	r8
 8004812:	3001      	adds	r0, #1
 8004814:	d01e      	beq.n	8004854 <_printf_common+0xa4>
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	6922      	ldr	r2, [r4, #16]
 800481a:	f003 0306 	and.w	r3, r3, #6
 800481e:	2b04      	cmp	r3, #4
 8004820:	bf02      	ittt	eq
 8004822:	68e5      	ldreq	r5, [r4, #12]
 8004824:	6833      	ldreq	r3, [r6, #0]
 8004826:	1aed      	subeq	r5, r5, r3
 8004828:	68a3      	ldr	r3, [r4, #8]
 800482a:	bf0c      	ite	eq
 800482c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004830:	2500      	movne	r5, #0
 8004832:	4293      	cmp	r3, r2
 8004834:	bfc4      	itt	gt
 8004836:	1a9b      	subgt	r3, r3, r2
 8004838:	18ed      	addgt	r5, r5, r3
 800483a:	2600      	movs	r6, #0
 800483c:	341a      	adds	r4, #26
 800483e:	42b5      	cmp	r5, r6
 8004840:	d11a      	bne.n	8004878 <_printf_common+0xc8>
 8004842:	2000      	movs	r0, #0
 8004844:	e008      	b.n	8004858 <_printf_common+0xa8>
 8004846:	2301      	movs	r3, #1
 8004848:	4652      	mov	r2, sl
 800484a:	4649      	mov	r1, r9
 800484c:	4638      	mov	r0, r7
 800484e:	47c0      	blx	r8
 8004850:	3001      	adds	r0, #1
 8004852:	d103      	bne.n	800485c <_printf_common+0xac>
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485c:	3501      	adds	r5, #1
 800485e:	e7c6      	b.n	80047ee <_printf_common+0x3e>
 8004860:	18e1      	adds	r1, r4, r3
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	2030      	movs	r0, #48	; 0x30
 8004866:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800486a:	4422      	add	r2, r4
 800486c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004870:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004874:	3302      	adds	r3, #2
 8004876:	e7c7      	b.n	8004808 <_printf_common+0x58>
 8004878:	2301      	movs	r3, #1
 800487a:	4622      	mov	r2, r4
 800487c:	4649      	mov	r1, r9
 800487e:	4638      	mov	r0, r7
 8004880:	47c0      	blx	r8
 8004882:	3001      	adds	r0, #1
 8004884:	d0e6      	beq.n	8004854 <_printf_common+0xa4>
 8004886:	3601      	adds	r6, #1
 8004888:	e7d9      	b.n	800483e <_printf_common+0x8e>
	...

0800488c <_printf_i>:
 800488c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004890:	7e0f      	ldrb	r7, [r1, #24]
 8004892:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004894:	2f78      	cmp	r7, #120	; 0x78
 8004896:	4691      	mov	r9, r2
 8004898:	4680      	mov	r8, r0
 800489a:	460c      	mov	r4, r1
 800489c:	469a      	mov	sl, r3
 800489e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048a2:	d807      	bhi.n	80048b4 <_printf_i+0x28>
 80048a4:	2f62      	cmp	r7, #98	; 0x62
 80048a6:	d80a      	bhi.n	80048be <_printf_i+0x32>
 80048a8:	2f00      	cmp	r7, #0
 80048aa:	f000 80d4 	beq.w	8004a56 <_printf_i+0x1ca>
 80048ae:	2f58      	cmp	r7, #88	; 0x58
 80048b0:	f000 80c0 	beq.w	8004a34 <_printf_i+0x1a8>
 80048b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048bc:	e03a      	b.n	8004934 <_printf_i+0xa8>
 80048be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048c2:	2b15      	cmp	r3, #21
 80048c4:	d8f6      	bhi.n	80048b4 <_printf_i+0x28>
 80048c6:	a101      	add	r1, pc, #4	; (adr r1, 80048cc <_printf_i+0x40>)
 80048c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048cc:	08004925 	.word	0x08004925
 80048d0:	08004939 	.word	0x08004939
 80048d4:	080048b5 	.word	0x080048b5
 80048d8:	080048b5 	.word	0x080048b5
 80048dc:	080048b5 	.word	0x080048b5
 80048e0:	080048b5 	.word	0x080048b5
 80048e4:	08004939 	.word	0x08004939
 80048e8:	080048b5 	.word	0x080048b5
 80048ec:	080048b5 	.word	0x080048b5
 80048f0:	080048b5 	.word	0x080048b5
 80048f4:	080048b5 	.word	0x080048b5
 80048f8:	08004a3d 	.word	0x08004a3d
 80048fc:	08004965 	.word	0x08004965
 8004900:	080049f7 	.word	0x080049f7
 8004904:	080048b5 	.word	0x080048b5
 8004908:	080048b5 	.word	0x080048b5
 800490c:	08004a5f 	.word	0x08004a5f
 8004910:	080048b5 	.word	0x080048b5
 8004914:	08004965 	.word	0x08004965
 8004918:	080048b5 	.word	0x080048b5
 800491c:	080048b5 	.word	0x080048b5
 8004920:	080049ff 	.word	0x080049ff
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	1d1a      	adds	r2, r3, #4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	602a      	str	r2, [r5, #0]
 800492c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004934:	2301      	movs	r3, #1
 8004936:	e09f      	b.n	8004a78 <_printf_i+0x1ec>
 8004938:	6820      	ldr	r0, [r4, #0]
 800493a:	682b      	ldr	r3, [r5, #0]
 800493c:	0607      	lsls	r7, r0, #24
 800493e:	f103 0104 	add.w	r1, r3, #4
 8004942:	6029      	str	r1, [r5, #0]
 8004944:	d501      	bpl.n	800494a <_printf_i+0xbe>
 8004946:	681e      	ldr	r6, [r3, #0]
 8004948:	e003      	b.n	8004952 <_printf_i+0xc6>
 800494a:	0646      	lsls	r6, r0, #25
 800494c:	d5fb      	bpl.n	8004946 <_printf_i+0xba>
 800494e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004952:	2e00      	cmp	r6, #0
 8004954:	da03      	bge.n	800495e <_printf_i+0xd2>
 8004956:	232d      	movs	r3, #45	; 0x2d
 8004958:	4276      	negs	r6, r6
 800495a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495e:	485a      	ldr	r0, [pc, #360]	; (8004ac8 <_printf_i+0x23c>)
 8004960:	230a      	movs	r3, #10
 8004962:	e012      	b.n	800498a <_printf_i+0xfe>
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	6820      	ldr	r0, [r4, #0]
 8004968:	1d19      	adds	r1, r3, #4
 800496a:	6029      	str	r1, [r5, #0]
 800496c:	0605      	lsls	r5, r0, #24
 800496e:	d501      	bpl.n	8004974 <_printf_i+0xe8>
 8004970:	681e      	ldr	r6, [r3, #0]
 8004972:	e002      	b.n	800497a <_printf_i+0xee>
 8004974:	0641      	lsls	r1, r0, #25
 8004976:	d5fb      	bpl.n	8004970 <_printf_i+0xe4>
 8004978:	881e      	ldrh	r6, [r3, #0]
 800497a:	4853      	ldr	r0, [pc, #332]	; (8004ac8 <_printf_i+0x23c>)
 800497c:	2f6f      	cmp	r7, #111	; 0x6f
 800497e:	bf0c      	ite	eq
 8004980:	2308      	moveq	r3, #8
 8004982:	230a      	movne	r3, #10
 8004984:	2100      	movs	r1, #0
 8004986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800498a:	6865      	ldr	r5, [r4, #4]
 800498c:	60a5      	str	r5, [r4, #8]
 800498e:	2d00      	cmp	r5, #0
 8004990:	bfa2      	ittt	ge
 8004992:	6821      	ldrge	r1, [r4, #0]
 8004994:	f021 0104 	bicge.w	r1, r1, #4
 8004998:	6021      	strge	r1, [r4, #0]
 800499a:	b90e      	cbnz	r6, 80049a0 <_printf_i+0x114>
 800499c:	2d00      	cmp	r5, #0
 800499e:	d04b      	beq.n	8004a38 <_printf_i+0x1ac>
 80049a0:	4615      	mov	r5, r2
 80049a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80049a6:	fb03 6711 	mls	r7, r3, r1, r6
 80049aa:	5dc7      	ldrb	r7, [r0, r7]
 80049ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049b0:	4637      	mov	r7, r6
 80049b2:	42bb      	cmp	r3, r7
 80049b4:	460e      	mov	r6, r1
 80049b6:	d9f4      	bls.n	80049a2 <_printf_i+0x116>
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d10b      	bne.n	80049d4 <_printf_i+0x148>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	07de      	lsls	r6, r3, #31
 80049c0:	d508      	bpl.n	80049d4 <_printf_i+0x148>
 80049c2:	6923      	ldr	r3, [r4, #16]
 80049c4:	6861      	ldr	r1, [r4, #4]
 80049c6:	4299      	cmp	r1, r3
 80049c8:	bfde      	ittt	le
 80049ca:	2330      	movle	r3, #48	; 0x30
 80049cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049d4:	1b52      	subs	r2, r2, r5
 80049d6:	6122      	str	r2, [r4, #16]
 80049d8:	f8cd a000 	str.w	sl, [sp]
 80049dc:	464b      	mov	r3, r9
 80049de:	aa03      	add	r2, sp, #12
 80049e0:	4621      	mov	r1, r4
 80049e2:	4640      	mov	r0, r8
 80049e4:	f7ff fee4 	bl	80047b0 <_printf_common>
 80049e8:	3001      	adds	r0, #1
 80049ea:	d14a      	bne.n	8004a82 <_printf_i+0x1f6>
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	b004      	add	sp, #16
 80049f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	f043 0320 	orr.w	r3, r3, #32
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	4833      	ldr	r0, [pc, #204]	; (8004acc <_printf_i+0x240>)
 8004a00:	2778      	movs	r7, #120	; 0x78
 8004a02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	6829      	ldr	r1, [r5, #0]
 8004a0a:	061f      	lsls	r7, r3, #24
 8004a0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a10:	d402      	bmi.n	8004a18 <_printf_i+0x18c>
 8004a12:	065f      	lsls	r7, r3, #25
 8004a14:	bf48      	it	mi
 8004a16:	b2b6      	uxthmi	r6, r6
 8004a18:	07df      	lsls	r7, r3, #31
 8004a1a:	bf48      	it	mi
 8004a1c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a20:	6029      	str	r1, [r5, #0]
 8004a22:	bf48      	it	mi
 8004a24:	6023      	strmi	r3, [r4, #0]
 8004a26:	b91e      	cbnz	r6, 8004a30 <_printf_i+0x1a4>
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	f023 0320 	bic.w	r3, r3, #32
 8004a2e:	6023      	str	r3, [r4, #0]
 8004a30:	2310      	movs	r3, #16
 8004a32:	e7a7      	b.n	8004984 <_printf_i+0xf8>
 8004a34:	4824      	ldr	r0, [pc, #144]	; (8004ac8 <_printf_i+0x23c>)
 8004a36:	e7e4      	b.n	8004a02 <_printf_i+0x176>
 8004a38:	4615      	mov	r5, r2
 8004a3a:	e7bd      	b.n	80049b8 <_printf_i+0x12c>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	6826      	ldr	r6, [r4, #0]
 8004a40:	6961      	ldr	r1, [r4, #20]
 8004a42:	1d18      	adds	r0, r3, #4
 8004a44:	6028      	str	r0, [r5, #0]
 8004a46:	0635      	lsls	r5, r6, #24
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0x1c4>
 8004a4c:	6019      	str	r1, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <_printf_i+0x1ca>
 8004a50:	0670      	lsls	r0, r6, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0x1c0>
 8004a54:	8019      	strh	r1, [r3, #0]
 8004a56:	2300      	movs	r3, #0
 8004a58:	6123      	str	r3, [r4, #16]
 8004a5a:	4615      	mov	r5, r2
 8004a5c:	e7bc      	b.n	80049d8 <_printf_i+0x14c>
 8004a5e:	682b      	ldr	r3, [r5, #0]
 8004a60:	1d1a      	adds	r2, r3, #4
 8004a62:	602a      	str	r2, [r5, #0]
 8004a64:	681d      	ldr	r5, [r3, #0]
 8004a66:	6862      	ldr	r2, [r4, #4]
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f7fb fbb8 	bl	80001e0 <memchr>
 8004a70:	b108      	cbz	r0, 8004a76 <_printf_i+0x1ea>
 8004a72:	1b40      	subs	r0, r0, r5
 8004a74:	6060      	str	r0, [r4, #4]
 8004a76:	6863      	ldr	r3, [r4, #4]
 8004a78:	6123      	str	r3, [r4, #16]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a80:	e7aa      	b.n	80049d8 <_printf_i+0x14c>
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	462a      	mov	r2, r5
 8004a86:	4649      	mov	r1, r9
 8004a88:	4640      	mov	r0, r8
 8004a8a:	47d0      	blx	sl
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d0ad      	beq.n	80049ec <_printf_i+0x160>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	079b      	lsls	r3, r3, #30
 8004a94:	d413      	bmi.n	8004abe <_printf_i+0x232>
 8004a96:	68e0      	ldr	r0, [r4, #12]
 8004a98:	9b03      	ldr	r3, [sp, #12]
 8004a9a:	4298      	cmp	r0, r3
 8004a9c:	bfb8      	it	lt
 8004a9e:	4618      	movlt	r0, r3
 8004aa0:	e7a6      	b.n	80049f0 <_printf_i+0x164>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4632      	mov	r2, r6
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	47d0      	blx	sl
 8004aac:	3001      	adds	r0, #1
 8004aae:	d09d      	beq.n	80049ec <_printf_i+0x160>
 8004ab0:	3501      	adds	r5, #1
 8004ab2:	68e3      	ldr	r3, [r4, #12]
 8004ab4:	9903      	ldr	r1, [sp, #12]
 8004ab6:	1a5b      	subs	r3, r3, r1
 8004ab8:	42ab      	cmp	r3, r5
 8004aba:	dcf2      	bgt.n	8004aa2 <_printf_i+0x216>
 8004abc:	e7eb      	b.n	8004a96 <_printf_i+0x20a>
 8004abe:	2500      	movs	r5, #0
 8004ac0:	f104 0619 	add.w	r6, r4, #25
 8004ac4:	e7f5      	b.n	8004ab2 <_printf_i+0x226>
 8004ac6:	bf00      	nop
 8004ac8:	08004f89 	.word	0x08004f89
 8004acc:	08004f9a 	.word	0x08004f9a

08004ad0 <__sflush_r>:
 8004ad0:	898a      	ldrh	r2, [r1, #12]
 8004ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	0710      	lsls	r0, r2, #28
 8004ada:	460c      	mov	r4, r1
 8004adc:	d458      	bmi.n	8004b90 <__sflush_r+0xc0>
 8004ade:	684b      	ldr	r3, [r1, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	dc05      	bgt.n	8004af0 <__sflush_r+0x20>
 8004ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	dc02      	bgt.n	8004af0 <__sflush_r+0x20>
 8004aea:	2000      	movs	r0, #0
 8004aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004af2:	2e00      	cmp	r6, #0
 8004af4:	d0f9      	beq.n	8004aea <__sflush_r+0x1a>
 8004af6:	2300      	movs	r3, #0
 8004af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004afc:	682f      	ldr	r7, [r5, #0]
 8004afe:	6a21      	ldr	r1, [r4, #32]
 8004b00:	602b      	str	r3, [r5, #0]
 8004b02:	d032      	beq.n	8004b6a <__sflush_r+0x9a>
 8004b04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	075a      	lsls	r2, r3, #29
 8004b0a:	d505      	bpl.n	8004b18 <__sflush_r+0x48>
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	1ac0      	subs	r0, r0, r3
 8004b10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b12:	b10b      	cbz	r3, 8004b18 <__sflush_r+0x48>
 8004b14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b16:	1ac0      	subs	r0, r0, r3
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b1e:	6a21      	ldr	r1, [r4, #32]
 8004b20:	4628      	mov	r0, r5
 8004b22:	47b0      	blx	r6
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	89a3      	ldrh	r3, [r4, #12]
 8004b28:	d106      	bne.n	8004b38 <__sflush_r+0x68>
 8004b2a:	6829      	ldr	r1, [r5, #0]
 8004b2c:	291d      	cmp	r1, #29
 8004b2e:	d82b      	bhi.n	8004b88 <__sflush_r+0xb8>
 8004b30:	4a29      	ldr	r2, [pc, #164]	; (8004bd8 <__sflush_r+0x108>)
 8004b32:	410a      	asrs	r2, r1
 8004b34:	07d6      	lsls	r6, r2, #31
 8004b36:	d427      	bmi.n	8004b88 <__sflush_r+0xb8>
 8004b38:	2200      	movs	r2, #0
 8004b3a:	6062      	str	r2, [r4, #4]
 8004b3c:	04d9      	lsls	r1, r3, #19
 8004b3e:	6922      	ldr	r2, [r4, #16]
 8004b40:	6022      	str	r2, [r4, #0]
 8004b42:	d504      	bpl.n	8004b4e <__sflush_r+0x7e>
 8004b44:	1c42      	adds	r2, r0, #1
 8004b46:	d101      	bne.n	8004b4c <__sflush_r+0x7c>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b903      	cbnz	r3, 8004b4e <__sflush_r+0x7e>
 8004b4c:	6560      	str	r0, [r4, #84]	; 0x54
 8004b4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b50:	602f      	str	r7, [r5, #0]
 8004b52:	2900      	cmp	r1, #0
 8004b54:	d0c9      	beq.n	8004aea <__sflush_r+0x1a>
 8004b56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b5a:	4299      	cmp	r1, r3
 8004b5c:	d002      	beq.n	8004b64 <__sflush_r+0x94>
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f7ff fbea 	bl	8004338 <_free_r>
 8004b64:	2000      	movs	r0, #0
 8004b66:	6360      	str	r0, [r4, #52]	; 0x34
 8004b68:	e7c0      	b.n	8004aec <__sflush_r+0x1c>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b0      	blx	r6
 8004b70:	1c41      	adds	r1, r0, #1
 8004b72:	d1c8      	bne.n	8004b06 <__sflush_r+0x36>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0c5      	beq.n	8004b06 <__sflush_r+0x36>
 8004b7a:	2b1d      	cmp	r3, #29
 8004b7c:	d001      	beq.n	8004b82 <__sflush_r+0xb2>
 8004b7e:	2b16      	cmp	r3, #22
 8004b80:	d101      	bne.n	8004b86 <__sflush_r+0xb6>
 8004b82:	602f      	str	r7, [r5, #0]
 8004b84:	e7b1      	b.n	8004aea <__sflush_r+0x1a>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	e7ad      	b.n	8004aec <__sflush_r+0x1c>
 8004b90:	690f      	ldr	r7, [r1, #16]
 8004b92:	2f00      	cmp	r7, #0
 8004b94:	d0a9      	beq.n	8004aea <__sflush_r+0x1a>
 8004b96:	0793      	lsls	r3, r2, #30
 8004b98:	680e      	ldr	r6, [r1, #0]
 8004b9a:	bf08      	it	eq
 8004b9c:	694b      	ldreq	r3, [r1, #20]
 8004b9e:	600f      	str	r7, [r1, #0]
 8004ba0:	bf18      	it	ne
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	eba6 0807 	sub.w	r8, r6, r7
 8004ba8:	608b      	str	r3, [r1, #8]
 8004baa:	f1b8 0f00 	cmp.w	r8, #0
 8004bae:	dd9c      	ble.n	8004aea <__sflush_r+0x1a>
 8004bb0:	6a21      	ldr	r1, [r4, #32]
 8004bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bb4:	4643      	mov	r3, r8
 8004bb6:	463a      	mov	r2, r7
 8004bb8:	4628      	mov	r0, r5
 8004bba:	47b0      	blx	r6
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	dc06      	bgt.n	8004bce <__sflush_r+0xfe>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc6:	81a3      	strh	r3, [r4, #12]
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	e78e      	b.n	8004aec <__sflush_r+0x1c>
 8004bce:	4407      	add	r7, r0
 8004bd0:	eba8 0800 	sub.w	r8, r8, r0
 8004bd4:	e7e9      	b.n	8004baa <__sflush_r+0xda>
 8004bd6:	bf00      	nop
 8004bd8:	dfbffffe 	.word	0xdfbffffe

08004bdc <_fflush_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	690b      	ldr	r3, [r1, #16]
 8004be0:	4605      	mov	r5, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	b913      	cbnz	r3, 8004bec <_fflush_r+0x10>
 8004be6:	2500      	movs	r5, #0
 8004be8:	4628      	mov	r0, r5
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	b118      	cbz	r0, 8004bf6 <_fflush_r+0x1a>
 8004bee:	6a03      	ldr	r3, [r0, #32]
 8004bf0:	b90b      	cbnz	r3, 8004bf6 <_fflush_r+0x1a>
 8004bf2:	f7ff f99d 	bl	8003f30 <__sinit>
 8004bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f3      	beq.n	8004be6 <_fflush_r+0xa>
 8004bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c00:	07d0      	lsls	r0, r2, #31
 8004c02:	d404      	bmi.n	8004c0e <_fflush_r+0x32>
 8004c04:	0599      	lsls	r1, r3, #22
 8004c06:	d402      	bmi.n	8004c0e <_fflush_r+0x32>
 8004c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c0a:	f7ff fb85 	bl	8004318 <__retarget_lock_acquire_recursive>
 8004c0e:	4628      	mov	r0, r5
 8004c10:	4621      	mov	r1, r4
 8004c12:	f7ff ff5d 	bl	8004ad0 <__sflush_r>
 8004c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c18:	07da      	lsls	r2, r3, #31
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	d4e4      	bmi.n	8004be8 <_fflush_r+0xc>
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	059b      	lsls	r3, r3, #22
 8004c22:	d4e1      	bmi.n	8004be8 <_fflush_r+0xc>
 8004c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c26:	f7ff fb78 	bl	800431a <__retarget_lock_release_recursive>
 8004c2a:	e7dd      	b.n	8004be8 <_fflush_r+0xc>

08004c2c <__swhatbuf_r>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	460c      	mov	r4, r1
 8004c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c34:	2900      	cmp	r1, #0
 8004c36:	b096      	sub	sp, #88	; 0x58
 8004c38:	4615      	mov	r5, r2
 8004c3a:	461e      	mov	r6, r3
 8004c3c:	da0d      	bge.n	8004c5a <__swhatbuf_r+0x2e>
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c44:	f04f 0100 	mov.w	r1, #0
 8004c48:	bf0c      	ite	eq
 8004c4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004c4e:	2340      	movne	r3, #64	; 0x40
 8004c50:	2000      	movs	r0, #0
 8004c52:	6031      	str	r1, [r6, #0]
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	b016      	add	sp, #88	; 0x58
 8004c58:	bd70      	pop	{r4, r5, r6, pc}
 8004c5a:	466a      	mov	r2, sp
 8004c5c:	f000 f848 	bl	8004cf0 <_fstat_r>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	dbec      	blt.n	8004c3e <__swhatbuf_r+0x12>
 8004c64:	9901      	ldr	r1, [sp, #4]
 8004c66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004c6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004c6e:	4259      	negs	r1, r3
 8004c70:	4159      	adcs	r1, r3
 8004c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c76:	e7eb      	b.n	8004c50 <__swhatbuf_r+0x24>

08004c78 <__smakebuf_r>:
 8004c78:	898b      	ldrh	r3, [r1, #12]
 8004c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c7c:	079d      	lsls	r5, r3, #30
 8004c7e:	4606      	mov	r6, r0
 8004c80:	460c      	mov	r4, r1
 8004c82:	d507      	bpl.n	8004c94 <__smakebuf_r+0x1c>
 8004c84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	6123      	str	r3, [r4, #16]
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	6163      	str	r3, [r4, #20]
 8004c90:	b002      	add	sp, #8
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
 8004c94:	ab01      	add	r3, sp, #4
 8004c96:	466a      	mov	r2, sp
 8004c98:	f7ff ffc8 	bl	8004c2c <__swhatbuf_r>
 8004c9c:	9900      	ldr	r1, [sp, #0]
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	f7ff fbb5 	bl	8004410 <_malloc_r>
 8004ca6:	b948      	cbnz	r0, 8004cbc <__smakebuf_r+0x44>
 8004ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cac:	059a      	lsls	r2, r3, #22
 8004cae:	d4ef      	bmi.n	8004c90 <__smakebuf_r+0x18>
 8004cb0:	f023 0303 	bic.w	r3, r3, #3
 8004cb4:	f043 0302 	orr.w	r3, r3, #2
 8004cb8:	81a3      	strh	r3, [r4, #12]
 8004cba:	e7e3      	b.n	8004c84 <__smakebuf_r+0xc>
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	6020      	str	r0, [r4, #0]
 8004cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc4:	81a3      	strh	r3, [r4, #12]
 8004cc6:	9b00      	ldr	r3, [sp, #0]
 8004cc8:	6163      	str	r3, [r4, #20]
 8004cca:	9b01      	ldr	r3, [sp, #4]
 8004ccc:	6120      	str	r0, [r4, #16]
 8004cce:	b15b      	cbz	r3, 8004ce8 <__smakebuf_r+0x70>
 8004cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f000 f81d 	bl	8004d14 <_isatty_r>
 8004cda:	b128      	cbz	r0, 8004ce8 <__smakebuf_r+0x70>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	81a3      	strh	r3, [r4, #12]
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	431d      	orrs	r5, r3
 8004cec:	81a5      	strh	r5, [r4, #12]
 8004cee:	e7cf      	b.n	8004c90 <__smakebuf_r+0x18>

08004cf0 <_fstat_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4d07      	ldr	r5, [pc, #28]	; (8004d10 <_fstat_r+0x20>)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	4608      	mov	r0, r1
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	602b      	str	r3, [r5, #0]
 8004cfe:	f7fb ff25 	bl	8000b4c <_fstat>
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	d102      	bne.n	8004d0c <_fstat_r+0x1c>
 8004d06:	682b      	ldr	r3, [r5, #0]
 8004d08:	b103      	cbz	r3, 8004d0c <_fstat_r+0x1c>
 8004d0a:	6023      	str	r3, [r4, #0]
 8004d0c:	bd38      	pop	{r3, r4, r5, pc}
 8004d0e:	bf00      	nop
 8004d10:	20004194 	.word	0x20004194

08004d14 <_isatty_r>:
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4d06      	ldr	r5, [pc, #24]	; (8004d30 <_isatty_r+0x1c>)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	602b      	str	r3, [r5, #0]
 8004d20:	f7fb ff24 	bl	8000b6c <_isatty>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d102      	bne.n	8004d2e <_isatty_r+0x1a>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	b103      	cbz	r3, 8004d2e <_isatty_r+0x1a>
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	20004194 	.word	0x20004194

08004d34 <_sbrk_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	4d06      	ldr	r5, [pc, #24]	; (8004d50 <_sbrk_r+0x1c>)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	602b      	str	r3, [r5, #0]
 8004d40:	f7fb ff2c 	bl	8000b9c <_sbrk>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_sbrk_r+0x1a>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_sbrk_r+0x1a>
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	20004194 	.word	0x20004194

08004d54 <_init>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	bf00      	nop
 8004d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5a:	bc08      	pop	{r3}
 8004d5c:	469e      	mov	lr, r3
 8004d5e:	4770      	bx	lr

08004d60 <_fini>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	bf00      	nop
 8004d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d66:	bc08      	pop	{r3}
 8004d68:	469e      	mov	lr, r3
 8004d6a:	4770      	bx	lr
