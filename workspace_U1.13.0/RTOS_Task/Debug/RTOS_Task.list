
RTOS_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005124  08005124  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08005124  08005124  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005124  08005124  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005128  08005128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800512c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001330  2000006c  08005198  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000139c  08005198  0002139c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000caeb  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002569  00000000  00000000  0002cbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  0002f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008eb  00000000  00000000  0002fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002798b  00000000  00000000  0003061b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb45  00000000  00000000  00057fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecad8  00000000  00000000  00064aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003664  00000000  00000000  001515c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00154c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ea0 	.word	0x08004ea0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004ea0 	.word	0x08004ea0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000088 	.word	0x20000088
 80002a0:	20000128 	.word	0x20000128

080002a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002b4:	f003 0301 	and.w	r3, r3, #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d013      	beq.n	80002e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d00b      	beq.n	80002e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002cc:	e000      	b.n	80002d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f9      	beq.n	80002ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002e4:	687b      	ldr	r3, [r7, #4]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <_write>:
#include "main.h"
#include "cmsis_os.h"
#include<stdio.h>

int _write(int file,char *ptr,int len)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b086      	sub	sp, #24
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	60f8      	str	r0, [r7, #12]
 80002fa:	60b9      	str	r1, [r7, #8]
 80002fc:	607a      	str	r2, [r7, #4]
    int i=0;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]
 8000306:	e009      	b.n	800031c <_write+0x2a>
    	ITM_SendChar((*ptr++));
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	60ba      	str	r2, [r7, #8]
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ffc7 	bl	80002a4 <ITM_SendChar>
    for(i=0;i<len;i++)
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	3301      	adds	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	697a      	ldr	r2, [r7, #20]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	429a      	cmp	r2, r3
 8000322:	dbf1      	blt.n	8000308 <_write+0x16>
    return len;
 8000324:	687b      	ldr	r3, [r7, #4]
}
 8000326:	4618      	mov	r0, r3
 8000328:	3718      	adds	r7, #24
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000330:	b5b0      	push	{r4, r5, r7, lr}
 8000332:	b0ac      	sub	sp, #176	; 0xb0
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000336:	f000 fafb 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033a:	f000 f8a9 	bl	8000490 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 800033e:	2300      	movs	r3, #0
 8000340:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000344:	2300      	movs	r3, #0
 8000346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800034a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800034e:	4618      	mov	r0, r3
 8000350:	f001 fafb 	bl	800194a <osMutexCreate>
 8000354:	4603      	mov	r3, r0
 8000356:	4a40      	ldr	r2, [pc, #256]	; (8000458 <main+0x128>)
 8000358:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800035a:	2300      	movs	r3, #0
 800035c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000360:	2300      	movs	r3, #0
 8000362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000366:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800036a:	2101      	movs	r1, #1
 800036c:	4618      	mov	r0, r3
 800036e:	f001 fb04 	bl	800197a <osSemaphoreCreate>
 8000372:	4603      	mov	r3, r0
 8000374:	4a39      	ldr	r2, [pc, #228]	; (800045c <main+0x12c>)
 8000376:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000378:	4b39      	ldr	r3, [pc, #228]	; (8000460 <main+0x130>)
 800037a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800037e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000384:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fb27 	bl	80019de <osMessageCreate>
 8000390:	4603      	mov	r3, r0
 8000392:	4a34      	ldr	r2, [pc, #208]	; (8000464 <main+0x134>)
 8000394:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, startTask01, osPriorityNormal, 0, 80);
 8000396:	4b34      	ldr	r3, [pc, #208]	; (8000468 <main+0x138>)
 8000398:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800039c:	461d      	mov	r5, r3
 800039e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 80003aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f001 fa6a 	bl	800188a <osThreadCreate>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4a2c      	ldr	r2, [pc, #176]	; (800046c <main+0x13c>)
 80003ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 80);
 80003bc:	4b2c      	ldr	r3, [pc, #176]	; (8000470 <main+0x140>)
 80003be:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80003c2:	461d      	mov	r5, r3
 80003c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80003d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 fa57 	bl	800188a <osThreadCreate>
 80003dc:	4603      	mov	r3, r0
 80003de:	4a25      	ldr	r2, [pc, #148]	; (8000474 <main+0x144>)
 80003e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 80);
 80003e2:	4b25      	ldr	r3, [pc, #148]	; (8000478 <main+0x148>)
 80003e4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80003e8:	461d      	mov	r5, r3
 80003ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80003f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f001 fa44 	bl	800188a <osThreadCreate>
 8000402:	4603      	mov	r3, r0
 8000404:	4a1d      	ldr	r2, [pc, #116]	; (800047c <main+0x14c>)
 8000406:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 80);
 8000408:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <main+0x150>)
 800040a:	f107 0420 	add.w	r4, r7, #32
 800040e:	461d      	mov	r5, r3
 8000410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800041c:	f107 0320 	add.w	r3, r7, #32
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f001 fa31 	bl	800188a <osThreadCreate>
 8000428:	4603      	mov	r3, r0
 800042a:	4a16      	ldr	r2, [pc, #88]	; (8000484 <main+0x154>)
 800042c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityNormal, 0, 80);
 800042e:	4b16      	ldr	r3, [pc, #88]	; (8000488 <main+0x158>)
 8000430:	1d3c      	adds	r4, r7, #4
 8000432:	461d      	mov	r5, r3
 8000434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800043c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f001 fa20 	bl	800188a <osThreadCreate>
 800044a:	4603      	mov	r3, r0
 800044c:	4a0f      	ldr	r2, [pc, #60]	; (800048c <main+0x15c>)
 800044e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000450:	f001 fa14 	bl	800187c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000454:	e7fe      	b.n	8000454 <main+0x124>
 8000456:	bf00      	nop
 8000458:	20000340 	.word	0x20000340
 800045c:	20000344 	.word	0x20000344
 8000460:	08004eb8 	.word	0x08004eb8
 8000464:	2000033c 	.word	0x2000033c
 8000468:	08004ed0 	.word	0x08004ed0
 800046c:	20000328 	.word	0x20000328
 8000470:	08004ef8 	.word	0x08004ef8
 8000474:	2000032c 	.word	0x2000032c
 8000478:	08004f20 	.word	0x08004f20
 800047c:	20000330 	.word	0x20000330
 8000480:	08004f48 	.word	0x08004f48
 8000484:	20000334 	.word	0x20000334
 8000488:	08004f70 	.word	0x08004f70
 800048c:	20000338 	.word	0x20000338

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b096      	sub	sp, #88	; 0x58
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	2244      	movs	r2, #68	; 0x44
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 ff12 	bl	80042c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	463b      	mov	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004b6:	f000 fbab 	bl	8000c10 <HAL_PWREx_ControlVoltageScaling>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004c0:	f000 f922 	bl	8000708 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c4:	2302      	movs	r3, #2
 80004c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ce:	2310      	movs	r3, #16
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d2:	2302      	movs	r3, #2
 80004d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d6:	2302      	movs	r3, #2
 80004d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004da:	2301      	movs	r3, #1
 80004dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80004de:	230a      	movs	r3, #10
 80004e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80004e2:	2307      	movs	r3, #7
 80004e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004e6:	2302      	movs	r3, #2
 80004e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ea:	2302      	movs	r3, #2
 80004ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fbe2 	bl	8000cbc <HAL_RCC_OscConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004fe:	f000 f903 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	230f      	movs	r3, #15
 8000504:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000506:	2303      	movs	r3, #3
 8000508:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	2104      	movs	r1, #4
 800051a:	4618      	mov	r0, r3
 800051c:	f000 ffaa 	bl	8001474 <HAL_RCC_ClockConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000526:	f000 f8ef 	bl	8000708 <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3758      	adds	r7, #88	; 0x58
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <startTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startTask01 */
void startTask01(void const * argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  printf("task01\n");
 800053c:	480d      	ldr	r0, [pc, #52]	; (8000574 <startTask01+0x40>)
 800053e:	f003 fde3 	bl	8004108 <puts>
	  xSemaphoreTake(myBinarySem01Handle,100);
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <startTask01+0x44>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2164      	movs	r1, #100	; 0x64
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fe89 	bl	8002260 <xQueueSemaphoreTake>
	  printf("task 01 take sem\n");
 800054e:	480b      	ldr	r0, [pc, #44]	; (800057c <startTask01+0x48>)
 8000550:	f003 fdda 	bl	8004108 <puts>

	  xSemaphoreGive(myBinarySem01Handle);
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <startTask01+0x44>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	f001 fca1 	bl	8001ea4 <xQueueGenericSend>
	  printf("task 01 give sem\n");
 8000562:	4807      	ldr	r0, [pc, #28]	; (8000580 <startTask01+0x4c>)
 8000564:	f003 fdd0 	bl	8004108 <puts>
	  osDelay(1000);
 8000568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056c:	f001 f9d9 	bl	8001922 <osDelay>
	  printf("task01\n");
 8000570:	e7e4      	b.n	800053c <startTask01+0x8>
 8000572:	bf00      	nop
 8000574:	08004f8c 	.word	0x08004f8c
 8000578:	20000344 	.word	0x20000344
 800057c:	08004f94 	.word	0x08004f94
 8000580:	08004fa8 	.word	0x08004fa8

08000584 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	char tx[]="send";
 800058c:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <StartTask02+0x6c>)
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000596:	6018      	str	r0, [r3, #0]
 8000598:	3304      	adds	r3, #4
 800059a:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  printf("task02\n");
 800059c:	4815      	ldr	r0, [pc, #84]	; (80005f4 <StartTask02+0x70>)
 800059e:	f003 fdb3 	bl	8004108 <puts>
	  xSemaphoreTake(myMutex01Handle,100);
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <StartTask02+0x74>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2164      	movs	r1, #100	; 0x64
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fe59 	bl	8002260 <xQueueSemaphoreTake>
	  printf("task 02 take mutex\n");
 80005ae:	4813      	ldr	r0, [pc, #76]	; (80005fc <StartTask02+0x78>)
 80005b0:	f003 fdaa 	bl	8004108 <puts>

	  if(xQueueSend(myQueue01Handle,tx,100)==pdTRUE)
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <StartTask02+0x7c>)
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	f107 0108 	add.w	r1, r7, #8
 80005bc:	2300      	movs	r3, #0
 80005be:	2264      	movs	r2, #100	; 0x64
 80005c0:	f001 fc70 	bl	8001ea4 <xQueueGenericSend>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d102      	bne.n	80005d0 <StartTask02+0x4c>
	  {
		  printf("queue send from task2\n");
 80005ca:	480e      	ldr	r0, [pc, #56]	; (8000604 <StartTask02+0x80>)
 80005cc:	f003 fd9c 	bl	8004108 <puts>
	  }

	  xSemaphoreGive(myMutex01Handle);
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <StartTask02+0x74>)
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	f001 fc63 	bl	8001ea4 <xQueueGenericSend>
	  printf("task 02 give mutex\n");
 80005de:	480a      	ldr	r0, [pc, #40]	; (8000608 <StartTask02+0x84>)
 80005e0:	f003 fd92 	bl	8004108 <puts>

	  osDelay(1000);
 80005e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e8:	f001 f99b 	bl	8001922 <osDelay>
	  printf("task02\n");
 80005ec:	e7d6      	b.n	800059c <StartTask02+0x18>
 80005ee:	bf00      	nop
 80005f0:	08005004 	.word	0x08005004
 80005f4:	08004fbc 	.word	0x08004fbc
 80005f8:	20000340 	.word	0x20000340
 80005fc:	08004fc4 	.word	0x08004fc4
 8000600:	2000033c 	.word	0x2000033c
 8000604:	08004fd8 	.word	0x08004fd8
 8000608:	08004ff0 	.word	0x08004ff0

0800060c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  printf("task03\n");
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <StartTask03+0x40>)
 8000616:	f003 fd77 	bl	8004108 <puts>
	  xSemaphoreTake(myBinarySem01Handle,100);
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <StartTask03+0x44>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2164      	movs	r1, #100	; 0x64
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fe1d 	bl	8002260 <xQueueSemaphoreTake>
	  printf("task03 take sem \n");
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <StartTask03+0x48>)
 8000628:	f003 fd6e 	bl	8004108 <puts>

	  xSemaphoreGive(myBinarySem01Handle);
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <StartTask03+0x44>)
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	f001 fc35 	bl	8001ea4 <xQueueGenericSend>
	  printf("task03 give sem \n");
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <StartTask03+0x4c>)
 800063c:	f003 fd64 	bl	8004108 <puts>
	  osDelay(1000);
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f001 f96d 	bl	8001922 <osDelay>
	  printf("task03\n");
 8000648:	e7e4      	b.n	8000614 <StartTask03+0x8>
 800064a:	bf00      	nop
 800064c:	0800500c 	.word	0x0800500c
 8000650:	20000344 	.word	0x20000344
 8000654:	08005014 	.word	0x08005014
 8000658:	08005028 	.word	0x08005028

0800065c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
	char rx[20];
  for(;;)
  {
	  printf("task04\n");
 8000664:	480f      	ldr	r0, [pc, #60]	; (80006a4 <StartTask04+0x48>)
 8000666:	f003 fd4f 	bl	8004108 <puts>
	  if(xQueueReceive(myQueue01Handle, rx,100)==pdTRUE)
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <StartTask04+0x4c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f107 010c 	add.w	r1, r7, #12
 8000672:	2264      	movs	r2, #100	; 0x64
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fd13 	bl	80020a0 <xQueueReceive>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d106      	bne.n	800068e <StartTask04+0x32>
	  {
		  printf("task 04 rx from queue %s\n",rx);
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4619      	mov	r1, r3
 8000686:	4809      	ldr	r0, [pc, #36]	; (80006ac <StartTask04+0x50>)
 8000688:	f003 fcd8 	bl	800403c <iprintf>
 800068c:	e002      	b.n	8000694 <StartTask04+0x38>
	  }
	  else
	  {
		  printf("not receive\n");
 800068e:	4808      	ldr	r0, [pc, #32]	; (80006b0 <StartTask04+0x54>)
 8000690:	f003 fd3a 	bl	8004108 <puts>
	  }
	  printf("task 04 end\n");
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <StartTask04+0x58>)
 8000696:	f003 fd37 	bl	8004108 <puts>
    osDelay(1000);
 800069a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069e:	f001 f940 	bl	8001922 <osDelay>
	  printf("task04\n");
 80006a2:	e7df      	b.n	8000664 <StartTask04+0x8>
 80006a4:	0800503c 	.word	0x0800503c
 80006a8:	2000033c 	.word	0x2000033c
 80006ac:	08005044 	.word	0x08005044
 80006b0:	08005060 	.word	0x08005060
 80006b4:	0800506c 	.word	0x0800506c

080006b8 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  printf("task05\n");
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <StartTask05+0x40>)
 80006c2:	f003 fd21 	bl	8004108 <puts>
	  xSemaphoreTake(myMutex01Handle,100);
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <StartTask05+0x44>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2164      	movs	r1, #100	; 0x64
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fdc7 	bl	8002260 <xQueueSemaphoreTake>
	  printf("task 05 take mutex\n");
 80006d2:	480b      	ldr	r0, [pc, #44]	; (8000700 <StartTask05+0x48>)
 80006d4:	f003 fd18 	bl	8004108 <puts>

	  xSemaphoreGive(myMutex01Handle);
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <StartTask05+0x44>)
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	2300      	movs	r3, #0
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	f001 fbdf 	bl	8001ea4 <xQueueGenericSend>
	  printf("task 05 give mutex\n");
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <StartTask05+0x4c>)
 80006e8:	f003 fd0e 	bl	8004108 <puts>
	  osDelay(500);
 80006ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f0:	f001 f917 	bl	8001922 <osDelay>
	  printf("task05\n");
 80006f4:	e7e4      	b.n	80006c0 <StartTask05+0x8>
 80006f6:	bf00      	nop
 80006f8:	08005078 	.word	0x08005078
 80006fc:	20000340 	.word	0x20000340
 8000700:	08005080 	.word	0x08005080
 8000704:	08005094 	.word	0x08005094

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_MspInit+0x4c>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071e:	4a10      	ldr	r2, [pc, #64]	; (8000760 <HAL_MspInit+0x4c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6613      	str	r3, [r2, #96]	; 0x60
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <HAL_MspInit+0x4c>)
 8000728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <HAL_MspInit+0x4c>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <HAL_MspInit+0x4c>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	6593      	str	r3, [r2, #88]	; 0x58
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_MspInit+0x4c>)
 8000740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	210f      	movs	r1, #15
 800074e:	f06f 0001 	mvn.w	r0, #1
 8000752:	f000 fa26 	bl	8000ba2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f928 	bl	80009e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000798:	f002 fd86 	bl	80032a8 <xTaskGetSchedulerState>
 800079c:	4603      	mov	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d001      	beq.n	80007a6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007a2:	f003 f961 	bl	8003a68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	e00a      	b.n	80007d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007bc:	f3af 8000 	nop.w
 80007c0:	4601      	mov	r1, r0
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	60ba      	str	r2, [r7, #8]
 80007c8:	b2ca      	uxtb	r2, r1
 80007ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	3301      	adds	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	dbf0      	blt.n	80007bc <_read+0x12>
  }

  return len;
 80007da:	687b      	ldr	r3, [r7, #4]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080c:	605a      	str	r2, [r3, #4]
  return 0;
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <_isatty>:

int _isatty(int file)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000824:	2301      	movs	r3, #1
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000832:	b480      	push	{r7}
 8000834:	b085      	sub	sp, #20
 8000836:	af00      	add	r7, sp, #0
 8000838:	60f8      	str	r0, [r7, #12]
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <_sbrk+0x5c>)
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <_sbrk+0x60>)
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_sbrk+0x64>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <_sbrk+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d207      	bcs.n	800088c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800087c:	f003 fdc8 	bl	8004410 <__errno>
 8000880:	4603      	mov	r3, r0
 8000882:	220c      	movs	r2, #12
 8000884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	e009      	b.n	80008a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <_sbrk+0x64>)
 800089c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20018000 	.word	0x20018000
 80008ac:	00000400 	.word	0x00000400
 80008b0:	20000348 	.word	0x20000348
 80008b4:	200013a0 	.word	0x200013a0

080008b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e0:	f7ff ffea 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f003 fd87 	bl	800441c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090e:	f7ff fd0f 	bl	8000330 <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000914:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000920:	0800512c 	.word	0x0800512c
  ldr r2, =_sbss
 8000924:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000928:	2000139c 	.word	0x2000139c

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_Init+0x3c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <HAL_Init+0x3c>)
 8000940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000944:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000946:	2003      	movs	r0, #3
 8000948:	f000 f920 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800094c:	200f      	movs	r0, #15
 800094e:	f000 f80f 	bl	8000970 <HAL_InitTick>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	e001      	b.n	8000962 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800095e:	f7ff fed9 	bl	8000714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000962:	79fb      	ldrb	r3, [r7, #7]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_InitTick+0x6c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d023      	beq.n	80009cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_InitTick+0x70>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_InitTick+0x6c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f91d 	bl	8000bda <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10f      	bne.n	80009c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d809      	bhi.n	80009c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 f8f5 	bl	8000ba2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_InitTick+0x74>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	e007      	b.n	80009d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e004      	b.n	80009d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e001      	b.n	80009d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	2000034c 	.word	0x2000034c

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	2000034c 	.word	0x2000034c

08000a28 <__NVIC_SetPriorityGrouping>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_SetPriority>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	; 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <SysTick_Config>:
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f7ff ff8e 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff47 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff5c 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff8e 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff5d 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffb0 	bl	8000b48 <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40007000 	.word	0x40007000

08000c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c1e:	d130      	bne.n	8000c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c2c:	d038      	beq.n	8000ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2232      	movs	r2, #50	; 0x32
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4e:	0c9b      	lsrs	r3, r3, #18
 8000c50:	3301      	adds	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c54:	e002      	b.n	8000c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c68:	d102      	bne.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1f2      	bne.n	8000c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c7c:	d110      	bne.n	8000ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e00f      	b.n	8000ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c8e:	d007      	beq.n	8000ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c98:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40007000 	.word	0x40007000
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	431bde83 	.word	0x431bde83

08000cbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e3ca      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cce:	4b97      	ldr	r3, [pc, #604]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cd8:	4b94      	ldr	r3, [pc, #592]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 80e4 	beq.w	8000eb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d007      	beq.n	8000d06 <HAL_RCC_OscConfig+0x4a>
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	2b0c      	cmp	r3, #12
 8000cfa:	f040 808b 	bne.w	8000e14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	f040 8087 	bne.w	8000e14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d06:	4b89      	ldr	r3, [pc, #548]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d005      	beq.n	8000d1e <HAL_RCC_OscConfig+0x62>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e3a2      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a1a      	ldr	r2, [r3, #32]
 8000d22:	4b82      	ldr	r3, [pc, #520]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d004      	beq.n	8000d38 <HAL_RCC_OscConfig+0x7c>
 8000d2e:	4b7f      	ldr	r3, [pc, #508]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d36:	e005      	b.n	8000d44 <HAL_RCC_OscConfig+0x88>
 8000d38:	4b7c      	ldr	r3, [pc, #496]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d3e:	091b      	lsrs	r3, r3, #4
 8000d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d223      	bcs.n	8000d90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 fd1d 	bl	800178c <RCC_SetFlashLatencyFromMSIRange>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e383      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d5c:	4b73      	ldr	r3, [pc, #460]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a72      	ldr	r2, [pc, #456]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b70      	ldr	r3, [pc, #448]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
 8000d74:	496d      	ldr	r1, [pc, #436]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d7a:	4b6c      	ldr	r3, [pc, #432]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	4968      	ldr	r1, [pc, #416]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	604b      	str	r3, [r1, #4]
 8000d8e:	e025      	b.n	8000ddc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d90:	4b66      	ldr	r3, [pc, #408]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a65      	ldr	r2, [pc, #404]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b63      	ldr	r3, [pc, #396]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	4960      	ldr	r1, [pc, #384]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dae:	4b5f      	ldr	r3, [pc, #380]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	495b      	ldr	r1, [pc, #364]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d109      	bne.n	8000ddc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fcdd 	bl	800178c <RCC_SetFlashLatencyFromMSIRange>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e343      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ddc:	f000 fc4a 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8000de0:	4602      	mov	r2, r0
 8000de2:	4b52      	ldr	r3, [pc, #328]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	f003 030f 	and.w	r3, r3, #15
 8000dec:	4950      	ldr	r1, [pc, #320]	; (8000f30 <HAL_RCC_OscConfig+0x274>)
 8000dee:	5ccb      	ldrb	r3, [r1, r3]
 8000df0:	f003 031f 	and.w	r3, r3, #31
 8000df4:	fa22 f303 	lsr.w	r3, r2, r3
 8000df8:	4a4e      	ldr	r2, [pc, #312]	; (8000f34 <HAL_RCC_OscConfig+0x278>)
 8000dfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dfc:	4b4e      	ldr	r3, [pc, #312]	; (8000f38 <HAL_RCC_OscConfig+0x27c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fdb5 	bl	8000970 <HAL_InitTick>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d052      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	e327      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d032      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e1c:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a42      	ldr	r2, [pc, #264]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fdf2 	bl	8000a10 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e30:	f7ff fdee 	bl	8000a10 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e310      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e42:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f0      	beq.n	8000e30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e4e:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a36      	ldr	r2, [pc, #216]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	4b34      	ldr	r3, [pc, #208]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	4931      	ldr	r1, [pc, #196]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69db      	ldr	r3, [r3, #28]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	492c      	ldr	r1, [pc, #176]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	604b      	str	r3, [r1, #4]
 8000e80:	e01a      	b.n	8000eb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e82:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a29      	ldr	r2, [pc, #164]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fdbf 	bl	8000a10 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e96:	f7ff fdbb 	bl	8000a10 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e2dd      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f0      	bne.n	8000e96 <HAL_RCC_OscConfig+0x1da>
 8000eb4:	e000      	b.n	8000eb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d074      	beq.n	8000fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	2b08      	cmp	r3, #8
 8000ec8:	d005      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x21a>
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2b0c      	cmp	r3, #12
 8000ece:	d10e      	bne.n	8000eee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d10b      	bne.n	8000eee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d064      	beq.n	8000fac <HAL_RCC_OscConfig+0x2f0>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d160      	bne.n	8000fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e2ba      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef6:	d106      	bne.n	8000f06 <HAL_RCC_OscConfig+0x24a>
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	e026      	b.n	8000f54 <HAL_RCC_OscConfig+0x298>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f0e:	d115      	bne.n	8000f3c <HAL_RCC_OscConfig+0x280>
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000f16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a02      	ldr	r2, [pc, #8]	; (8000f2c <HAL_RCC_OscConfig+0x270>)
 8000f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	e014      	b.n	8000f54 <HAL_RCC_OscConfig+0x298>
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	080050b0 	.word	0x080050b0
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000004 	.word	0x20000004
 8000f3c:	4ba0      	ldr	r3, [pc, #640]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a9f      	ldr	r2, [pc, #636]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b9d      	ldr	r3, [pc, #628]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a9c      	ldr	r2, [pc, #624]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d013      	beq.n	8000f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fd58 	bl	8000a10 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f64:	f7ff fd54 	bl	8000a10 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b64      	cmp	r3, #100	; 0x64
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e276      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f76:	4b92      	ldr	r3, [pc, #584]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <HAL_RCC_OscConfig+0x2a8>
 8000f82:	e014      	b.n	8000fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f84:	f7ff fd44 	bl	8000a10 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fd40 	bl	8000a10 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b64      	cmp	r3, #100	; 0x64
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e262      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f9e:	4b88      	ldr	r3, [pc, #544]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f0      	bne.n	8000f8c <HAL_RCC_OscConfig+0x2d0>
 8000faa:	e000      	b.n	8000fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d060      	beq.n	800107c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d005      	beq.n	8000fcc <HAL_RCC_OscConfig+0x310>
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2b0c      	cmp	r3, #12
 8000fc4:	d119      	bne.n	8000ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d116      	bne.n	8000ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fcc:	4b7c      	ldr	r3, [pc, #496]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x328>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e23f      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe4:	4b76      	ldr	r3, [pc, #472]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	061b      	lsls	r3, r3, #24
 8000ff2:	4973      	ldr	r1, [pc, #460]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff8:	e040      	b.n	800107c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d023      	beq.n	800104a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001002:	4b6f      	ldr	r3, [pc, #444]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a6e      	ldr	r2, [pc, #440]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100e:	f7ff fcff 	bl	8000a10 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001016:	f7ff fcfb 	bl	8000a10 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e21d      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001028:	4b65      	ldr	r3, [pc, #404]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001034:	4b62      	ldr	r3, [pc, #392]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	061b      	lsls	r3, r3, #24
 8001042:	495f      	ldr	r1, [pc, #380]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
 8001048:	e018      	b.n	800107c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104a:	4b5d      	ldr	r3, [pc, #372]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a5c      	ldr	r2, [pc, #368]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001056:	f7ff fcdb 	bl	8000a10 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105e:	f7ff fcd7 	bl	8000a10 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e1f9      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001070:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f0      	bne.n	800105e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	2b00      	cmp	r3, #0
 8001086:	d03c      	beq.n	8001102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d01c      	beq.n	80010ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001090:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001096:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a0:	f7ff fcb6 	bl	8000a10 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a8:	f7ff fcb2 	bl	8000a10 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e1d4      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 80010bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0ef      	beq.n	80010a8 <HAL_RCC_OscConfig+0x3ec>
 80010c8:	e01b      	b.n	8001102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 80010cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d0:	4a3b      	ldr	r2, [pc, #236]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010da:	f7ff fc99 	bl	8000a10 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e2:	f7ff fc95 	bl	8000a10 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e1b7      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010f4:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 80010f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1ef      	bne.n	80010e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80a6 	beq.w	800125c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10d      	bne.n	800113c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	4a26      	ldr	r2, [pc, #152]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112a:	6593      	str	r3, [r2, #88]	; 0x58
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 800112e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001138:	2301      	movs	r3, #1
 800113a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <HAL_RCC_OscConfig+0x508>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d118      	bne.n	800117a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_RCC_OscConfig+0x508>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <HAL_RCC_OscConfig+0x508>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001154:	f7ff fc5c 	bl	8000a10 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115c:	f7ff fc58 	bl	8000a10 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e17a      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_RCC_OscConfig+0x508>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <HAL_RCC_OscConfig+0x4d8>
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 8001184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001192:	e029      	b.n	80011e8 <HAL_RCC_OscConfig+0x52c>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b05      	cmp	r3, #5
 800119a:	d115      	bne.n	80011c8 <HAL_RCC_OscConfig+0x50c>
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 800119e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 80011ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b2:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <HAL_RCC_OscConfig+0x504>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011bc:	e014      	b.n	80011e8 <HAL_RCC_OscConfig+0x52c>
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40007000 	.word	0x40007000
 80011c8:	4b9c      	ldr	r3, [pc, #624]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80011ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ce:	4a9b      	ldr	r2, [pc, #620]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011d8:	4b98      	ldr	r3, [pc, #608]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80011da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011de:	4a97      	ldr	r2, [pc, #604]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80011e0:	f023 0304 	bic.w	r3, r3, #4
 80011e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d016      	beq.n	800121e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fc0e 	bl	8000a10 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011f6:	e00a      	b.n	800120e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f8:	f7ff fc0a 	bl	8000a10 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f241 3288 	movw	r2, #5000	; 0x1388
 8001206:	4293      	cmp	r3, r2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e12a      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800120e:	4b8b      	ldr	r3, [pc, #556]	; (800143c <HAL_RCC_OscConfig+0x780>)
 8001210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0ed      	beq.n	80011f8 <HAL_RCC_OscConfig+0x53c>
 800121c:	e015      	b.n	800124a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121e:	f7ff fbf7 	bl	8000a10 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fbf3 	bl	8000a10 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e113      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800123c:	4b7f      	ldr	r3, [pc, #508]	; (800143c <HAL_RCC_OscConfig+0x780>)
 800123e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1ed      	bne.n	8001226 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800124a:	7ffb      	ldrb	r3, [r7, #31]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001250:	4b7a      	ldr	r3, [pc, #488]	; (800143c <HAL_RCC_OscConfig+0x780>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	4a79      	ldr	r2, [pc, #484]	; (800143c <HAL_RCC_OscConfig+0x780>)
 8001256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800125a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80fe 	beq.w	8001462 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	2b02      	cmp	r3, #2
 800126c:	f040 80d0 	bne.w	8001410 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001270:	4b72      	ldr	r3, [pc, #456]	; (800143c <HAL_RCC_OscConfig+0x780>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	429a      	cmp	r2, r3
 8001282:	d130      	bne.n	80012e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	3b01      	subs	r3, #1
 8001290:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001292:	429a      	cmp	r2, r3
 8001294:	d127      	bne.n	80012e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d11f      	bne.n	80012e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012b0:	2a07      	cmp	r2, #7
 80012b2:	bf14      	ite	ne
 80012b4:	2201      	movne	r2, #1
 80012b6:	2200      	moveq	r2, #0
 80012b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d113      	bne.n	80012e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c8:	085b      	lsrs	r3, r3, #1
 80012ca:	3b01      	subs	r3, #1
 80012cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d109      	bne.n	80012e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	085b      	lsrs	r3, r3, #1
 80012de:	3b01      	subs	r3, #1
 80012e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d06e      	beq.n	80013c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	2b0c      	cmp	r3, #12
 80012ea:	d069      	beq.n	80013c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012ec:	4b53      	ldr	r3, [pc, #332]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d105      	bne.n	8001304 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012f8:	4b50      	ldr	r3, [pc, #320]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0ad      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001308:	4b4c      	ldr	r3, [pc, #304]	; (800143c <HAL_RCC_OscConfig+0x780>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a4b      	ldr	r2, [pc, #300]	; (800143c <HAL_RCC_OscConfig+0x780>)
 800130e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001312:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001314:	f7ff fb7c 	bl	8000a10 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff fb78 	bl	8000a10 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e09a      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800132e:	4b43      	ldr	r3, [pc, #268]	; (800143c <HAL_RCC_OscConfig+0x780>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800133a:	4b40      	ldr	r3, [pc, #256]	; (800143c <HAL_RCC_OscConfig+0x780>)
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	4b40      	ldr	r3, [pc, #256]	; (8001440 <HAL_RCC_OscConfig+0x784>)
 8001340:	4013      	ands	r3, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800134a:	3a01      	subs	r2, #1
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	4311      	orrs	r1, r2
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001354:	0212      	lsls	r2, r2, #8
 8001356:	4311      	orrs	r1, r2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800135c:	0852      	lsrs	r2, r2, #1
 800135e:	3a01      	subs	r2, #1
 8001360:	0552      	lsls	r2, r2, #21
 8001362:	4311      	orrs	r1, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001368:	0852      	lsrs	r2, r2, #1
 800136a:	3a01      	subs	r2, #1
 800136c:	0652      	lsls	r2, r2, #25
 800136e:	4311      	orrs	r1, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001374:	0912      	lsrs	r2, r2, #4
 8001376:	0452      	lsls	r2, r2, #17
 8001378:	430a      	orrs	r2, r1
 800137a:	4930      	ldr	r1, [pc, #192]	; (800143c <HAL_RCC_OscConfig+0x780>)
 800137c:	4313      	orrs	r3, r2
 800137e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001380:	4b2e      	ldr	r3, [pc, #184]	; (800143c <HAL_RCC_OscConfig+0x780>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a2d      	ldr	r2, [pc, #180]	; (800143c <HAL_RCC_OscConfig+0x780>)
 8001386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800138a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800138c:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_RCC_OscConfig+0x780>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4a2a      	ldr	r2, [pc, #168]	; (800143c <HAL_RCC_OscConfig+0x780>)
 8001392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001398:	f7ff fb3a 	bl	8000a10 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff fb36 	bl	8000a10 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e058      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013be:	e050      	b.n	8001462 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e04f      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d148      	bne.n	8001462 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80013d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	4a16      	ldr	r2, [pc, #88]	; (800143c <HAL_RCC_OscConfig+0x780>)
 80013e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013e8:	f7ff fb12 	bl	8000a10 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fb0e 	bl	8000a10 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e030      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_RCC_OscConfig+0x780>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x734>
 800140e:	e028      	b.n	8001462 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b0c      	cmp	r3, #12
 8001414:	d023      	beq.n	800145e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_RCC_OscConfig+0x780>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_RCC_OscConfig+0x780>)
 800141c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001422:	f7ff faf5 	bl	8000a10 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001428:	e00c      	b.n	8001444 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff faf1 	bl	8000a10 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d905      	bls.n	8001444 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e013      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
 800143c:	40021000 	.word	0x40021000
 8001440:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_RCC_OscConfig+0x7b0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1ec      	bne.n	800142a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_RCC_OscConfig+0x7b0>)
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	4905      	ldr	r1, [pc, #20]	; (800146c <HAL_RCC_OscConfig+0x7b0>)
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_RCC_OscConfig+0x7b4>)
 8001458:	4013      	ands	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
 800145c:	e001      	b.n	8001462 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	feeefffc 	.word	0xfeeefffc

08001474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0e7      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b75      	ldr	r3, [pc, #468]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d910      	bls.n	80014b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b72      	ldr	r3, [pc, #456]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 0207 	bic.w	r2, r3, #7
 800149e:	4970      	ldr	r1, [pc, #448]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b6e      	ldr	r3, [pc, #440]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0cf      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d010      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	4b66      	ldr	r3, [pc, #408]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d908      	bls.n	80014e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d4:	4b63      	ldr	r3, [pc, #396]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4960      	ldr	r1, [pc, #384]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d04c      	beq.n	800158c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014fa:	4b5a      	ldr	r3, [pc, #360]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d121      	bne.n	800154a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e0a6      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001512:	4b54      	ldr	r3, [pc, #336]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d115      	bne.n	800154a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e09a      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800152a:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e08e      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153a:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e086      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800154a:	4b46      	ldr	r3, [pc, #280]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f023 0203 	bic.w	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4943      	ldr	r1, [pc, #268]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001558:	4313      	orrs	r3, r2
 800155a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800155c:	f7ff fa58 	bl	8000a10 <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	e00a      	b.n	800157a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001564:	f7ff fa54 	bl	8000a10 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e06e      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 020c 	and.w	r2, r3, #12
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	429a      	cmp	r2, r3
 800158a:	d1eb      	bne.n	8001564 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d010      	beq.n	80015ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d208      	bcs.n	80015ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a8:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	492b      	ldr	r1, [pc, #172]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d210      	bcs.n	80015ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 0207 	bic.w	r2, r3, #7
 80015d0:	4923      	ldr	r1, [pc, #140]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_RCC_ClockConfig+0x1ec>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d001      	beq.n	80015ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e036      	b.n	8001658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4918      	ldr	r1, [pc, #96]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d009      	beq.n	8001628 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4910      	ldr	r1, [pc, #64]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001628:	f000 f824 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_RCC_ClockConfig+0x1f0>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	f003 030f 	and.w	r3, r3, #15
 8001638:	490b      	ldr	r1, [pc, #44]	; (8001668 <HAL_RCC_ClockConfig+0x1f4>)
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
 8001644:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_RCC_ClockConfig+0x1f8>)
 8001646:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1fc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff f98f 	bl	8000970 <HAL_InitTick>
 8001652:	4603      	mov	r3, r0
 8001654:	72fb      	strb	r3, [r7, #11]

  return status;
 8001656:	7afb      	ldrb	r3, [r7, #11]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40022000 	.word	0x40022000
 8001664:	40021000 	.word	0x40021000
 8001668:	080050b0 	.word	0x080050b0
 800166c:	20000000 	.word	0x20000000
 8001670:	20000004 	.word	0x20000004

08001674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001682:	4b3e      	ldr	r3, [pc, #248]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168c:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x34>
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d121      	bne.n	80016e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d11e      	bne.n	80016e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016b4:	4b31      	ldr	r3, [pc, #196]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 80016b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e005      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016d0:	4a2b      	ldr	r2, [pc, #172]	; (8001780 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10d      	bne.n	80016fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d102      	bne.n	80016f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <HAL_RCC_GetSysClockFreq+0x110>)
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	e004      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_RCC_GetSysClockFreq+0x114>)
 80016fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2b0c      	cmp	r3, #12
 8001700:	d134      	bne.n	800176c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d003      	beq.n	800171a <HAL_RCC_GetSysClockFreq+0xa6>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b03      	cmp	r3, #3
 8001716:	d003      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0xac>
 8001718:	e005      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_RCC_GetSysClockFreq+0x110>)
 800171c:	617b      	str	r3, [r7, #20]
      break;
 800171e:	e005      	b.n	800172c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_RCC_GetSysClockFreq+0x114>)
 8001722:	617b      	str	r3, [r7, #20]
      break;
 8001724:	e002      	b.n	800172c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	617b      	str	r3, [r7, #20]
      break;
 800172a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	3301      	adds	r3, #1
 8001738:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	fb03 f202 	mul.w	r2, r3, r2
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001750:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_RCC_GetSysClockFreq+0x108>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	0e5b      	lsrs	r3, r3, #25
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	3301      	adds	r3, #1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800176c:	69bb      	ldr	r3, [r7, #24]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	080050c0 	.word	0x080050c0
 8001784:	00f42400 	.word	0x00f42400
 8001788:	007a1200 	.word	0x007a1200

0800178c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017a4:	f7ff fa26 	bl	8000bf4 <HAL_PWREx_GetVoltageRange>
 80017a8:	6178      	str	r0, [r7, #20]
 80017aa:	e014      	b.n	80017d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	4a24      	ldr	r2, [pc, #144]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6593      	str	r3, [r2, #88]	; 0x58
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017c4:	f7ff fa16 	bl	8000bf4 <HAL_PWREx_GetVoltageRange>
 80017c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017dc:	d10b      	bne.n	80017f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b80      	cmp	r3, #128	; 0x80
 80017e2:	d919      	bls.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2ba0      	cmp	r3, #160	; 0xa0
 80017e8:	d902      	bls.n	80017f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017ea:	2302      	movs	r3, #2
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	e013      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017f0:	2301      	movs	r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e010      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b80      	cmp	r3, #128	; 0x80
 80017fa:	d902      	bls.n	8001802 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017fc:	2303      	movs	r3, #3
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e00a      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b80      	cmp	r3, #128	; 0x80
 8001806:	d102      	bne.n	800180e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001808:	2302      	movs	r3, #2
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	e004      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b70      	cmp	r3, #112	; 0x70
 8001812:	d101      	bne.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001814:	2301      	movs	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 0207 	bic.w	r2, r3, #7
 8001820:	4909      	ldr	r1, [pc, #36]	; (8001848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	40022000 	.word	0x40022000

0800184c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800185a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185e:	2b84      	cmp	r3, #132	; 0x84
 8001860:	d005      	beq.n	800186e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001862:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	3303      	adds	r3, #3
 800186c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001880:	f001 f900 	bl	8002a84 <vTaskStartScheduler>
  
  return osOK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}

0800188a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800188a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188c:	b089      	sub	sp, #36	; 0x24
 800188e:	af04      	add	r7, sp, #16
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <osThreadCreate+0x54>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01c      	beq.n	80018de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685c      	ldr	r4, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691e      	ldr	r6, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ffc8 	bl	800184c <makeFreeRtosPriority>
 80018bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018c6:	9202      	str	r2, [sp, #8]
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	9100      	str	r1, [sp, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4632      	mov	r2, r6
 80018d0:	4629      	mov	r1, r5
 80018d2:	4620      	mov	r0, r4
 80018d4:	f000 fef8 	bl	80026c8 <xTaskCreateStatic>
 80018d8:	4603      	mov	r3, r0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e01c      	b.n	8001918 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685c      	ldr	r4, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ffaa 	bl	800184c <makeFreeRtosPriority>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	9200      	str	r2, [sp, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	4632      	mov	r2, r6
 8001906:	4629      	mov	r1, r5
 8001908:	4620      	mov	r0, r4
 800190a:	f000 ff3a 	bl	8002782 <xTaskCreate>
 800190e:	4603      	mov	r3, r0
 8001910:	2b01      	cmp	r3, #1
 8001912:	d001      	beq.n	8001918 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001918:	68fb      	ldr	r3, [r7, #12]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001922 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <osDelay+0x16>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	e000      	b.n	800193a <osDelay+0x18>
 8001938:	2301      	movs	r3, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f001 f86e 	bl	8002a1c <vTaskDelay>
  
  return osOK;
 8001940:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4619      	mov	r1, r3
 8001960:	2001      	movs	r0, #1
 8001962:	f000 fa84 	bl	8001e6e <xQueueCreateMutexStatic>
 8001966:	4603      	mov	r3, r0
 8001968:	e003      	b.n	8001972 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800196a:	2001      	movs	r0, #1
 800196c:	f000 fa67 	bl	8001e3e <xQueueCreateMutex>
 8001970:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af02      	add	r7, sp, #8
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00f      	beq.n	80019ac <osSemaphoreCreate+0x32>
    if (count == 1) {
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d10a      	bne.n	80019a8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	9200      	str	r2, [sp, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2001      	movs	r0, #1
 80019a0:	f000 f962 	bl	8001c68 <xQueueGenericCreateStatic>
 80019a4:	4603      	mov	r3, r0
 80019a6:	e016      	b.n	80019d6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	e014      	b.n	80019d6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d110      	bne.n	80019d4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80019b2:	2203      	movs	r2, #3
 80019b4:	2100      	movs	r1, #0
 80019b6:	2001      	movs	r0, #1
 80019b8:	f000 f9ce 	bl	8001d58 <xQueueGenericCreate>
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <osSemaphoreCreate+0x56>
 80019c4:	2300      	movs	r3, #0
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fa6a 	bl	8001ea4 <xQueueGenericSend>
      return sema;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	e000      	b.n	80019d6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80019d4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80019de:	b590      	push	{r4, r7, lr}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af02      	add	r7, sp, #8
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d011      	beq.n	8001a14 <osMessageCreate+0x36>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2400      	movs	r4, #0
 8001a0a:	9400      	str	r4, [sp, #0]
 8001a0c:	f000 f92c 	bl	8001c68 <xQueueGenericCreateStatic>
 8001a10:	4603      	mov	r3, r0
 8001a12:	e008      	b.n	8001a26 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f000 f99a 	bl	8001d58 <xQueueGenericCreate>
 8001a24:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd90      	pop	{r4, r7, pc}

08001a2e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f103 0208 	add.w	r2, r3, #8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f04f 32ff 	mov.w	r2, #4294967295
 8001a46:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f103 0208 	add.w	r2, r3, #8
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f103 0208 	add.w	r2, r3, #8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae6:	d103      	bne.n	8001af0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e00c      	b.n	8001b0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3308      	adds	r3, #8
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	e002      	b.n	8001afe <vListInsert+0x2e>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d2f6      	bcs.n	8001af8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	601a      	str	r2, [r3, #0]
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6892      	ldr	r2, [r2, #8]
 8001b58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6852      	ldr	r2, [r2, #4]
 8001b62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d103      	bne.n	8001b76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	1e5a      	subs	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10a      	bne.n	8001bc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb0:	f383 8811 	msr	BASEPRI, r3
 8001bb4:	f3bf 8f6f 	isb	sy
 8001bb8:	f3bf 8f4f 	dsb	sy
 8001bbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001bbe:	bf00      	nop
 8001bc0:	e7fe      	b.n	8001bc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001bc2:	f001 febf 	bl	8003944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bce:	68f9      	ldr	r1, [r7, #12]
 8001bd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	441a      	add	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	68f9      	ldr	r1, [r7, #12]
 8001bf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bf8:	fb01 f303 	mul.w	r3, r1, r3
 8001bfc:	441a      	add	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	22ff      	movs	r2, #255	; 0xff
 8001c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	22ff      	movs	r2, #255	; 0xff
 8001c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d114      	bne.n	8001c42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01a      	beq.n	8001c56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3310      	adds	r3, #16
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 f97f 	bl	8002f28 <xTaskRemoveFromEventList>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d012      	beq.n	8001c56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <xQueueGenericReset+0xcc>)
 8001c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	f3bf 8f4f 	dsb	sy
 8001c3c:	f3bf 8f6f 	isb	sy
 8001c40:	e009      	b.n	8001c56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3310      	adds	r3, #16
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fef1 	bl	8001a2e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3324      	adds	r3, #36	; 0x24
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff feec 	bl	8001a2e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c56:	f001 fea5 	bl	80039a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	e000ed04 	.word	0xe000ed04

08001c68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08e      	sub	sp, #56	; 0x38
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10a      	bne.n	8001c92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c80:	f383 8811 	msr	BASEPRI, r3
 8001c84:	f3bf 8f6f 	isb	sy
 8001c88:	f3bf 8f4f 	dsb	sy
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001c8e:	bf00      	nop
 8001c90:	e7fe      	b.n	8001c90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10a      	bne.n	8001cae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9c:	f383 8811 	msr	BASEPRI, r3
 8001ca0:	f3bf 8f6f 	isb	sy
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001caa:	bf00      	nop
 8001cac:	e7fe      	b.n	8001cac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <xQueueGenericCreateStatic+0x52>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <xQueueGenericCreateStatic+0x56>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <xQueueGenericCreateStatic+0x58>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc8:	f383 8811 	msr	BASEPRI, r3
 8001ccc:	f3bf 8f6f 	isb	sy
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	623b      	str	r3, [r7, #32]
}
 8001cd6:	bf00      	nop
 8001cd8:	e7fe      	b.n	8001cd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <xQueueGenericCreateStatic+0x7e>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <xQueueGenericCreateStatic+0x82>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <xQueueGenericCreateStatic+0x84>
 8001cea:	2300      	movs	r3, #0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10a      	bne.n	8001d06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf4:	f383 8811 	msr	BASEPRI, r3
 8001cf8:	f3bf 8f6f 	isb	sy
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	61fb      	str	r3, [r7, #28]
}
 8001d02:	bf00      	nop
 8001d04:	e7fe      	b.n	8001d04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d06:	2348      	movs	r3, #72	; 0x48
 8001d08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b48      	cmp	r3, #72	; 0x48
 8001d0e:	d00a      	beq.n	8001d26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	f3bf 8f6f 	isb	sy
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	61bb      	str	r3, [r7, #24]
}
 8001d22:	bf00      	nop
 8001d24:	e7fe      	b.n	8001d24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001d26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00d      	beq.n	8001d4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	4613      	mov	r3, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f83f 	bl	8001dcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3730      	adds	r7, #48	; 0x30
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	4613      	mov	r3, r2
 8001d64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d70:	f383 8811 	msr	BASEPRI, r3
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	613b      	str	r3, [r7, #16]
}
 8001d7e:	bf00      	nop
 8001d80:	e7fe      	b.n	8001d80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3348      	adds	r3, #72	; 0x48
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 feb9 	bl	8003b08 <pvPortMalloc>
 8001d96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d011      	beq.n	8001dc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3348      	adds	r3, #72	; 0x48
 8001da6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001db0:	79fa      	ldrb	r2, [r7, #7]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	4613      	mov	r3, r2
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 f805 	bl	8001dcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001dc2:	69bb      	ldr	r3, [r7, #24]
	}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	e002      	b.n	8001dee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	69b8      	ldr	r0, [r7, #24]
 8001dfe:	f7ff fecb 	bl	8001b98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00e      	beq.n	8001e36 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f837 	bl	8001ea4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	461a      	mov	r2, r3
 8001e54:	6939      	ldr	r1, [r7, #16]
 8001e56:	6978      	ldr	r0, [r7, #20]
 8001e58:	f7ff ff7e 	bl	8001d58 <xQueueGenericCreate>
 8001e5c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff ffd3 	bl	8001e0a <prvInitialiseMutex>

		return xNewQueue;
 8001e64:	68fb      	ldr	r3, [r7, #12]
	}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b088      	sub	sp, #32
 8001e72:	af02      	add	r7, sp, #8
 8001e74:	4603      	mov	r3, r0
 8001e76:	6039      	str	r1, [r7, #0]
 8001e78:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	6939      	ldr	r1, [r7, #16]
 8001e8c:	6978      	ldr	r0, [r7, #20]
 8001e8e:	f7ff feeb 	bl	8001c68 <xQueueGenericCreateStatic>
 8001e92:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f7ff ffb8 	bl	8001e0a <prvInitialiseMutex>

		return xNewQueue;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
	}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08e      	sub	sp, #56	; 0x38
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <xQueueGenericSend+0x32>
	__asm volatile
 8001ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec4:	f383 8811 	msr	BASEPRI, r3
 8001ec8:	f3bf 8f6f 	isb	sy
 8001ecc:	f3bf 8f4f 	dsb	sy
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ed2:	bf00      	nop
 8001ed4:	e7fe      	b.n	8001ed4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <xQueueGenericSend+0x40>
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <xQueueGenericSend+0x44>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <xQueueGenericSend+0x46>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <xQueueGenericSend+0x60>
	__asm volatile
 8001eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef2:	f383 8811 	msr	BASEPRI, r3
 8001ef6:	f3bf 8f6f 	isb	sy
 8001efa:	f3bf 8f4f 	dsb	sy
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f00:	bf00      	nop
 8001f02:	e7fe      	b.n	8001f02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d103      	bne.n	8001f12 <xQueueGenericSend+0x6e>
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <xQueueGenericSend+0x72>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <xQueueGenericSend+0x74>
 8001f16:	2300      	movs	r3, #0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <xQueueGenericSend+0x8e>
	__asm volatile
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	623b      	str	r3, [r7, #32]
}
 8001f2e:	bf00      	nop
 8001f30:	e7fe      	b.n	8001f30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f32:	f001 f9b9 	bl	80032a8 <xTaskGetSchedulerState>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <xQueueGenericSend+0x9e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <xQueueGenericSend+0xa2>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <xQueueGenericSend+0xa4>
 8001f46:	2300      	movs	r3, #0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10a      	bne.n	8001f62 <xQueueGenericSend+0xbe>
	__asm volatile
 8001f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f50:	f383 8811 	msr	BASEPRI, r3
 8001f54:	f3bf 8f6f 	isb	sy
 8001f58:	f3bf 8f4f 	dsb	sy
 8001f5c:	61fb      	str	r3, [r7, #28]
}
 8001f5e:	bf00      	nop
 8001f60:	e7fe      	b.n	8001f60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f62:	f001 fcef 	bl	8003944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d302      	bcc.n	8001f78 <xQueueGenericSend+0xd4>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d129      	bne.n	8001fcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f7e:	f000 fa93 	bl	80024a8 <prvCopyDataToQueue>
 8001f82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d010      	beq.n	8001fae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	3324      	adds	r3, #36	; 0x24
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 ffc9 	bl	8002f28 <xTaskRemoveFromEventList>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	; (800209c <xQueueGenericSend+0x1f8>)
 8001f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f3bf 8f4f 	dsb	sy
 8001fa8:	f3bf 8f6f 	isb	sy
 8001fac:	e00a      	b.n	8001fc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <xQueueGenericSend+0x1f8>)
 8001fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001fc4:	f001 fcee 	bl	80039a4 <vPortExitCritical>
				return pdPASS;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e063      	b.n	8002094 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001fd2:	f001 fce7 	bl	80039a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e05c      	b.n	8002094 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 f801 	bl	8002fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001fea:	2301      	movs	r3, #1
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001fee:	f001 fcd9 	bl	80039a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ff2:	f000 fdb1 	bl	8002b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ff6:	f001 fca5 	bl	8003944 <vPortEnterCritical>
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002000:	b25b      	sxtb	r3, r3
 8002002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002006:	d103      	bne.n	8002010 <xQueueGenericSend+0x16c>
 8002008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002016:	b25b      	sxtb	r3, r3
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d103      	bne.n	8002026 <xQueueGenericSend+0x182>
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002026:	f001 fcbd 	bl	80039a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800202a:	1d3a      	adds	r2, r7, #4
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fff0 	bl	8003018 <xTaskCheckForTimeOut>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d124      	bne.n	8002088 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800203e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002040:	f000 fb2a 	bl	8002698 <prvIsQueueFull>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d018      	beq.n	800207c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204c:	3310      	adds	r3, #16
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f000 ff44 	bl	8002ee0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800205a:	f000 fab5 	bl	80025c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800205e:	f000 fd89 	bl	8002b74 <xTaskResumeAll>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	f47f af7c 	bne.w	8001f62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <xQueueGenericSend+0x1f8>)
 800206c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	f3bf 8f6f 	isb	sy
 800207a:	e772      	b.n	8001f62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800207c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800207e:	f000 faa3 	bl	80025c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002082:	f000 fd77 	bl	8002b74 <xTaskResumeAll>
 8002086:	e76c      	b.n	8001f62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800208a:	f000 fa9d 	bl	80025c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800208e:	f000 fd71 	bl	8002b74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002092:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002094:	4618      	mov	r0, r3
 8002096:	3738      	adds	r7, #56	; 0x38
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	e000ed04 	.word	0xe000ed04

080020a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10a      	bne.n	80020d0 <xQueueReceive+0x30>
	__asm volatile
 80020ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020be:	f383 8811 	msr	BASEPRI, r3
 80020c2:	f3bf 8f6f 	isb	sy
 80020c6:	f3bf 8f4f 	dsb	sy
 80020ca:	623b      	str	r3, [r7, #32]
}
 80020cc:	bf00      	nop
 80020ce:	e7fe      	b.n	80020ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <xQueueReceive+0x3e>
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <xQueueReceive+0x42>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <xQueueReceive+0x44>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <xQueueReceive+0x5e>
	__asm volatile
 80020e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	61fb      	str	r3, [r7, #28]
}
 80020fa:	bf00      	nop
 80020fc:	e7fe      	b.n	80020fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020fe:	f001 f8d3 	bl	80032a8 <xTaskGetSchedulerState>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <xQueueReceive+0x6e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <xQueueReceive+0x72>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <xQueueReceive+0x74>
 8002112:	2300      	movs	r3, #0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10a      	bne.n	800212e <xQueueReceive+0x8e>
	__asm volatile
 8002118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211c:	f383 8811 	msr	BASEPRI, r3
 8002120:	f3bf 8f6f 	isb	sy
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	61bb      	str	r3, [r7, #24]
}
 800212a:	bf00      	nop
 800212c:	e7fe      	b.n	800212c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800212e:	f001 fc09 	bl	8003944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01f      	beq.n	800217e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002142:	f000 fa1b 	bl	800257c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	1e5a      	subs	r2, r3, #1
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00f      	beq.n	8002176 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002158:	3310      	adds	r3, #16
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fee4 	bl	8002f28 <xTaskRemoveFromEventList>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <xQueueReceive+0x1bc>)
 8002168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f3bf 8f4f 	dsb	sy
 8002172:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002176:	f001 fc15 	bl	80039a4 <vPortExitCritical>
				return pdPASS;
 800217a:	2301      	movs	r3, #1
 800217c:	e069      	b.n	8002252 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d103      	bne.n	800218c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002184:	f001 fc0e 	bl	80039a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002188:	2300      	movs	r3, #0
 800218a:	e062      	b.n	8002252 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	4618      	mov	r0, r3
 8002198:	f000 ff28 	bl	8002fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800219c:	2301      	movs	r3, #1
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021a0:	f001 fc00 	bl	80039a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021a4:	f000 fcd8 	bl	8002b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021a8:	f001 fbcc 	bl	8003944 <vPortEnterCritical>
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d103      	bne.n	80021c2 <xQueueReceive+0x122>
 80021ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ce:	d103      	bne.n	80021d8 <xQueueReceive+0x138>
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021d8:	f001 fbe4 	bl	80039a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021dc:	1d3a      	adds	r2, r7, #4
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 ff17 	bl	8003018 <xTaskCheckForTimeOut>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d123      	bne.n	8002238 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021f2:	f000 fa3b 	bl	800266c <prvIsQueueEmpty>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d017      	beq.n	800222c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	3324      	adds	r3, #36	; 0x24
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fe6b 	bl	8002ee0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800220a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800220c:	f000 f9dc 	bl	80025c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002210:	f000 fcb0 	bl	8002b74 <xTaskResumeAll>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d189      	bne.n	800212e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <xQueueReceive+0x1bc>)
 800221c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	e780      	b.n	800212e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800222c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800222e:	f000 f9cb 	bl	80025c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002232:	f000 fc9f 	bl	8002b74 <xTaskResumeAll>
 8002236:	e77a      	b.n	800212e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800223a:	f000 f9c5 	bl	80025c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800223e:	f000 fc99 	bl	8002b74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002244:	f000 fa12 	bl	800266c <prvIsQueueEmpty>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	f43f af6f 	beq.w	800212e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002250:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002252:	4618      	mov	r0, r3
 8002254:	3730      	adds	r7, #48	; 0x30
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000ed04 	.word	0xe000ed04

08002260 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800226a:	2300      	movs	r3, #0
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002272:	2300      	movs	r3, #0
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800227c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002280:	f383 8811 	msr	BASEPRI, r3
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	623b      	str	r3, [r7, #32]
}
 800228e:	bf00      	nop
 8002290:	e7fe      	b.n	8002290 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800229a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229e:	f383 8811 	msr	BASEPRI, r3
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	61fb      	str	r3, [r7, #28]
}
 80022ac:	bf00      	nop
 80022ae:	e7fe      	b.n	80022ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022b0:	f000 fffa 	bl	80032a8 <xTaskGetSchedulerState>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <xQueueSemaphoreTake+0x60>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <xQueueSemaphoreTake+0x64>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <xQueueSemaphoreTake+0x66>
 80022c4:	2300      	movs	r3, #0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80022ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ce:	f383 8811 	msr	BASEPRI, r3
 80022d2:	f3bf 8f6f 	isb	sy
 80022d6:	f3bf 8f4f 	dsb	sy
 80022da:	61bb      	str	r3, [r7, #24]
}
 80022dc:	bf00      	nop
 80022de:	e7fe      	b.n	80022de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022e0:	f001 fb30 	bl	8003944 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d024      	beq.n	800233a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	1e5a      	subs	r2, r3, #1
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d104      	bne.n	800230a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002300:	f001 f97a 	bl	80035f8 <pvTaskIncrementMutexHeldCount>
 8002304:	4602      	mov	r2, r0
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00f      	beq.n	8002332 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	3310      	adds	r3, #16
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fe06 	bl	8002f28 <xTaskRemoveFromEventList>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002322:	4b54      	ldr	r3, [pc, #336]	; (8002474 <xQueueSemaphoreTake+0x214>)
 8002324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f3bf 8f4f 	dsb	sy
 800232e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002332:	f001 fb37 	bl	80039a4 <vPortExitCritical>
				return pdPASS;
 8002336:	2301      	movs	r3, #1
 8002338:	e097      	b.n	800246a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d111      	bne.n	8002364 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	617b      	str	r3, [r7, #20]
}
 8002358:	bf00      	nop
 800235a:	e7fe      	b.n	800235a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800235c:	f001 fb22 	bl	80039a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002360:	2300      	movs	r3, #0
 8002362:	e082      	b.n	800246a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fe3c 	bl	8002fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002374:	2301      	movs	r3, #1
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002378:	f001 fb14 	bl	80039a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800237c:	f000 fbec 	bl	8002b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002380:	f001 fae0 	bl	8003944 <vPortEnterCritical>
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800238a:	b25b      	sxtb	r3, r3
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d103      	bne.n	800239a <xQueueSemaphoreTake+0x13a>
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023a0:	b25b      	sxtb	r3, r3
 80023a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a6:	d103      	bne.n	80023b0 <xQueueSemaphoreTake+0x150>
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023b0:	f001 faf8 	bl	80039a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023b4:	463a      	mov	r2, r7
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fe2b 	bl	8003018 <xTaskCheckForTimeOut>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d132      	bne.n	800242e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023ca:	f000 f94f 	bl	800266c <prvIsQueueEmpty>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d026      	beq.n	8002422 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80023dc:	f001 fab2 	bl	8003944 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 ff7d 	bl	80032e4 <xTaskPriorityInherit>
 80023ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80023ec:	f001 fada 	bl	80039a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	3324      	adds	r3, #36	; 0x24
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fd71 	bl	8002ee0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002400:	f000 f8e2 	bl	80025c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002404:	f000 fbb6 	bl	8002b74 <xTaskResumeAll>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	f47f af68 	bne.w	80022e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <xQueueSemaphoreTake+0x214>)
 8002412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	e75e      	b.n	80022e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002424:	f000 f8d0 	bl	80025c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002428:	f000 fba4 	bl	8002b74 <xTaskResumeAll>
 800242c:	e758      	b.n	80022e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800242e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002430:	f000 f8ca 	bl	80025c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002434:	f000 fb9e 	bl	8002b74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800243a:	f000 f917 	bl	800266c <prvIsQueueEmpty>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	f43f af4d 	beq.w	80022e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800244c:	f001 fa7a 	bl	8003944 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002452:	f000 f811 	bl	8002478 <prvGetDisinheritPriorityAfterTimeout>
 8002456:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800245e:	4618      	mov	r0, r3
 8002460:	f001 f83c 	bl	80034dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002464:	f001 fa9e 	bl	80039a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002468:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800246a:	4618      	mov	r0, r3
 800246c:	3738      	adds	r7, #56	; 0x38
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000ed04 	.word	0xe000ed04

08002478 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e001      	b.n	800249a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800249a:	68fb      	ldr	r3, [r7, #12]
	}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10d      	bne.n	80024e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d14d      	bne.n	800256a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 ff7c 	bl	80033d0 <xTaskPriorityDisinherit>
 80024d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	e043      	b.n	800256a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d119      	bne.n	800251c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6858      	ldr	r0, [r3, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	461a      	mov	r2, r3
 80024f2:	68b9      	ldr	r1, [r7, #8]
 80024f4:	f001 ffb8 	bl	8004468 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	441a      	add	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	429a      	cmp	r2, r3
 8002510:	d32b      	bcc.n	800256a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	e026      	b.n	800256a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68d8      	ldr	r0, [r3, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	461a      	mov	r2, r3
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	f001 ff9e 	bl	8004468 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	425b      	negs	r3, r3
 8002536:	441a      	add	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d207      	bcs.n	8002558 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	425b      	negs	r3, r3
 8002552:	441a      	add	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d105      	bne.n	800256a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	3b01      	subs	r3, #1
 8002568:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002572:	697b      	ldr	r3, [r7, #20]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d018      	beq.n	80025c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	441a      	add	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d303      	bcc.n	80025b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68d9      	ldr	r1, [r3, #12]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	461a      	mov	r2, r3
 80025ba:	6838      	ldr	r0, [r7, #0]
 80025bc:	f001 ff54 	bl	8004468 <memcpy>
	}
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025d0:	f001 f9b8 	bl	8003944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025dc:	e011      	b.n	8002602 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d012      	beq.n	800260c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3324      	adds	r3, #36	; 0x24
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fc9c 	bl	8002f28 <xTaskRemoveFromEventList>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80025f6:	f000 fd71 	bl	80030dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	dce9      	bgt.n	80025de <prvUnlockQueue+0x16>
 800260a:	e000      	b.n	800260e <prvUnlockQueue+0x46>
					break;
 800260c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	22ff      	movs	r2, #255	; 0xff
 8002612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002616:	f001 f9c5 	bl	80039a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800261a:	f001 f993 	bl	8003944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002624:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002626:	e011      	b.n	800264c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3310      	adds	r3, #16
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fc77 	bl	8002f28 <xTaskRemoveFromEventList>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002640:	f000 fd4c 	bl	80030dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002644:	7bbb      	ldrb	r3, [r7, #14]
 8002646:	3b01      	subs	r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800264c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002650:	2b00      	cmp	r3, #0
 8002652:	dce9      	bgt.n	8002628 <prvUnlockQueue+0x60>
 8002654:	e000      	b.n	8002658 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002656:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	22ff      	movs	r2, #255	; 0xff
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002660:	f001 f9a0 	bl	80039a4 <vPortExitCritical>
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002674:	f001 f966 	bl	8003944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002680:	2301      	movs	r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e001      	b.n	800268a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800268a:	f001 f98b 	bl	80039a4 <vPortExitCritical>

	return xReturn;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026a0:	f001 f950 	bl	8003944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d102      	bne.n	80026b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e001      	b.n	80026ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026ba:	f001 f973 	bl	80039a4 <vPortExitCritical>

	return xReturn;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08e      	sub	sp, #56	; 0x38
 80026cc:	af04      	add	r7, sp, #16
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	623b      	str	r3, [r7, #32]
}
 80026ee:	bf00      	nop
 80026f0:	e7fe      	b.n	80026f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <xTaskCreateStatic+0x46>
	__asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	61fb      	str	r3, [r7, #28]
}
 800270a:	bf00      	nop
 800270c:	e7fe      	b.n	800270c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800270e:	23a0      	movs	r3, #160	; 0xa0
 8002710:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2ba0      	cmp	r3, #160	; 0xa0
 8002716:	d00a      	beq.n	800272e <xTaskCreateStatic+0x66>
	__asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	61bb      	str	r3, [r7, #24]
}
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800272e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01e      	beq.n	8002774 <xTaskCreateStatic+0xac>
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002744:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	2202      	movs	r2, #2
 800274a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800274e:	2300      	movs	r3, #0
 8002750:	9303      	str	r3, [sp, #12]
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f850 	bl	800280c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800276c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800276e:	f000 f8eb 	bl	8002948 <prvAddNewTaskToReadyList>
 8002772:	e001      	b.n	8002778 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002778:	697b      	ldr	r3, [r7, #20]
	}
 800277a:	4618      	mov	r0, r3
 800277c:	3728      	adds	r7, #40	; 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002782:	b580      	push	{r7, lr}
 8002784:	b08c      	sub	sp, #48	; 0x30
 8002786:	af04      	add	r7, sp, #16
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4618      	mov	r0, r3
 8002798:	f001 f9b6 	bl	8003b08 <pvPortMalloc>
 800279c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00e      	beq.n	80027c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027a4:	20a0      	movs	r0, #160	; 0xa0
 80027a6:	f001 f9af 	bl	8003b08 <pvPortMalloc>
 80027aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
 80027b8:	e005      	b.n	80027c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f001 fa70 	bl	8003ca0 <vPortFree>
 80027c0:	e001      	b.n	80027c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d017      	beq.n	80027fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027d4:	88fa      	ldrh	r2, [r7, #6]
 80027d6:	2300      	movs	r3, #0
 80027d8:	9303      	str	r3, [sp, #12]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	9302      	str	r3, [sp, #8]
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f80e 	bl	800280c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027f0:	69f8      	ldr	r0, [r7, #28]
 80027f2:	f000 f8a9 	bl	8002948 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	e002      	b.n	8002802 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002800:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002802:	69bb      	ldr	r3, [r7, #24]
	}
 8002804:	4618      	mov	r0, r3
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002824:	3b01      	subs	r3, #1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f023 0307 	bic.w	r3, r3, #7
 8002832:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <prvInitialiseNewTask+0x48>
	__asm volatile
 800283e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002842:	f383 8811 	msr	BASEPRI, r3
 8002846:	f3bf 8f6f 	isb	sy
 800284a:	f3bf 8f4f 	dsb	sy
 800284e:	617b      	str	r3, [r7, #20]
}
 8002850:	bf00      	nop
 8002852:	e7fe      	b.n	8002852 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01f      	beq.n	800289a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e012      	b.n	8002886 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	7819      	ldrb	r1, [r3, #0]
 8002868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	3334      	adds	r3, #52	; 0x34
 8002870:	460a      	mov	r2, r1
 8002872:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	3301      	adds	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	2b0f      	cmp	r3, #15
 800288a:	d9e9      	bls.n	8002860 <prvInitialiseNewTask+0x54>
 800288c:	e000      	b.n	8002890 <prvInitialiseNewTask+0x84>
			{
				break;
 800288e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002898:	e003      	b.n	80028a2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d901      	bls.n	80028ac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028a8:	2306      	movs	r3, #6
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	2200      	movs	r2, #0
 80028bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	3304      	adds	r3, #4
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f8d3 	bl	8001a6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	3318      	adds	r3, #24
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff f8ce 	bl	8001a6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	f1c3 0207 	rsb	r2, r3, #7
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	2200      	movs	r2, #0
 80028ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	334c      	adds	r3, #76	; 0x4c
 80028fc:	224c      	movs	r2, #76	; 0x4c
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fce1 	bl	80042c8 <memset>
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	4a0c      	ldr	r2, [pc, #48]	; (800293c <prvInitialiseNewTask+0x130>)
 800290a:	651a      	str	r2, [r3, #80]	; 0x50
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <prvInitialiseNewTask+0x134>)
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <prvInitialiseNewTask+0x138>)
 8002916:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	68f9      	ldr	r1, [r7, #12]
 800291c:	69b8      	ldr	r0, [r7, #24]
 800291e:	f000 fee5 	bl	80036ec <pxPortInitialiseStack>
 8002922:	4602      	mov	r2, r0
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002932:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002934:	bf00      	nop
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20001250 	.word	0x20001250
 8002940:	200012b8 	.word	0x200012b8
 8002944:	20001320 	.word	0x20001320

08002948 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002950:	f000 fff8 	bl	8003944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <prvAddNewTaskToReadyList+0xb8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <prvAddNewTaskToReadyList+0xb8>)
 800295c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800295e:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <prvAddNewTaskToReadyList+0xbc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002966:	4a27      	ldr	r2, [pc, #156]	; (8002a04 <prvAddNewTaskToReadyList+0xbc>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800296c:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <prvAddNewTaskToReadyList+0xb8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d110      	bne.n	8002996 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002974:	f000 fbd6 	bl	8003124 <prvInitialiseTaskLists>
 8002978:	e00d      	b.n	8002996 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <prvAddNewTaskToReadyList+0xc0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <prvAddNewTaskToReadyList+0xbc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	429a      	cmp	r2, r3
 800298e:	d802      	bhi.n	8002996 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002990:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <prvAddNewTaskToReadyList+0xbc>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <prvAddNewTaskToReadyList+0xc4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <prvAddNewTaskToReadyList+0xc4>)
 800299e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	2201      	movs	r2, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <prvAddNewTaskToReadyList+0xc8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	4a18      	ldr	r2, [pc, #96]	; (8002a10 <prvAddNewTaskToReadyList+0xc8>)
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <prvAddNewTaskToReadyList+0xcc>)
 80029c0:	441a      	add	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3304      	adds	r3, #4
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f7ff f85d 	bl	8001a88 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029ce:	f000 ffe9 	bl	80039a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <prvAddNewTaskToReadyList+0xc0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00e      	beq.n	80029f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <prvAddNewTaskToReadyList+0xbc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d207      	bcs.n	80029f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <prvAddNewTaskToReadyList+0xd0>)
 80029ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000450 	.word	0x20000450
 8002a04:	20000350 	.word	0x20000350
 8002a08:	2000045c 	.word	0x2000045c
 8002a0c:	2000046c 	.word	0x2000046c
 8002a10:	20000458 	.word	0x20000458
 8002a14:	20000354 	.word	0x20000354
 8002a18:	e000ed04 	.word	0xe000ed04

08002a1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d017      	beq.n	8002a5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <vTaskDelay+0x60>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <vTaskDelay+0x30>
	__asm volatile
 8002a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	60bb      	str	r3, [r7, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	e7fe      	b.n	8002a4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a4c:	f000 f884 	bl	8002b58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a50:	2100      	movs	r1, #0
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fde4 	bl	8003620 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a58:	f000 f88c 	bl	8002b74 <xTaskResumeAll>
 8002a5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d107      	bne.n	8002a74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <vTaskDelay+0x64>)
 8002a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000478 	.word	0x20000478
 8002a80:	e000ed04 	.word	0xe000ed04

08002a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a92:	463a      	mov	r2, r7
 8002a94:	1d39      	adds	r1, r7, #4
 8002a96:	f107 0308 	add.w	r3, r7, #8
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fbe8 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002aa0:	6839      	ldr	r1, [r7, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	9202      	str	r2, [sp, #8]
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	460a      	mov	r2, r1
 8002ab2:	4921      	ldr	r1, [pc, #132]	; (8002b38 <vTaskStartScheduler+0xb4>)
 8002ab4:	4821      	ldr	r0, [pc, #132]	; (8002b3c <vTaskStartScheduler+0xb8>)
 8002ab6:	f7ff fe07 	bl	80026c8 <xTaskCreateStatic>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <vTaskStartScheduler+0xbc>)
 8002abe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <vTaskStartScheduler+0xbc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	e001      	b.n	8002ad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d11b      	bne.n	8002b10 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	613b      	str	r3, [r7, #16]
}
 8002aea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <vTaskStartScheduler+0xc0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	334c      	adds	r3, #76	; 0x4c
 8002af2:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <vTaskStartScheduler+0xc4>)
 8002af4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <vTaskStartScheduler+0xc8>)
 8002af8:	f04f 32ff 	mov.w	r2, #4294967295
 8002afc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <vTaskStartScheduler+0xcc>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <vTaskStartScheduler+0xd0>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b0a:	f000 fe79 	bl	8003800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b0e:	e00e      	b.n	8002b2e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d10a      	bne.n	8002b2e <vTaskStartScheduler+0xaa>
	__asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	60fb      	str	r3, [r7, #12]
}
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <vTaskStartScheduler+0xa8>
}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	080050a8 	.word	0x080050a8
 8002b3c:	080030f5 	.word	0x080030f5
 8002b40:	20000474 	.word	0x20000474
 8002b44:	20000350 	.word	0x20000350
 8002b48:	20000068 	.word	0x20000068
 8002b4c:	20000470 	.word	0x20000470
 8002b50:	2000045c 	.word	0x2000045c
 8002b54:	20000454 	.word	0x20000454

08002b58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <vTaskSuspendAll+0x18>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <vTaskSuspendAll+0x18>)
 8002b64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	20000478 	.word	0x20000478

08002b74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b82:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <xTaskResumeAll+0x114>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <xTaskResumeAll+0x2c>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	603b      	str	r3, [r7, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	e7fe      	b.n	8002b9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ba0:	f000 fed0 	bl	8003944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ba4:	4b38      	ldr	r3, [pc, #224]	; (8002c88 <xTaskResumeAll+0x114>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	4a37      	ldr	r2, [pc, #220]	; (8002c88 <xTaskResumeAll+0x114>)
 8002bac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bae:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <xTaskResumeAll+0x114>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d161      	bne.n	8002c7a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bb6:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <xTaskResumeAll+0x118>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d05d      	beq.n	8002c7a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bbe:	e02e      	b.n	8002c1e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bc0:	4b33      	ldr	r3, [pc, #204]	; (8002c90 <xTaskResumeAll+0x11c>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3318      	adds	r3, #24
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe ffb8 	bl	8001b42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe ffb3 	bl	8001b42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	2201      	movs	r2, #1
 8002be2:	409a      	lsls	r2, r3
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <xTaskResumeAll+0x120>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	4a2a      	ldr	r2, [pc, #168]	; (8002c94 <xTaskResumeAll+0x120>)
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4a27      	ldr	r2, [pc, #156]	; (8002c98 <xTaskResumeAll+0x124>)
 8002bfc:	441a      	add	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3304      	adds	r3, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	4610      	mov	r0, r2
 8002c06:	f7fe ff3f 	bl	8001a88 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0e:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <xTaskResumeAll+0x128>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d302      	bcc.n	8002c1e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <xTaskResumeAll+0x12c>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <xTaskResumeAll+0x11c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1cc      	bne.n	8002bc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c2c:	f000 fb1c 	bl	8003268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c30:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <xTaskResumeAll+0x130>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c3c:	f000 f836 	bl	8002cac <xTaskIncrementTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <xTaskResumeAll+0x12c>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f1      	bne.n	8002c3c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <xTaskResumeAll+0x130>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <xTaskResumeAll+0x12c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c66:	2301      	movs	r3, #1
 8002c68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <xTaskResumeAll+0x134>)
 8002c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c7a:	f000 fe93 	bl	80039a4 <vPortExitCritical>

	return xAlreadyYielded;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000478 	.word	0x20000478
 8002c8c:	20000450 	.word	0x20000450
 8002c90:	20000410 	.word	0x20000410
 8002c94:	20000458 	.word	0x20000458
 8002c98:	20000354 	.word	0x20000354
 8002c9c:	20000350 	.word	0x20000350
 8002ca0:	20000464 	.word	0x20000464
 8002ca4:	20000460 	.word	0x20000460
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cb6:	4b4e      	ldr	r3, [pc, #312]	; (8002df0 <xTaskIncrementTick+0x144>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 808e 	bne.w	8002ddc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cc0:	4b4c      	ldr	r3, [pc, #304]	; (8002df4 <xTaskIncrementTick+0x148>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cc8:	4a4a      	ldr	r2, [pc, #296]	; (8002df4 <xTaskIncrementTick+0x148>)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d120      	bne.n	8002d16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cd4:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <xTaskIncrementTick+0x14c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <xTaskIncrementTick+0x48>
	__asm volatile
 8002cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	603b      	str	r3, [r7, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	e7fe      	b.n	8002cf2 <xTaskIncrementTick+0x46>
 8002cf4:	4b40      	ldr	r3, [pc, #256]	; (8002df8 <xTaskIncrementTick+0x14c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <xTaskIncrementTick+0x150>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3e      	ldr	r2, [pc, #248]	; (8002df8 <xTaskIncrementTick+0x14c>)
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4a3e      	ldr	r2, [pc, #248]	; (8002dfc <xTaskIncrementTick+0x150>)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <xTaskIncrementTick+0x154>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	4a3c      	ldr	r2, [pc, #240]	; (8002e00 <xTaskIncrementTick+0x154>)
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	f000 faa9 	bl	8003268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d16:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <xTaskIncrementTick+0x158>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d348      	bcc.n	8002db2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d20:	4b35      	ldr	r3, [pc, #212]	; (8002df8 <xTaskIncrementTick+0x14c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d2a:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <xTaskIncrementTick+0x158>)
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d30:	601a      	str	r2, [r3, #0]
					break;
 8002d32:	e03e      	b.n	8002db2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d34:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <xTaskIncrementTick+0x14c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d203      	bcs.n	8002d54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d4c:	4a2d      	ldr	r2, [pc, #180]	; (8002e04 <xTaskIncrementTick+0x158>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d52:	e02e      	b.n	8002db2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	3304      	adds	r3, #4
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fef2 	bl	8001b42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3318      	adds	r3, #24
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fee9 	bl	8001b42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	2201      	movs	r2, #1
 8002d76:	409a      	lsls	r2, r3
 8002d78:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <xTaskIncrementTick+0x15c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <xTaskIncrementTick+0x15c>)
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4a1f      	ldr	r2, [pc, #124]	; (8002e0c <xTaskIncrementTick+0x160>)
 8002d90:	441a      	add	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3304      	adds	r3, #4
 8002d96:	4619      	mov	r1, r3
 8002d98:	4610      	mov	r0, r2
 8002d9a:	f7fe fe75 	bl	8001a88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <xTaskIncrementTick+0x164>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d3b9      	bcc.n	8002d20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002dac:	2301      	movs	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002db0:	e7b6      	b.n	8002d20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <xTaskIncrementTick+0x164>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	4914      	ldr	r1, [pc, #80]	; (8002e0c <xTaskIncrementTick+0x160>)
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d901      	bls.n	8002dce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <xTaskIncrementTick+0x168>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	e004      	b.n	8002de6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <xTaskIncrementTick+0x16c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <xTaskIncrementTick+0x16c>)
 8002de4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002de6:	697b      	ldr	r3, [r7, #20]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000478 	.word	0x20000478
 8002df4:	20000454 	.word	0x20000454
 8002df8:	20000408 	.word	0x20000408
 8002dfc:	2000040c 	.word	0x2000040c
 8002e00:	20000468 	.word	0x20000468
 8002e04:	20000470 	.word	0x20000470
 8002e08:	20000458 	.word	0x20000458
 8002e0c:	20000354 	.word	0x20000354
 8002e10:	20000350 	.word	0x20000350
 8002e14:	20000464 	.word	0x20000464
 8002e18:	20000460 	.word	0x20000460

08002e1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <vTaskSwitchContext+0xac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <vTaskSwitchContext+0xb0>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e30:	e044      	b.n	8002ebc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002e32:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <vTaskSwitchContext+0xb0>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <vTaskSwitchContext+0xb4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e46:	7afb      	ldrb	r3, [r7, #11]
 8002e48:	f1c3 031f 	rsb	r3, r3, #31
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	4921      	ldr	r1, [pc, #132]	; (8002ed4 <vTaskSwitchContext+0xb8>)
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	607b      	str	r3, [r7, #4]
}
 8002e74:	bf00      	nop
 8002e76:	e7fe      	b.n	8002e76 <vTaskSwitchContext+0x5a>
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <vTaskSwitchContext+0xb8>)
 8002e84:	4413      	add	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	3308      	adds	r3, #8
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d104      	bne.n	8002ea8 <vTaskSwitchContext+0x8c>
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <vTaskSwitchContext+0xbc>)
 8002eb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <vTaskSwitchContext+0xbc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	334c      	adds	r3, #76	; 0x4c
 8002eb8:	4a08      	ldr	r2, [pc, #32]	; (8002edc <vTaskSwitchContext+0xc0>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	20000478 	.word	0x20000478
 8002ecc:	20000464 	.word	0x20000464
 8002ed0:	20000458 	.word	0x20000458
 8002ed4:	20000354 	.word	0x20000354
 8002ed8:	20000350 	.word	0x20000350
 8002edc:	20000068 	.word	0x20000068

08002ee0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	60fb      	str	r3, [r7, #12]
}
 8002f02:	bf00      	nop
 8002f04:	e7fe      	b.n	8002f04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <vTaskPlaceOnEventList+0x44>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe fdde 	bl	8001ad0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f14:	2101      	movs	r1, #1
 8002f16:	6838      	ldr	r0, [r7, #0]
 8002f18:	f000 fb82 	bl	8003620 <prvAddCurrentTaskToDelayedList>
}
 8002f1c:	bf00      	nop
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000350 	.word	0x20000350

08002f28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f42:	f383 8811 	msr	BASEPRI, r3
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	60fb      	str	r3, [r7, #12]
}
 8002f50:	bf00      	nop
 8002f52:	e7fe      	b.n	8002f52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	3318      	adds	r3, #24
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fdf2 	bl	8001b42 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <xTaskRemoveFromEventList+0xac>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11c      	bne.n	8002fa0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fde9 	bl	8001b42 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	2201      	movs	r2, #1
 8002f76:	409a      	lsls	r2, r3
 8002f78:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <xTaskRemoveFromEventList+0xb0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <xTaskRemoveFromEventList+0xb0>)
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4a13      	ldr	r2, [pc, #76]	; (8002fdc <xTaskRemoveFromEventList+0xb4>)
 8002f90:	441a      	add	r2, r3
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	3304      	adds	r3, #4
 8002f96:	4619      	mov	r1, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f7fe fd75 	bl	8001a88 <vListInsertEnd>
 8002f9e:	e005      	b.n	8002fac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	3318      	adds	r3, #24
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	480e      	ldr	r0, [pc, #56]	; (8002fe0 <xTaskRemoveFromEventList+0xb8>)
 8002fa8:	f7fe fd6e 	bl	8001a88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <xTaskRemoveFromEventList+0xbc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d905      	bls.n	8002fc6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <xTaskRemoveFromEventList+0xc0>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e001      	b.n	8002fca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002fca:	697b      	ldr	r3, [r7, #20]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000478 	.word	0x20000478
 8002fd8:	20000458 	.word	0x20000458
 8002fdc:	20000354 	.word	0x20000354
 8002fe0:	20000410 	.word	0x20000410
 8002fe4:	20000350 	.word	0x20000350
 8002fe8:	20000464 	.word	0x20000464

08002fec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <vTaskInternalSetTimeOutState+0x24>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <vTaskInternalSetTimeOutState+0x28>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	605a      	str	r2, [r3, #4]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	20000468 	.word	0x20000468
 8003014:	20000454 	.word	0x20000454

08003018 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	613b      	str	r3, [r7, #16]
}
 800303a:	bf00      	nop
 800303c:	e7fe      	b.n	800303c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	60fb      	str	r3, [r7, #12]
}
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800305a:	f000 fc73 	bl	8003944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800305e:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <xTaskCheckForTimeOut+0xbc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d102      	bne.n	800307e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	e023      	b.n	80030c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <xTaskCheckForTimeOut+0xc0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d007      	beq.n	800309a <xTaskCheckForTimeOut+0x82>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	429a      	cmp	r2, r3
 8003092:	d302      	bcc.n	800309a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	e015      	b.n	80030c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d20b      	bcs.n	80030bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	1ad2      	subs	r2, r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ff9b 	bl	8002fec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e004      	b.n	80030c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80030c6:	f000 fc6d 	bl	80039a4 <vPortExitCritical>

	return xReturn;
 80030ca:	69fb      	ldr	r3, [r7, #28]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000454 	.word	0x20000454
 80030d8:	20000468 	.word	0x20000468

080030dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <vTaskMissedYield+0x14>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	20000464 	.word	0x20000464

080030f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030fc:	f000 f852 	bl	80031a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <prvIdleTask+0x28>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d9f9      	bls.n	80030fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <prvIdleTask+0x2c>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003118:	e7f0      	b.n	80030fc <prvIdleTask+0x8>
 800311a:	bf00      	nop
 800311c:	20000354 	.word	0x20000354
 8003120:	e000ed04 	.word	0xe000ed04

08003124 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	e00c      	b.n	800314a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <prvInitialiseTaskLists+0x60>)
 800313c:	4413      	add	r3, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fc75 	bl	8001a2e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3301      	adds	r3, #1
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b06      	cmp	r3, #6
 800314e:	d9ef      	bls.n	8003130 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003150:	480d      	ldr	r0, [pc, #52]	; (8003188 <prvInitialiseTaskLists+0x64>)
 8003152:	f7fe fc6c 	bl	8001a2e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003156:	480d      	ldr	r0, [pc, #52]	; (800318c <prvInitialiseTaskLists+0x68>)
 8003158:	f7fe fc69 	bl	8001a2e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800315c:	480c      	ldr	r0, [pc, #48]	; (8003190 <prvInitialiseTaskLists+0x6c>)
 800315e:	f7fe fc66 	bl	8001a2e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003162:	480c      	ldr	r0, [pc, #48]	; (8003194 <prvInitialiseTaskLists+0x70>)
 8003164:	f7fe fc63 	bl	8001a2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003168:	480b      	ldr	r0, [pc, #44]	; (8003198 <prvInitialiseTaskLists+0x74>)
 800316a:	f7fe fc60 	bl	8001a2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800316e:	4b0b      	ldr	r3, [pc, #44]	; (800319c <prvInitialiseTaskLists+0x78>)
 8003170:	4a05      	ldr	r2, [pc, #20]	; (8003188 <prvInitialiseTaskLists+0x64>)
 8003172:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003174:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <prvInitialiseTaskLists+0x7c>)
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <prvInitialiseTaskLists+0x68>)
 8003178:	601a      	str	r2, [r3, #0]
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000354 	.word	0x20000354
 8003188:	200003e0 	.word	0x200003e0
 800318c:	200003f4 	.word	0x200003f4
 8003190:	20000410 	.word	0x20000410
 8003194:	20000424 	.word	0x20000424
 8003198:	2000043c 	.word	0x2000043c
 800319c:	20000408 	.word	0x20000408
 80031a0:	2000040c 	.word	0x2000040c

080031a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031aa:	e019      	b.n	80031e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031ac:	f000 fbca 	bl	8003944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <prvCheckTasksWaitingTermination+0x50>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe fcc0 	bl	8001b42 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <prvCheckTasksWaitingTermination+0x54>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	4a0b      	ldr	r2, [pc, #44]	; (80031f8 <prvCheckTasksWaitingTermination+0x54>)
 80031ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <prvCheckTasksWaitingTermination+0x58>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <prvCheckTasksWaitingTermination+0x58>)
 80031d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031d6:	f000 fbe5 	bl	80039a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f810 	bl	8003200 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <prvCheckTasksWaitingTermination+0x58>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e1      	bne.n	80031ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000424 	.word	0x20000424
 80031f8:	20000450 	.word	0x20000450
 80031fc:	20000438 	.word	0x20000438

08003200 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	334c      	adds	r3, #76	; 0x4c
 800320c:	4618      	mov	r0, r3
 800320e:	f001 f873 	bl	80042f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003218:	2b00      	cmp	r3, #0
 800321a:	d108      	bne.n	800322e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fd3d 	bl	8003ca0 <vPortFree>
				vPortFree( pxTCB );
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fd3a 	bl	8003ca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800322c:	e018      	b.n	8003260 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003234:	2b01      	cmp	r3, #1
 8003236:	d103      	bne.n	8003240 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fd31 	bl	8003ca0 <vPortFree>
	}
 800323e:	e00f      	b.n	8003260 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003246:	2b02      	cmp	r3, #2
 8003248:	d00a      	beq.n	8003260 <prvDeleteTCB+0x60>
	__asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	60fb      	str	r3, [r7, #12]
}
 800325c:	bf00      	nop
 800325e:	e7fe      	b.n	800325e <prvDeleteTCB+0x5e>
	}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <prvResetNextTaskUnblockTime+0x38>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <prvResetNextTaskUnblockTime+0x3c>)
 800327a:	f04f 32ff 	mov.w	r2, #4294967295
 800327e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003280:	e008      	b.n	8003294 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <prvResetNextTaskUnblockTime+0x38>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <prvResetNextTaskUnblockTime+0x3c>)
 8003292:	6013      	str	r3, [r2, #0]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	20000408 	.word	0x20000408
 80032a4:	20000470 	.word	0x20000470

080032a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <xTaskGetSchedulerState+0x34>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032b6:	2301      	movs	r3, #1
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	e008      	b.n	80032ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <xTaskGetSchedulerState+0x38>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032c4:	2302      	movs	r3, #2
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	e001      	b.n	80032ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032ce:	687b      	ldr	r3, [r7, #4]
	}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	2000045c 	.word	0x2000045c
 80032e0:	20000478 	.word	0x20000478

080032e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d05e      	beq.n	80033b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <xTaskPriorityInherit+0xe0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	429a      	cmp	r2, r3
 8003306:	d24e      	bcs.n	80033a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	db06      	blt.n	800331e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003310:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <xTaskPriorityInherit+0xe0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f1c3 0207 	rsb	r2, r3, #7
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	6959      	ldr	r1, [r3, #20]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4a26      	ldr	r2, [pc, #152]	; (80033c8 <xTaskPriorityInherit+0xe4>)
 8003330:	4413      	add	r3, r2
 8003332:	4299      	cmp	r1, r3
 8003334:	d12f      	bne.n	8003396 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3304      	adds	r3, #4
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fc01 	bl	8001b42 <uxListRemove>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	2201      	movs	r2, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43da      	mvns	r2, r3
 8003352:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <xTaskPriorityInherit+0xe8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4013      	ands	r3, r2
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <xTaskPriorityInherit+0xe8>)
 800335a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <xTaskPriorityInherit+0xe0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	2201      	movs	r2, #1
 800336c:	409a      	lsls	r2, r3
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <xTaskPriorityInherit+0xe8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	4a15      	ldr	r2, [pc, #84]	; (80033cc <xTaskPriorityInherit+0xe8>)
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4a10      	ldr	r2, [pc, #64]	; (80033c8 <xTaskPriorityInherit+0xe4>)
 8003386:	441a      	add	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f7fe fb7a 	bl	8001a88 <vListInsertEnd>
 8003394:	e004      	b.n	80033a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <xTaskPriorityInherit+0xe0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	e008      	b.n	80033b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <xTaskPriorityInherit+0xe0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d201      	bcs.n	80033b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80033b4:	2301      	movs	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033b8:	68fb      	ldr	r3, [r7, #12]
	}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000350 	.word	0x20000350
 80033c8:	20000354 	.word	0x20000354
 80033cc:	20000458 	.word	0x20000458

080033d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d06e      	beq.n	80034c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80033e6:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <xTaskPriorityDisinherit+0x100>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d00a      	beq.n	8003406 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	60fb      	str	r3, [r7, #12]
}
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	60bb      	str	r3, [r7, #8]
}
 8003420:	bf00      	nop
 8003422:	e7fe      	b.n	8003422 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003428:	1e5a      	subs	r2, r3, #1
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	429a      	cmp	r2, r3
 8003438:	d044      	beq.n	80034c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343e:	2b00      	cmp	r3, #0
 8003440:	d140      	bne.n	80034c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	3304      	adds	r3, #4
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fb7b 	bl	8001b42 <uxListRemove>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d115      	bne.n	800347e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	491f      	ldr	r1, [pc, #124]	; (80034d4 <xTaskPriorityDisinherit+0x104>)
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <xTaskPriorityDisinherit+0xae>
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	2201      	movs	r2, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <xTaskPriorityDisinherit+0x108>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4013      	ands	r3, r2
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <xTaskPriorityDisinherit+0x108>)
 800347c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	f1c3 0207 	rsb	r2, r3, #7
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	2201      	movs	r2, #1
 8003498:	409a      	lsls	r2, r3
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <xTaskPriorityDisinherit+0x108>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <xTaskPriorityDisinherit+0x108>)
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <xTaskPriorityDisinherit+0x104>)
 80034b2:	441a      	add	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	3304      	adds	r3, #4
 80034b8:	4619      	mov	r1, r3
 80034ba:	4610      	mov	r0, r2
 80034bc:	f7fe fae4 	bl	8001a88 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80034c4:	697b      	ldr	r3, [r7, #20]
	}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000350 	.word	0x20000350
 80034d4:	20000354 	.word	0x20000354
 80034d8:	20000458 	.word	0x20000458

080034dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80034ea:	2301      	movs	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d077      	beq.n	80035e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	60fb      	str	r3, [r7, #12]
}
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d902      	bls.n	8003522 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	e002      	b.n	8003528 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	429a      	cmp	r2, r3
 8003530:	d058      	beq.n	80035e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	429a      	cmp	r2, r3
 800353a:	d153      	bne.n	80035e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	429a      	cmp	r2, r3
 8003544:	d10a      	bne.n	800355c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	60bb      	str	r3, [r7, #8]
}
 8003558:	bf00      	nop
 800355a:	e7fe      	b.n	800355a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	db04      	blt.n	800357a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f1c3 0207 	rsb	r2, r3, #7
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	6959      	ldr	r1, [r3, #20]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800358a:	4413      	add	r3, r2
 800358c:	4299      	cmp	r1, r3
 800358e:	d129      	bne.n	80035e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	3304      	adds	r3, #4
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe fad4 	bl	8001b42 <uxListRemove>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	2201      	movs	r2, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43da      	mvns	r2, r3
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4013      	ands	r3, r2
 80035b2:	4a10      	ldr	r2, [pc, #64]	; (80035f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80035b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	2201      	movs	r2, #1
 80035bc:	409a      	lsls	r2, r3
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80035d6:	441a      	add	r2, r3
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	3304      	adds	r3, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f7fe fa52 	bl	8001a88 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035e4:	bf00      	nop
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000350 	.word	0x20000350
 80035f0:	20000354 	.word	0x20000354
 80035f4:	20000458 	.word	0x20000458

080035f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80035fc:	4b07      	ldr	r3, [pc, #28]	; (800361c <pvTaskIncrementMutexHeldCount+0x24>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <pvTaskIncrementMutexHeldCount+0x24>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800360a:	3201      	adds	r2, #1
 800360c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800360e:	4b03      	ldr	r3, [pc, #12]	; (800361c <pvTaskIncrementMutexHeldCount+0x24>)
 8003610:	681b      	ldr	r3, [r3, #0]
	}
 8003612:	4618      	mov	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20000350 	.word	0x20000350

08003620 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3304      	adds	r3, #4
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fa83 	bl	8001b42 <uxListRemove>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10b      	bne.n	800365a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	2201      	movs	r2, #1
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43da      	mvns	r2, r3
 8003650:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4013      	ands	r3, r2
 8003656:	4a20      	ldr	r2, [pc, #128]	; (80036d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003658:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d10a      	bne.n	8003678 <prvAddCurrentTaskToDelayedList+0x58>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3304      	adds	r3, #4
 800366e:	4619      	mov	r1, r3
 8003670:	481a      	ldr	r0, [pc, #104]	; (80036dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003672:	f7fe fa09 	bl	8001a88 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003676:	e026      	b.n	80036c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	429a      	cmp	r2, r3
 800368e:	d209      	bcs.n	80036a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003690:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3304      	adds	r3, #4
 800369a:	4619      	mov	r1, r3
 800369c:	4610      	mov	r0, r2
 800369e:	f7fe fa17 	bl	8001ad0 <vListInsert>
}
 80036a2:	e010      	b.n	80036c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3304      	adds	r3, #4
 80036ae:	4619      	mov	r1, r3
 80036b0:	4610      	mov	r0, r2
 80036b2:	f7fe fa0d 	bl	8001ad0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d202      	bcs.n	80036c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80036c0:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	6013      	str	r3, [r2, #0]
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000454 	.word	0x20000454
 80036d4:	20000350 	.word	0x20000350
 80036d8:	20000458 	.word	0x20000458
 80036dc:	2000043c 	.word	0x2000043c
 80036e0:	2000040c 	.word	0x2000040c
 80036e4:	20000408 	.word	0x20000408
 80036e8:	20000470 	.word	0x20000470

080036ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3b04      	subs	r3, #4
 80036fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3b04      	subs	r3, #4
 800370a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f023 0201 	bic.w	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3b04      	subs	r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800371c:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <pxPortInitialiseStack+0x64>)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3b14      	subs	r3, #20
 8003726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3b04      	subs	r3, #4
 8003732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f06f 0202 	mvn.w	r2, #2
 800373a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3b20      	subs	r3, #32
 8003740:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	08003755 	.word	0x08003755

08003754 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <prvTaskExitError+0x54>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003766:	d00a      	beq.n	800377e <prvTaskExitError+0x2a>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	60fb      	str	r3, [r7, #12]
}
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <prvTaskExitError+0x28>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	60bb      	str	r3, [r7, #8]
}
 8003790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003792:	bf00      	nop
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0fc      	beq.n	8003794 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800379a:	bf00      	nop
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	2000000c 	.word	0x2000000c
 80037ac:	00000000 	.word	0x00000000

080037b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037b0:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <pxCurrentTCBConst2>)
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	6808      	ldr	r0, [r1, #0]
 80037b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ba:	f380 8809 	msr	PSP, r0
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f380 8811 	msr	BASEPRI, r0
 80037ca:	4770      	bx	lr
 80037cc:	f3af 8000 	nop.w

080037d0 <pxCurrentTCBConst2>:
 80037d0:	20000350 	.word	0x20000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop

080037d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037d8:	4808      	ldr	r0, [pc, #32]	; (80037fc <prvPortStartFirstTask+0x24>)
 80037da:	6800      	ldr	r0, [r0, #0]
 80037dc:	6800      	ldr	r0, [r0, #0]
 80037de:	f380 8808 	msr	MSP, r0
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f380 8814 	msr	CONTROL, r0
 80037ea:	b662      	cpsie	i
 80037ec:	b661      	cpsie	f
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	df00      	svc	0
 80037f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037fa:	bf00      	nop
 80037fc:	e000ed08 	.word	0xe000ed08

08003800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003806:	4b46      	ldr	r3, [pc, #280]	; (8003920 <xPortStartScheduler+0x120>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a46      	ldr	r2, [pc, #280]	; (8003924 <xPortStartScheduler+0x124>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10a      	bne.n	8003826 <xPortStartScheduler+0x26>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	613b      	str	r3, [r7, #16]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003826:	4b3e      	ldr	r3, [pc, #248]	; (8003920 <xPortStartScheduler+0x120>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <xPortStartScheduler+0x128>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d10a      	bne.n	8003846 <xPortStartScheduler+0x46>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60fb      	str	r3, [r7, #12]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003846:	4b39      	ldr	r3, [pc, #228]	; (800392c <xPortStartScheduler+0x12c>)
 8003848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	22ff      	movs	r2, #255	; 0xff
 8003856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <xPortStartScheduler+0x130>)
 800386c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800386e:	4b31      	ldr	r3, [pc, #196]	; (8003934 <xPortStartScheduler+0x134>)
 8003870:	2207      	movs	r2, #7
 8003872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003874:	e009      	b.n	800388a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003876:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <xPortStartScheduler+0x134>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3b01      	subs	r3, #1
 800387c:	4a2d      	ldr	r2, [pc, #180]	; (8003934 <xPortStartScheduler+0x134>)
 800387e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	b2db      	uxtb	r3, r3
 8003888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b80      	cmp	r3, #128	; 0x80
 8003894:	d0ef      	beq.n	8003876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003896:	4b27      	ldr	r3, [pc, #156]	; (8003934 <xPortStartScheduler+0x134>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1c3 0307 	rsb	r3, r3, #7
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d00a      	beq.n	80038b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	60bb      	str	r3, [r7, #8]
}
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <xPortStartScheduler+0x134>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <xPortStartScheduler+0x134>)
 80038c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <xPortStartScheduler+0x134>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038ca:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <xPortStartScheduler+0x134>)
 80038cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038d6:	4b18      	ldr	r3, [pc, #96]	; (8003938 <xPortStartScheduler+0x138>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a17      	ldr	r2, [pc, #92]	; (8003938 <xPortStartScheduler+0x138>)
 80038dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <xPortStartScheduler+0x138>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a14      	ldr	r2, [pc, #80]	; (8003938 <xPortStartScheduler+0x138>)
 80038e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80038ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038ee:	f000 f8dd 	bl	8003aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038f2:	4b12      	ldr	r3, [pc, #72]	; (800393c <xPortStartScheduler+0x13c>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80038f8:	f000 f8fc 	bl	8003af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <xPortStartScheduler+0x140>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0f      	ldr	r2, [pc, #60]	; (8003940 <xPortStartScheduler+0x140>)
 8003902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003908:	f7ff ff66 	bl	80037d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800390c:	f7ff fa86 	bl	8002e1c <vTaskSwitchContext>
	prvTaskExitError();
 8003910:	f7ff ff20 	bl	8003754 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	e000ed00 	.word	0xe000ed00
 8003924:	410fc271 	.word	0x410fc271
 8003928:	410fc270 	.word	0x410fc270
 800392c:	e000e400 	.word	0xe000e400
 8003930:	2000047c 	.word	0x2000047c
 8003934:	20000480 	.word	0x20000480
 8003938:	e000ed20 	.word	0xe000ed20
 800393c:	2000000c 	.word	0x2000000c
 8003940:	e000ef34 	.word	0xe000ef34

08003944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	607b      	str	r3, [r7, #4]
}
 800395c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <vPortEnterCritical+0x58>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3301      	adds	r3, #1
 8003964:	4a0d      	ldr	r2, [pc, #52]	; (800399c <vPortEnterCritical+0x58>)
 8003966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <vPortEnterCritical+0x58>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d10f      	bne.n	8003990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <vPortEnterCritical+0x5c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <vPortEnterCritical+0x4c>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	603b      	str	r3, [r7, #0]
}
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <vPortEnterCritical+0x4a>
	}
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	2000000c 	.word	0x2000000c
 80039a0:	e000ed04 	.word	0xe000ed04

080039a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <vPortExitCritical+0x50>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <vPortExitCritical+0x24>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	607b      	str	r3, [r7, #4]
}
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <vPortExitCritical+0x50>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <vPortExitCritical+0x50>)
 80039d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <vPortExitCritical+0x50>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d105      	bne.n	80039e6 <vPortExitCritical+0x42>
 80039da:	2300      	movs	r3, #0
 80039dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	2000000c 	.word	0x2000000c
	...

08003a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a00:	f3ef 8009 	mrs	r0, PSP
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <pxCurrentTCBConst>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	f01e 0f10 	tst.w	lr, #16
 8003a10:	bf08      	it	eq
 8003a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a1a:	6010      	str	r0, [r2, #0]
 8003a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a24:	f380 8811 	msr	BASEPRI, r0
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f7ff f9f4 	bl	8002e1c <vTaskSwitchContext>
 8003a34:	f04f 0000 	mov.w	r0, #0
 8003a38:	f380 8811 	msr	BASEPRI, r0
 8003a3c:	bc09      	pop	{r0, r3}
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	6808      	ldr	r0, [r1, #0]
 8003a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a46:	f01e 0f10 	tst.w	lr, #16
 8003a4a:	bf08      	it	eq
 8003a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a50:	f380 8809 	msr	PSP, r0
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	f3af 8000 	nop.w

08003a60 <pxCurrentTCBConst>:
 8003a60:	20000350 	.word	0x20000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop

08003a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	607b      	str	r3, [r7, #4]
}
 8003a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a82:	f7ff f913 	bl	8002cac <xTaskIncrementTick>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <xPortSysTickHandler+0x40>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f383 8811 	msr	BASEPRI, r3
}
 8003a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <vPortSetupTimerInterrupt+0x34>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <vPortSetupTimerInterrupt+0x38>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <vPortSetupTimerInterrupt+0x3c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <vPortSetupTimerInterrupt+0x40>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <vPortSetupTimerInterrupt+0x44>)
 8003aca:	3b01      	subs	r3, #1
 8003acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ace:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <vPortSetupTimerInterrupt+0x34>)
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	601a      	str	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	e000e010 	.word	0xe000e010
 8003ae4:	e000e018 	.word	0xe000e018
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	10624dd3 	.word	0x10624dd3
 8003af0:	e000e014 	.word	0xe000e014

08003af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b04 <vPortEnableVFP+0x10>
 8003af8:	6801      	ldr	r1, [r0, #0]
 8003afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003afe:	6001      	str	r1, [r0, #0]
 8003b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b02:	bf00      	nop
 8003b04:	e000ed88 	.word	0xe000ed88

08003b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b14:	f7ff f820 	bl	8002b58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b18:	4b5b      	ldr	r3, [pc, #364]	; (8003c88 <pvPortMalloc+0x180>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b20:	f000 f920 	bl	8003d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b24:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <pvPortMalloc+0x184>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 8093 	bne.w	8003c58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01d      	beq.n	8003b74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003b38:	2208      	movs	r2, #8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d014      	beq.n	8003b74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f023 0307 	bic.w	r3, r3, #7
 8003b50:	3308      	adds	r3, #8
 8003b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <pvPortMalloc+0x6c>
	__asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	617b      	str	r3, [r7, #20]
}
 8003b70:	bf00      	nop
 8003b72:	e7fe      	b.n	8003b72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d06e      	beq.n	8003c58 <pvPortMalloc+0x150>
 8003b7a:	4b45      	ldr	r3, [pc, #276]	; (8003c90 <pvPortMalloc+0x188>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d869      	bhi.n	8003c58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b84:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <pvPortMalloc+0x18c>)
 8003b86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b88:	4b42      	ldr	r3, [pc, #264]	; (8003c94 <pvPortMalloc+0x18c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b8e:	e004      	b.n	8003b9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d903      	bls.n	8003bac <pvPortMalloc+0xa4>
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f1      	bne.n	8003b90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003bac:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <pvPortMalloc+0x180>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d050      	beq.n	8003c58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2208      	movs	r2, #8
 8003bbc:	4413      	add	r3, r2
 8003bbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	1ad2      	subs	r2, r2, r3
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d91f      	bls.n	8003c18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <pvPortMalloc+0xf8>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	613b      	str	r3, [r7, #16]
}
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c12:	69b8      	ldr	r0, [r7, #24]
 8003c14:	f000 f908 	bl	8003e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <pvPortMalloc+0x188>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <pvPortMalloc+0x188>)
 8003c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <pvPortMalloc+0x188>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <pvPortMalloc+0x190>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d203      	bcs.n	8003c3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <pvPortMalloc+0x188>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <pvPortMalloc+0x190>)
 8003c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <pvPortMalloc+0x184>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003c4e:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <pvPortMalloc+0x194>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3301      	adds	r3, #1
 8003c54:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <pvPortMalloc+0x194>)
 8003c56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c58:	f7fe ff8c 	bl	8002b74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <pvPortMalloc+0x174>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	60fb      	str	r3, [r7, #12]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <pvPortMalloc+0x172>
	return pvReturn;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3728      	adds	r7, #40	; 0x28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20001238 	.word	0x20001238
 8003c8c:	2000124c 	.word	0x2000124c
 8003c90:	2000123c 	.word	0x2000123c
 8003c94:	20001230 	.word	0x20001230
 8003c98:	20001240 	.word	0x20001240
 8003c9c:	20001244 	.word	0x20001244

08003ca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d04d      	beq.n	8003d4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	425b      	negs	r3, r3
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4413      	add	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <vPortFree+0xb8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <vPortFree+0x44>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	60fb      	str	r3, [r7, #12]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <vPortFree+0x62>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	60bb      	str	r3, [r7, #8]
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <vPortFree+0xb8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01e      	beq.n	8003d4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11a      	bne.n	8003d4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <vPortFree+0xb8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	401a      	ands	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d28:	f7fe ff16 	bl	8002b58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <vPortFree+0xbc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <vPortFree+0xbc>)
 8003d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d3a:	6938      	ldr	r0, [r7, #16]
 8003d3c:	f000 f874 	bl	8003e28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003d40:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <vPortFree+0xc0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a06      	ldr	r2, [pc, #24]	; (8003d60 <vPortFree+0xc0>)
 8003d48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003d4a:	f7fe ff13 	bl	8002b74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	2000124c 	.word	0x2000124c
 8003d5c:	2000123c 	.word	0x2000123c
 8003d60:	20001248 	.word	0x20001248

08003d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d6a:	f640 53ac 	movw	r3, #3500	; 0xdac
 8003d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d70:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <prvHeapInit+0xac>)
 8003d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00c      	beq.n	8003d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3307      	adds	r3, #7
 8003d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0307 	bic.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <prvHeapInit+0xac>)
 8003d94:	4413      	add	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <prvHeapInit+0xb0>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003da2:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <prvHeapInit+0xb0>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	4413      	add	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003db0:	2208      	movs	r2, #8
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0307 	bic.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <prvHeapInit+0xb4>)
 8003dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <prvHeapInit+0xb4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <prvHeapInit+0xb4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	1ad2      	subs	r2, r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <prvHeapInit+0xb4>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <prvHeapInit+0xb8>)
 8003df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <prvHeapInit+0xbc>)
 8003dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <prvHeapInit+0xc0>)
 8003dfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e02:	601a      	str	r2, [r3, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	20000484 	.word	0x20000484
 8003e14:	20001230 	.word	0x20001230
 8003e18:	20001238 	.word	0x20001238
 8003e1c:	20001240 	.word	0x20001240
 8003e20:	2000123c 	.word	0x2000123c
 8003e24:	2000124c 	.word	0x2000124c

08003e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e30:	4b28      	ldr	r3, [pc, #160]	; (8003ed4 <prvInsertBlockIntoFreeList+0xac>)
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e002      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x14>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d8f7      	bhi.n	8003e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	4413      	add	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d108      	bne.n	8003e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	441a      	add	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	441a      	add	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d118      	bne.n	8003eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d00d      	beq.n	8003ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e008      	b.n	8003eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e003      	b.n	8003eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d002      	beq.n	8003ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20001230 	.word	0x20001230
 8003ed8:	20001238 	.word	0x20001238

08003edc <std>:
 8003edc:	2300      	movs	r3, #0
 8003ede:	b510      	push	{r4, lr}
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eea:	6083      	str	r3, [r0, #8]
 8003eec:	8181      	strh	r1, [r0, #12]
 8003eee:	6643      	str	r3, [r0, #100]	; 0x64
 8003ef0:	81c2      	strh	r2, [r0, #14]
 8003ef2:	6183      	str	r3, [r0, #24]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	305c      	adds	r0, #92	; 0x5c
 8003efa:	f000 f9e5 	bl	80042c8 <memset>
 8003efe:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <std+0x38>)
 8003f00:	6263      	str	r3, [r4, #36]	; 0x24
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <std+0x3c>)
 8003f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <std+0x40>)
 8003f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <std+0x44>)
 8003f0c:	6224      	str	r4, [r4, #32]
 8003f0e:	6323      	str	r3, [r4, #48]	; 0x30
 8003f10:	bd10      	pop	{r4, pc}
 8003f12:	bf00      	nop
 8003f14:	08004119 	.word	0x08004119
 8003f18:	0800413b 	.word	0x0800413b
 8003f1c:	08004173 	.word	0x08004173
 8003f20:	08004197 	.word	0x08004197

08003f24 <stdio_exit_handler>:
 8003f24:	4a02      	ldr	r2, [pc, #8]	; (8003f30 <stdio_exit_handler+0xc>)
 8003f26:	4903      	ldr	r1, [pc, #12]	; (8003f34 <stdio_exit_handler+0x10>)
 8003f28:	4803      	ldr	r0, [pc, #12]	; (8003f38 <stdio_exit_handler+0x14>)
 8003f2a:	f000 b869 	b.w	8004000 <_fwalk_sglue>
 8003f2e:	bf00      	nop
 8003f30:	20000010 	.word	0x20000010
 8003f34:	08004d29 	.word	0x08004d29
 8003f38:	2000001c 	.word	0x2000001c

08003f3c <cleanup_stdio>:
 8003f3c:	6841      	ldr	r1, [r0, #4]
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <cleanup_stdio+0x34>)
 8003f40:	4299      	cmp	r1, r3
 8003f42:	b510      	push	{r4, lr}
 8003f44:	4604      	mov	r4, r0
 8003f46:	d001      	beq.n	8003f4c <cleanup_stdio+0x10>
 8003f48:	f000 feee 	bl	8004d28 <_fflush_r>
 8003f4c:	68a1      	ldr	r1, [r4, #8]
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <cleanup_stdio+0x38>)
 8003f50:	4299      	cmp	r1, r3
 8003f52:	d002      	beq.n	8003f5a <cleanup_stdio+0x1e>
 8003f54:	4620      	mov	r0, r4
 8003f56:	f000 fee7 	bl	8004d28 <_fflush_r>
 8003f5a:	68e1      	ldr	r1, [r4, #12]
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <cleanup_stdio+0x3c>)
 8003f5e:	4299      	cmp	r1, r3
 8003f60:	d004      	beq.n	8003f6c <cleanup_stdio+0x30>
 8003f62:	4620      	mov	r0, r4
 8003f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f68:	f000 bede 	b.w	8004d28 <_fflush_r>
 8003f6c:	bd10      	pop	{r4, pc}
 8003f6e:	bf00      	nop
 8003f70:	20001250 	.word	0x20001250
 8003f74:	200012b8 	.word	0x200012b8
 8003f78:	20001320 	.word	0x20001320

08003f7c <global_stdio_init.part.0>:
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <global_stdio_init.part.0+0x30>)
 8003f80:	4c0b      	ldr	r4, [pc, #44]	; (8003fb0 <global_stdio_init.part.0+0x34>)
 8003f82:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <global_stdio_init.part.0+0x38>)
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	4620      	mov	r0, r4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2104      	movs	r1, #4
 8003f8c:	f7ff ffa6 	bl	8003edc <std>
 8003f90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003f94:	2201      	movs	r2, #1
 8003f96:	2109      	movs	r1, #9
 8003f98:	f7ff ffa0 	bl	8003edc <std>
 8003f9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa6:	2112      	movs	r1, #18
 8003fa8:	f7ff bf98 	b.w	8003edc <std>
 8003fac:	20001388 	.word	0x20001388
 8003fb0:	20001250 	.word	0x20001250
 8003fb4:	08003f25 	.word	0x08003f25

08003fb8 <__sfp_lock_acquire>:
 8003fb8:	4801      	ldr	r0, [pc, #4]	; (8003fc0 <__sfp_lock_acquire+0x8>)
 8003fba:	f000 ba53 	b.w	8004464 <__retarget_lock_acquire_recursive>
 8003fbe:	bf00      	nop
 8003fc0:	20001391 	.word	0x20001391

08003fc4 <__sfp_lock_release>:
 8003fc4:	4801      	ldr	r0, [pc, #4]	; (8003fcc <__sfp_lock_release+0x8>)
 8003fc6:	f000 ba4e 	b.w	8004466 <__retarget_lock_release_recursive>
 8003fca:	bf00      	nop
 8003fcc:	20001391 	.word	0x20001391

08003fd0 <__sinit>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	f7ff fff0 	bl	8003fb8 <__sfp_lock_acquire>
 8003fd8:	6a23      	ldr	r3, [r4, #32]
 8003fda:	b11b      	cbz	r3, 8003fe4 <__sinit+0x14>
 8003fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fe0:	f7ff bff0 	b.w	8003fc4 <__sfp_lock_release>
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <__sinit+0x28>)
 8003fe6:	6223      	str	r3, [r4, #32]
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <__sinit+0x2c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f5      	bne.n	8003fdc <__sinit+0xc>
 8003ff0:	f7ff ffc4 	bl	8003f7c <global_stdio_init.part.0>
 8003ff4:	e7f2      	b.n	8003fdc <__sinit+0xc>
 8003ff6:	bf00      	nop
 8003ff8:	08003f3d 	.word	0x08003f3d
 8003ffc:	20001388 	.word	0x20001388

08004000 <_fwalk_sglue>:
 8004000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004004:	4607      	mov	r7, r0
 8004006:	4688      	mov	r8, r1
 8004008:	4614      	mov	r4, r2
 800400a:	2600      	movs	r6, #0
 800400c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004010:	f1b9 0901 	subs.w	r9, r9, #1
 8004014:	d505      	bpl.n	8004022 <_fwalk_sglue+0x22>
 8004016:	6824      	ldr	r4, [r4, #0]
 8004018:	2c00      	cmp	r4, #0
 800401a:	d1f7      	bne.n	800400c <_fwalk_sglue+0xc>
 800401c:	4630      	mov	r0, r6
 800401e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004022:	89ab      	ldrh	r3, [r5, #12]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d907      	bls.n	8004038 <_fwalk_sglue+0x38>
 8004028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800402c:	3301      	adds	r3, #1
 800402e:	d003      	beq.n	8004038 <_fwalk_sglue+0x38>
 8004030:	4629      	mov	r1, r5
 8004032:	4638      	mov	r0, r7
 8004034:	47c0      	blx	r8
 8004036:	4306      	orrs	r6, r0
 8004038:	3568      	adds	r5, #104	; 0x68
 800403a:	e7e9      	b.n	8004010 <_fwalk_sglue+0x10>

0800403c <iprintf>:
 800403c:	b40f      	push	{r0, r1, r2, r3}
 800403e:	b507      	push	{r0, r1, r2, lr}
 8004040:	4906      	ldr	r1, [pc, #24]	; (800405c <iprintf+0x20>)
 8004042:	ab04      	add	r3, sp, #16
 8004044:	6808      	ldr	r0, [r1, #0]
 8004046:	f853 2b04 	ldr.w	r2, [r3], #4
 800404a:	6881      	ldr	r1, [r0, #8]
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	f000 fb3b 	bl	80046c8 <_vfiprintf_r>
 8004052:	b003      	add	sp, #12
 8004054:	f85d eb04 	ldr.w	lr, [sp], #4
 8004058:	b004      	add	sp, #16
 800405a:	4770      	bx	lr
 800405c:	20000068 	.word	0x20000068

08004060 <_puts_r>:
 8004060:	6a03      	ldr	r3, [r0, #32]
 8004062:	b570      	push	{r4, r5, r6, lr}
 8004064:	6884      	ldr	r4, [r0, #8]
 8004066:	4605      	mov	r5, r0
 8004068:	460e      	mov	r6, r1
 800406a:	b90b      	cbnz	r3, 8004070 <_puts_r+0x10>
 800406c:	f7ff ffb0 	bl	8003fd0 <__sinit>
 8004070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004072:	07db      	lsls	r3, r3, #31
 8004074:	d405      	bmi.n	8004082 <_puts_r+0x22>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	0598      	lsls	r0, r3, #22
 800407a:	d402      	bmi.n	8004082 <_puts_r+0x22>
 800407c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800407e:	f000 f9f1 	bl	8004464 <__retarget_lock_acquire_recursive>
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	0719      	lsls	r1, r3, #28
 8004086:	d513      	bpl.n	80040b0 <_puts_r+0x50>
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	b18b      	cbz	r3, 80040b0 <_puts_r+0x50>
 800408c:	3e01      	subs	r6, #1
 800408e:	68a3      	ldr	r3, [r4, #8]
 8004090:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004094:	3b01      	subs	r3, #1
 8004096:	60a3      	str	r3, [r4, #8]
 8004098:	b9e9      	cbnz	r1, 80040d6 <_puts_r+0x76>
 800409a:	2b00      	cmp	r3, #0
 800409c:	da2e      	bge.n	80040fc <_puts_r+0x9c>
 800409e:	4622      	mov	r2, r4
 80040a0:	210a      	movs	r1, #10
 80040a2:	4628      	mov	r0, r5
 80040a4:	f000 f87b 	bl	800419e <__swbuf_r>
 80040a8:	3001      	adds	r0, #1
 80040aa:	d007      	beq.n	80040bc <_puts_r+0x5c>
 80040ac:	250a      	movs	r5, #10
 80040ae:	e007      	b.n	80040c0 <_puts_r+0x60>
 80040b0:	4621      	mov	r1, r4
 80040b2:	4628      	mov	r0, r5
 80040b4:	f000 f8b0 	bl	8004218 <__swsetup_r>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d0e7      	beq.n	800408c <_puts_r+0x2c>
 80040bc:	f04f 35ff 	mov.w	r5, #4294967295
 80040c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040c2:	07da      	lsls	r2, r3, #31
 80040c4:	d405      	bmi.n	80040d2 <_puts_r+0x72>
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	059b      	lsls	r3, r3, #22
 80040ca:	d402      	bmi.n	80040d2 <_puts_r+0x72>
 80040cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ce:	f000 f9ca 	bl	8004466 <__retarget_lock_release_recursive>
 80040d2:	4628      	mov	r0, r5
 80040d4:	bd70      	pop	{r4, r5, r6, pc}
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da04      	bge.n	80040e4 <_puts_r+0x84>
 80040da:	69a2      	ldr	r2, [r4, #24]
 80040dc:	429a      	cmp	r2, r3
 80040de:	dc06      	bgt.n	80040ee <_puts_r+0x8e>
 80040e0:	290a      	cmp	r1, #10
 80040e2:	d004      	beq.n	80040ee <_puts_r+0x8e>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	6022      	str	r2, [r4, #0]
 80040ea:	7019      	strb	r1, [r3, #0]
 80040ec:	e7cf      	b.n	800408e <_puts_r+0x2e>
 80040ee:	4622      	mov	r2, r4
 80040f0:	4628      	mov	r0, r5
 80040f2:	f000 f854 	bl	800419e <__swbuf_r>
 80040f6:	3001      	adds	r0, #1
 80040f8:	d1c9      	bne.n	800408e <_puts_r+0x2e>
 80040fa:	e7df      	b.n	80040bc <_puts_r+0x5c>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	250a      	movs	r5, #10
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	6022      	str	r2, [r4, #0]
 8004104:	701d      	strb	r5, [r3, #0]
 8004106:	e7db      	b.n	80040c0 <_puts_r+0x60>

08004108 <puts>:
 8004108:	4b02      	ldr	r3, [pc, #8]	; (8004114 <puts+0xc>)
 800410a:	4601      	mov	r1, r0
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	f7ff bfa7 	b.w	8004060 <_puts_r>
 8004112:	bf00      	nop
 8004114:	20000068 	.word	0x20000068

08004118 <__sread>:
 8004118:	b510      	push	{r4, lr}
 800411a:	460c      	mov	r4, r1
 800411c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004120:	f000 f952 	bl	80043c8 <_read_r>
 8004124:	2800      	cmp	r0, #0
 8004126:	bfab      	itete	ge
 8004128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800412a:	89a3      	ldrhlt	r3, [r4, #12]
 800412c:	181b      	addge	r3, r3, r0
 800412e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004132:	bfac      	ite	ge
 8004134:	6563      	strge	r3, [r4, #84]	; 0x54
 8004136:	81a3      	strhlt	r3, [r4, #12]
 8004138:	bd10      	pop	{r4, pc}

0800413a <__swrite>:
 800413a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413e:	461f      	mov	r7, r3
 8004140:	898b      	ldrh	r3, [r1, #12]
 8004142:	05db      	lsls	r3, r3, #23
 8004144:	4605      	mov	r5, r0
 8004146:	460c      	mov	r4, r1
 8004148:	4616      	mov	r6, r2
 800414a:	d505      	bpl.n	8004158 <__swrite+0x1e>
 800414c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004150:	2302      	movs	r3, #2
 8004152:	2200      	movs	r2, #0
 8004154:	f000 f926 	bl	80043a4 <_lseek_r>
 8004158:	89a3      	ldrh	r3, [r4, #12]
 800415a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800415e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004162:	81a3      	strh	r3, [r4, #12]
 8004164:	4632      	mov	r2, r6
 8004166:	463b      	mov	r3, r7
 8004168:	4628      	mov	r0, r5
 800416a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800416e:	f000 b93d 	b.w	80043ec <_write_r>

08004172 <__sseek>:
 8004172:	b510      	push	{r4, lr}
 8004174:	460c      	mov	r4, r1
 8004176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800417a:	f000 f913 	bl	80043a4 <_lseek_r>
 800417e:	1c43      	adds	r3, r0, #1
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	bf15      	itete	ne
 8004184:	6560      	strne	r0, [r4, #84]	; 0x54
 8004186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800418a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800418e:	81a3      	strheq	r3, [r4, #12]
 8004190:	bf18      	it	ne
 8004192:	81a3      	strhne	r3, [r4, #12]
 8004194:	bd10      	pop	{r4, pc}

08004196 <__sclose>:
 8004196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419a:	f000 b89d 	b.w	80042d8 <_close_r>

0800419e <__swbuf_r>:
 800419e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a0:	460e      	mov	r6, r1
 80041a2:	4614      	mov	r4, r2
 80041a4:	4605      	mov	r5, r0
 80041a6:	b118      	cbz	r0, 80041b0 <__swbuf_r+0x12>
 80041a8:	6a03      	ldr	r3, [r0, #32]
 80041aa:	b90b      	cbnz	r3, 80041b0 <__swbuf_r+0x12>
 80041ac:	f7ff ff10 	bl	8003fd0 <__sinit>
 80041b0:	69a3      	ldr	r3, [r4, #24]
 80041b2:	60a3      	str	r3, [r4, #8]
 80041b4:	89a3      	ldrh	r3, [r4, #12]
 80041b6:	071a      	lsls	r2, r3, #28
 80041b8:	d525      	bpl.n	8004206 <__swbuf_r+0x68>
 80041ba:	6923      	ldr	r3, [r4, #16]
 80041bc:	b31b      	cbz	r3, 8004206 <__swbuf_r+0x68>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	6922      	ldr	r2, [r4, #16]
 80041c2:	1a98      	subs	r0, r3, r2
 80041c4:	6963      	ldr	r3, [r4, #20]
 80041c6:	b2f6      	uxtb	r6, r6
 80041c8:	4283      	cmp	r3, r0
 80041ca:	4637      	mov	r7, r6
 80041cc:	dc04      	bgt.n	80041d8 <__swbuf_r+0x3a>
 80041ce:	4621      	mov	r1, r4
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 fda9 	bl	8004d28 <_fflush_r>
 80041d6:	b9e0      	cbnz	r0, 8004212 <__swbuf_r+0x74>
 80041d8:	68a3      	ldr	r3, [r4, #8]
 80041da:	3b01      	subs	r3, #1
 80041dc:	60a3      	str	r3, [r4, #8]
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	6022      	str	r2, [r4, #0]
 80041e4:	701e      	strb	r6, [r3, #0]
 80041e6:	6962      	ldr	r2, [r4, #20]
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d004      	beq.n	80041f8 <__swbuf_r+0x5a>
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	07db      	lsls	r3, r3, #31
 80041f2:	d506      	bpl.n	8004202 <__swbuf_r+0x64>
 80041f4:	2e0a      	cmp	r6, #10
 80041f6:	d104      	bne.n	8004202 <__swbuf_r+0x64>
 80041f8:	4621      	mov	r1, r4
 80041fa:	4628      	mov	r0, r5
 80041fc:	f000 fd94 	bl	8004d28 <_fflush_r>
 8004200:	b938      	cbnz	r0, 8004212 <__swbuf_r+0x74>
 8004202:	4638      	mov	r0, r7
 8004204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004206:	4621      	mov	r1, r4
 8004208:	4628      	mov	r0, r5
 800420a:	f000 f805 	bl	8004218 <__swsetup_r>
 800420e:	2800      	cmp	r0, #0
 8004210:	d0d5      	beq.n	80041be <__swbuf_r+0x20>
 8004212:	f04f 37ff 	mov.w	r7, #4294967295
 8004216:	e7f4      	b.n	8004202 <__swbuf_r+0x64>

08004218 <__swsetup_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <__swsetup_r+0xac>)
 800421c:	4605      	mov	r5, r0
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	460c      	mov	r4, r1
 8004222:	b118      	cbz	r0, 800422c <__swsetup_r+0x14>
 8004224:	6a03      	ldr	r3, [r0, #32]
 8004226:	b90b      	cbnz	r3, 800422c <__swsetup_r+0x14>
 8004228:	f7ff fed2 	bl	8003fd0 <__sinit>
 800422c:	89a3      	ldrh	r3, [r4, #12]
 800422e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004232:	0718      	lsls	r0, r3, #28
 8004234:	d422      	bmi.n	800427c <__swsetup_r+0x64>
 8004236:	06d9      	lsls	r1, r3, #27
 8004238:	d407      	bmi.n	800424a <__swsetup_r+0x32>
 800423a:	2309      	movs	r3, #9
 800423c:	602b      	str	r3, [r5, #0]
 800423e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004242:	81a3      	strh	r3, [r4, #12]
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	e034      	b.n	80042b4 <__swsetup_r+0x9c>
 800424a:	0758      	lsls	r0, r3, #29
 800424c:	d512      	bpl.n	8004274 <__swsetup_r+0x5c>
 800424e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004250:	b141      	cbz	r1, 8004264 <__swsetup_r+0x4c>
 8004252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004256:	4299      	cmp	r1, r3
 8004258:	d002      	beq.n	8004260 <__swsetup_r+0x48>
 800425a:	4628      	mov	r0, r5
 800425c:	f000 f912 	bl	8004484 <_free_r>
 8004260:	2300      	movs	r3, #0
 8004262:	6363      	str	r3, [r4, #52]	; 0x34
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800426a:	81a3      	strh	r3, [r4, #12]
 800426c:	2300      	movs	r3, #0
 800426e:	6063      	str	r3, [r4, #4]
 8004270:	6923      	ldr	r3, [r4, #16]
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	f043 0308 	orr.w	r3, r3, #8
 800427a:	81a3      	strh	r3, [r4, #12]
 800427c:	6923      	ldr	r3, [r4, #16]
 800427e:	b94b      	cbnz	r3, 8004294 <__swsetup_r+0x7c>
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428a:	d003      	beq.n	8004294 <__swsetup_r+0x7c>
 800428c:	4621      	mov	r1, r4
 800428e:	4628      	mov	r0, r5
 8004290:	f000 fd98 	bl	8004dc4 <__smakebuf_r>
 8004294:	89a0      	ldrh	r0, [r4, #12]
 8004296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800429a:	f010 0301 	ands.w	r3, r0, #1
 800429e:	d00a      	beq.n	80042b6 <__swsetup_r+0x9e>
 80042a0:	2300      	movs	r3, #0
 80042a2:	60a3      	str	r3, [r4, #8]
 80042a4:	6963      	ldr	r3, [r4, #20]
 80042a6:	425b      	negs	r3, r3
 80042a8:	61a3      	str	r3, [r4, #24]
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	b943      	cbnz	r3, 80042c0 <__swsetup_r+0xa8>
 80042ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042b2:	d1c4      	bne.n	800423e <__swsetup_r+0x26>
 80042b4:	bd38      	pop	{r3, r4, r5, pc}
 80042b6:	0781      	lsls	r1, r0, #30
 80042b8:	bf58      	it	pl
 80042ba:	6963      	ldrpl	r3, [r4, #20]
 80042bc:	60a3      	str	r3, [r4, #8]
 80042be:	e7f4      	b.n	80042aa <__swsetup_r+0x92>
 80042c0:	2000      	movs	r0, #0
 80042c2:	e7f7      	b.n	80042b4 <__swsetup_r+0x9c>
 80042c4:	20000068 	.word	0x20000068

080042c8 <memset>:
 80042c8:	4402      	add	r2, r0
 80042ca:	4603      	mov	r3, r0
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d100      	bne.n	80042d2 <memset+0xa>
 80042d0:	4770      	bx	lr
 80042d2:	f803 1b01 	strb.w	r1, [r3], #1
 80042d6:	e7f9      	b.n	80042cc <memset+0x4>

080042d8 <_close_r>:
 80042d8:	b538      	push	{r3, r4, r5, lr}
 80042da:	4d06      	ldr	r5, [pc, #24]	; (80042f4 <_close_r+0x1c>)
 80042dc:	2300      	movs	r3, #0
 80042de:	4604      	mov	r4, r0
 80042e0:	4608      	mov	r0, r1
 80042e2:	602b      	str	r3, [r5, #0]
 80042e4:	f7fc fa7e 	bl	80007e4 <_close>
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	d102      	bne.n	80042f2 <_close_r+0x1a>
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	b103      	cbz	r3, 80042f2 <_close_r+0x1a>
 80042f0:	6023      	str	r3, [r4, #0]
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
 80042f4:	2000138c 	.word	0x2000138c

080042f8 <_reclaim_reent>:
 80042f8:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <_reclaim_reent+0xa8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4283      	cmp	r3, r0
 80042fe:	b570      	push	{r4, r5, r6, lr}
 8004300:	4604      	mov	r4, r0
 8004302:	d04b      	beq.n	800439c <_reclaim_reent+0xa4>
 8004304:	69c3      	ldr	r3, [r0, #28]
 8004306:	b143      	cbz	r3, 800431a <_reclaim_reent+0x22>
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d144      	bne.n	8004398 <_reclaim_reent+0xa0>
 800430e:	69e3      	ldr	r3, [r4, #28]
 8004310:	6819      	ldr	r1, [r3, #0]
 8004312:	b111      	cbz	r1, 800431a <_reclaim_reent+0x22>
 8004314:	4620      	mov	r0, r4
 8004316:	f000 f8b5 	bl	8004484 <_free_r>
 800431a:	6961      	ldr	r1, [r4, #20]
 800431c:	b111      	cbz	r1, 8004324 <_reclaim_reent+0x2c>
 800431e:	4620      	mov	r0, r4
 8004320:	f000 f8b0 	bl	8004484 <_free_r>
 8004324:	69e1      	ldr	r1, [r4, #28]
 8004326:	b111      	cbz	r1, 800432e <_reclaim_reent+0x36>
 8004328:	4620      	mov	r0, r4
 800432a:	f000 f8ab 	bl	8004484 <_free_r>
 800432e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004330:	b111      	cbz	r1, 8004338 <_reclaim_reent+0x40>
 8004332:	4620      	mov	r0, r4
 8004334:	f000 f8a6 	bl	8004484 <_free_r>
 8004338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800433a:	b111      	cbz	r1, 8004342 <_reclaim_reent+0x4a>
 800433c:	4620      	mov	r0, r4
 800433e:	f000 f8a1 	bl	8004484 <_free_r>
 8004342:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004344:	b111      	cbz	r1, 800434c <_reclaim_reent+0x54>
 8004346:	4620      	mov	r0, r4
 8004348:	f000 f89c 	bl	8004484 <_free_r>
 800434c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800434e:	b111      	cbz	r1, 8004356 <_reclaim_reent+0x5e>
 8004350:	4620      	mov	r0, r4
 8004352:	f000 f897 	bl	8004484 <_free_r>
 8004356:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004358:	b111      	cbz	r1, 8004360 <_reclaim_reent+0x68>
 800435a:	4620      	mov	r0, r4
 800435c:	f000 f892 	bl	8004484 <_free_r>
 8004360:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004362:	b111      	cbz	r1, 800436a <_reclaim_reent+0x72>
 8004364:	4620      	mov	r0, r4
 8004366:	f000 f88d 	bl	8004484 <_free_r>
 800436a:	6a23      	ldr	r3, [r4, #32]
 800436c:	b1b3      	cbz	r3, 800439c <_reclaim_reent+0xa4>
 800436e:	4620      	mov	r0, r4
 8004370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004374:	4718      	bx	r3
 8004376:	5949      	ldr	r1, [r1, r5]
 8004378:	b941      	cbnz	r1, 800438c <_reclaim_reent+0x94>
 800437a:	3504      	adds	r5, #4
 800437c:	69e3      	ldr	r3, [r4, #28]
 800437e:	2d80      	cmp	r5, #128	; 0x80
 8004380:	68d9      	ldr	r1, [r3, #12]
 8004382:	d1f8      	bne.n	8004376 <_reclaim_reent+0x7e>
 8004384:	4620      	mov	r0, r4
 8004386:	f000 f87d 	bl	8004484 <_free_r>
 800438a:	e7c0      	b.n	800430e <_reclaim_reent+0x16>
 800438c:	680e      	ldr	r6, [r1, #0]
 800438e:	4620      	mov	r0, r4
 8004390:	f000 f878 	bl	8004484 <_free_r>
 8004394:	4631      	mov	r1, r6
 8004396:	e7ef      	b.n	8004378 <_reclaim_reent+0x80>
 8004398:	2500      	movs	r5, #0
 800439a:	e7ef      	b.n	800437c <_reclaim_reent+0x84>
 800439c:	bd70      	pop	{r4, r5, r6, pc}
 800439e:	bf00      	nop
 80043a0:	20000068 	.word	0x20000068

080043a4 <_lseek_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4d07      	ldr	r5, [pc, #28]	; (80043c4 <_lseek_r+0x20>)
 80043a8:	4604      	mov	r4, r0
 80043aa:	4608      	mov	r0, r1
 80043ac:	4611      	mov	r1, r2
 80043ae:	2200      	movs	r2, #0
 80043b0:	602a      	str	r2, [r5, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f7fc fa3d 	bl	8000832 <_lseek>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d102      	bne.n	80043c2 <_lseek_r+0x1e>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	b103      	cbz	r3, 80043c2 <_lseek_r+0x1e>
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	2000138c 	.word	0x2000138c

080043c8 <_read_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4d07      	ldr	r5, [pc, #28]	; (80043e8 <_read_r+0x20>)
 80043cc:	4604      	mov	r4, r0
 80043ce:	4608      	mov	r0, r1
 80043d0:	4611      	mov	r1, r2
 80043d2:	2200      	movs	r2, #0
 80043d4:	602a      	str	r2, [r5, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f7fc f9e7 	bl	80007aa <_read>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_read_r+0x1e>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_read_r+0x1e>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	2000138c 	.word	0x2000138c

080043ec <_write_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4d07      	ldr	r5, [pc, #28]	; (800440c <_write_r+0x20>)
 80043f0:	4604      	mov	r4, r0
 80043f2:	4608      	mov	r0, r1
 80043f4:	4611      	mov	r1, r2
 80043f6:	2200      	movs	r2, #0
 80043f8:	602a      	str	r2, [r5, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f7fb ff79 	bl	80002f2 <_write>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d102      	bne.n	800440a <_write_r+0x1e>
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	b103      	cbz	r3, 800440a <_write_r+0x1e>
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	bd38      	pop	{r3, r4, r5, pc}
 800440c:	2000138c 	.word	0x2000138c

08004410 <__errno>:
 8004410:	4b01      	ldr	r3, [pc, #4]	; (8004418 <__errno+0x8>)
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000068 	.word	0x20000068

0800441c <__libc_init_array>:
 800441c:	b570      	push	{r4, r5, r6, lr}
 800441e:	4d0d      	ldr	r5, [pc, #52]	; (8004454 <__libc_init_array+0x38>)
 8004420:	4c0d      	ldr	r4, [pc, #52]	; (8004458 <__libc_init_array+0x3c>)
 8004422:	1b64      	subs	r4, r4, r5
 8004424:	10a4      	asrs	r4, r4, #2
 8004426:	2600      	movs	r6, #0
 8004428:	42a6      	cmp	r6, r4
 800442a:	d109      	bne.n	8004440 <__libc_init_array+0x24>
 800442c:	4d0b      	ldr	r5, [pc, #44]	; (800445c <__libc_init_array+0x40>)
 800442e:	4c0c      	ldr	r4, [pc, #48]	; (8004460 <__libc_init_array+0x44>)
 8004430:	f000 fd36 	bl	8004ea0 <_init>
 8004434:	1b64      	subs	r4, r4, r5
 8004436:	10a4      	asrs	r4, r4, #2
 8004438:	2600      	movs	r6, #0
 800443a:	42a6      	cmp	r6, r4
 800443c:	d105      	bne.n	800444a <__libc_init_array+0x2e>
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	f855 3b04 	ldr.w	r3, [r5], #4
 8004444:	4798      	blx	r3
 8004446:	3601      	adds	r6, #1
 8004448:	e7ee      	b.n	8004428 <__libc_init_array+0xc>
 800444a:	f855 3b04 	ldr.w	r3, [r5], #4
 800444e:	4798      	blx	r3
 8004450:	3601      	adds	r6, #1
 8004452:	e7f2      	b.n	800443a <__libc_init_array+0x1e>
 8004454:	08005124 	.word	0x08005124
 8004458:	08005124 	.word	0x08005124
 800445c:	08005124 	.word	0x08005124
 8004460:	08005128 	.word	0x08005128

08004464 <__retarget_lock_acquire_recursive>:
 8004464:	4770      	bx	lr

08004466 <__retarget_lock_release_recursive>:
 8004466:	4770      	bx	lr

08004468 <memcpy>:
 8004468:	440a      	add	r2, r1
 800446a:	4291      	cmp	r1, r2
 800446c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004470:	d100      	bne.n	8004474 <memcpy+0xc>
 8004472:	4770      	bx	lr
 8004474:	b510      	push	{r4, lr}
 8004476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800447a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800447e:	4291      	cmp	r1, r2
 8004480:	d1f9      	bne.n	8004476 <memcpy+0xe>
 8004482:	bd10      	pop	{r4, pc}

08004484 <_free_r>:
 8004484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004486:	2900      	cmp	r1, #0
 8004488:	d044      	beq.n	8004514 <_free_r+0x90>
 800448a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800448e:	9001      	str	r0, [sp, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f1a1 0404 	sub.w	r4, r1, #4
 8004496:	bfb8      	it	lt
 8004498:	18e4      	addlt	r4, r4, r3
 800449a:	f000 f8df 	bl	800465c <__malloc_lock>
 800449e:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <_free_r+0x94>)
 80044a0:	9801      	ldr	r0, [sp, #4]
 80044a2:	6813      	ldr	r3, [r2, #0]
 80044a4:	b933      	cbnz	r3, 80044b4 <_free_r+0x30>
 80044a6:	6063      	str	r3, [r4, #4]
 80044a8:	6014      	str	r4, [r2, #0]
 80044aa:	b003      	add	sp, #12
 80044ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044b0:	f000 b8da 	b.w	8004668 <__malloc_unlock>
 80044b4:	42a3      	cmp	r3, r4
 80044b6:	d908      	bls.n	80044ca <_free_r+0x46>
 80044b8:	6825      	ldr	r5, [r4, #0]
 80044ba:	1961      	adds	r1, r4, r5
 80044bc:	428b      	cmp	r3, r1
 80044be:	bf01      	itttt	eq
 80044c0:	6819      	ldreq	r1, [r3, #0]
 80044c2:	685b      	ldreq	r3, [r3, #4]
 80044c4:	1949      	addeq	r1, r1, r5
 80044c6:	6021      	streq	r1, [r4, #0]
 80044c8:	e7ed      	b.n	80044a6 <_free_r+0x22>
 80044ca:	461a      	mov	r2, r3
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	b10b      	cbz	r3, 80044d4 <_free_r+0x50>
 80044d0:	42a3      	cmp	r3, r4
 80044d2:	d9fa      	bls.n	80044ca <_free_r+0x46>
 80044d4:	6811      	ldr	r1, [r2, #0]
 80044d6:	1855      	adds	r5, r2, r1
 80044d8:	42a5      	cmp	r5, r4
 80044da:	d10b      	bne.n	80044f4 <_free_r+0x70>
 80044dc:	6824      	ldr	r4, [r4, #0]
 80044de:	4421      	add	r1, r4
 80044e0:	1854      	adds	r4, r2, r1
 80044e2:	42a3      	cmp	r3, r4
 80044e4:	6011      	str	r1, [r2, #0]
 80044e6:	d1e0      	bne.n	80044aa <_free_r+0x26>
 80044e8:	681c      	ldr	r4, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	6053      	str	r3, [r2, #4]
 80044ee:	440c      	add	r4, r1
 80044f0:	6014      	str	r4, [r2, #0]
 80044f2:	e7da      	b.n	80044aa <_free_r+0x26>
 80044f4:	d902      	bls.n	80044fc <_free_r+0x78>
 80044f6:	230c      	movs	r3, #12
 80044f8:	6003      	str	r3, [r0, #0]
 80044fa:	e7d6      	b.n	80044aa <_free_r+0x26>
 80044fc:	6825      	ldr	r5, [r4, #0]
 80044fe:	1961      	adds	r1, r4, r5
 8004500:	428b      	cmp	r3, r1
 8004502:	bf04      	itt	eq
 8004504:	6819      	ldreq	r1, [r3, #0]
 8004506:	685b      	ldreq	r3, [r3, #4]
 8004508:	6063      	str	r3, [r4, #4]
 800450a:	bf04      	itt	eq
 800450c:	1949      	addeq	r1, r1, r5
 800450e:	6021      	streq	r1, [r4, #0]
 8004510:	6054      	str	r4, [r2, #4]
 8004512:	e7ca      	b.n	80044aa <_free_r+0x26>
 8004514:	b003      	add	sp, #12
 8004516:	bd30      	pop	{r4, r5, pc}
 8004518:	20001394 	.word	0x20001394

0800451c <sbrk_aligned>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	4e0e      	ldr	r6, [pc, #56]	; (8004558 <sbrk_aligned+0x3c>)
 8004520:	460c      	mov	r4, r1
 8004522:	6831      	ldr	r1, [r6, #0]
 8004524:	4605      	mov	r5, r0
 8004526:	b911      	cbnz	r1, 800452e <sbrk_aligned+0x12>
 8004528:	f000 fcaa 	bl	8004e80 <_sbrk_r>
 800452c:	6030      	str	r0, [r6, #0]
 800452e:	4621      	mov	r1, r4
 8004530:	4628      	mov	r0, r5
 8004532:	f000 fca5 	bl	8004e80 <_sbrk_r>
 8004536:	1c43      	adds	r3, r0, #1
 8004538:	d00a      	beq.n	8004550 <sbrk_aligned+0x34>
 800453a:	1cc4      	adds	r4, r0, #3
 800453c:	f024 0403 	bic.w	r4, r4, #3
 8004540:	42a0      	cmp	r0, r4
 8004542:	d007      	beq.n	8004554 <sbrk_aligned+0x38>
 8004544:	1a21      	subs	r1, r4, r0
 8004546:	4628      	mov	r0, r5
 8004548:	f000 fc9a 	bl	8004e80 <_sbrk_r>
 800454c:	3001      	adds	r0, #1
 800454e:	d101      	bne.n	8004554 <sbrk_aligned+0x38>
 8004550:	f04f 34ff 	mov.w	r4, #4294967295
 8004554:	4620      	mov	r0, r4
 8004556:	bd70      	pop	{r4, r5, r6, pc}
 8004558:	20001398 	.word	0x20001398

0800455c <_malloc_r>:
 800455c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004560:	1ccd      	adds	r5, r1, #3
 8004562:	f025 0503 	bic.w	r5, r5, #3
 8004566:	3508      	adds	r5, #8
 8004568:	2d0c      	cmp	r5, #12
 800456a:	bf38      	it	cc
 800456c:	250c      	movcc	r5, #12
 800456e:	2d00      	cmp	r5, #0
 8004570:	4607      	mov	r7, r0
 8004572:	db01      	blt.n	8004578 <_malloc_r+0x1c>
 8004574:	42a9      	cmp	r1, r5
 8004576:	d905      	bls.n	8004584 <_malloc_r+0x28>
 8004578:	230c      	movs	r3, #12
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	2600      	movs	r6, #0
 800457e:	4630      	mov	r0, r6
 8004580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004584:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004658 <_malloc_r+0xfc>
 8004588:	f000 f868 	bl	800465c <__malloc_lock>
 800458c:	f8d8 3000 	ldr.w	r3, [r8]
 8004590:	461c      	mov	r4, r3
 8004592:	bb5c      	cbnz	r4, 80045ec <_malloc_r+0x90>
 8004594:	4629      	mov	r1, r5
 8004596:	4638      	mov	r0, r7
 8004598:	f7ff ffc0 	bl	800451c <sbrk_aligned>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	4604      	mov	r4, r0
 80045a0:	d155      	bne.n	800464e <_malloc_r+0xf2>
 80045a2:	f8d8 4000 	ldr.w	r4, [r8]
 80045a6:	4626      	mov	r6, r4
 80045a8:	2e00      	cmp	r6, #0
 80045aa:	d145      	bne.n	8004638 <_malloc_r+0xdc>
 80045ac:	2c00      	cmp	r4, #0
 80045ae:	d048      	beq.n	8004642 <_malloc_r+0xe6>
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	4631      	mov	r1, r6
 80045b4:	4638      	mov	r0, r7
 80045b6:	eb04 0903 	add.w	r9, r4, r3
 80045ba:	f000 fc61 	bl	8004e80 <_sbrk_r>
 80045be:	4581      	cmp	r9, r0
 80045c0:	d13f      	bne.n	8004642 <_malloc_r+0xe6>
 80045c2:	6821      	ldr	r1, [r4, #0]
 80045c4:	1a6d      	subs	r5, r5, r1
 80045c6:	4629      	mov	r1, r5
 80045c8:	4638      	mov	r0, r7
 80045ca:	f7ff ffa7 	bl	800451c <sbrk_aligned>
 80045ce:	3001      	adds	r0, #1
 80045d0:	d037      	beq.n	8004642 <_malloc_r+0xe6>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	442b      	add	r3, r5
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	f8d8 3000 	ldr.w	r3, [r8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d038      	beq.n	8004652 <_malloc_r+0xf6>
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	42a2      	cmp	r2, r4
 80045e4:	d12b      	bne.n	800463e <_malloc_r+0xe2>
 80045e6:	2200      	movs	r2, #0
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	e00f      	b.n	800460c <_malloc_r+0xb0>
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	1b52      	subs	r2, r2, r5
 80045f0:	d41f      	bmi.n	8004632 <_malloc_r+0xd6>
 80045f2:	2a0b      	cmp	r2, #11
 80045f4:	d917      	bls.n	8004626 <_malloc_r+0xca>
 80045f6:	1961      	adds	r1, r4, r5
 80045f8:	42a3      	cmp	r3, r4
 80045fa:	6025      	str	r5, [r4, #0]
 80045fc:	bf18      	it	ne
 80045fe:	6059      	strne	r1, [r3, #4]
 8004600:	6863      	ldr	r3, [r4, #4]
 8004602:	bf08      	it	eq
 8004604:	f8c8 1000 	streq.w	r1, [r8]
 8004608:	5162      	str	r2, [r4, r5]
 800460a:	604b      	str	r3, [r1, #4]
 800460c:	4638      	mov	r0, r7
 800460e:	f104 060b 	add.w	r6, r4, #11
 8004612:	f000 f829 	bl	8004668 <__malloc_unlock>
 8004616:	f026 0607 	bic.w	r6, r6, #7
 800461a:	1d23      	adds	r3, r4, #4
 800461c:	1af2      	subs	r2, r6, r3
 800461e:	d0ae      	beq.n	800457e <_malloc_r+0x22>
 8004620:	1b9b      	subs	r3, r3, r6
 8004622:	50a3      	str	r3, [r4, r2]
 8004624:	e7ab      	b.n	800457e <_malloc_r+0x22>
 8004626:	42a3      	cmp	r3, r4
 8004628:	6862      	ldr	r2, [r4, #4]
 800462a:	d1dd      	bne.n	80045e8 <_malloc_r+0x8c>
 800462c:	f8c8 2000 	str.w	r2, [r8]
 8004630:	e7ec      	b.n	800460c <_malloc_r+0xb0>
 8004632:	4623      	mov	r3, r4
 8004634:	6864      	ldr	r4, [r4, #4]
 8004636:	e7ac      	b.n	8004592 <_malloc_r+0x36>
 8004638:	4634      	mov	r4, r6
 800463a:	6876      	ldr	r6, [r6, #4]
 800463c:	e7b4      	b.n	80045a8 <_malloc_r+0x4c>
 800463e:	4613      	mov	r3, r2
 8004640:	e7cc      	b.n	80045dc <_malloc_r+0x80>
 8004642:	230c      	movs	r3, #12
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	4638      	mov	r0, r7
 8004648:	f000 f80e 	bl	8004668 <__malloc_unlock>
 800464c:	e797      	b.n	800457e <_malloc_r+0x22>
 800464e:	6025      	str	r5, [r4, #0]
 8004650:	e7dc      	b.n	800460c <_malloc_r+0xb0>
 8004652:	605b      	str	r3, [r3, #4]
 8004654:	deff      	udf	#255	; 0xff
 8004656:	bf00      	nop
 8004658:	20001394 	.word	0x20001394

0800465c <__malloc_lock>:
 800465c:	4801      	ldr	r0, [pc, #4]	; (8004664 <__malloc_lock+0x8>)
 800465e:	f7ff bf01 	b.w	8004464 <__retarget_lock_acquire_recursive>
 8004662:	bf00      	nop
 8004664:	20001390 	.word	0x20001390

08004668 <__malloc_unlock>:
 8004668:	4801      	ldr	r0, [pc, #4]	; (8004670 <__malloc_unlock+0x8>)
 800466a:	f7ff befc 	b.w	8004466 <__retarget_lock_release_recursive>
 800466e:	bf00      	nop
 8004670:	20001390 	.word	0x20001390

08004674 <__sfputc_r>:
 8004674:	6893      	ldr	r3, [r2, #8]
 8004676:	3b01      	subs	r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	b410      	push	{r4}
 800467c:	6093      	str	r3, [r2, #8]
 800467e:	da08      	bge.n	8004692 <__sfputc_r+0x1e>
 8004680:	6994      	ldr	r4, [r2, #24]
 8004682:	42a3      	cmp	r3, r4
 8004684:	db01      	blt.n	800468a <__sfputc_r+0x16>
 8004686:	290a      	cmp	r1, #10
 8004688:	d103      	bne.n	8004692 <__sfputc_r+0x1e>
 800468a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800468e:	f7ff bd86 	b.w	800419e <__swbuf_r>
 8004692:	6813      	ldr	r3, [r2, #0]
 8004694:	1c58      	adds	r0, r3, #1
 8004696:	6010      	str	r0, [r2, #0]
 8004698:	7019      	strb	r1, [r3, #0]
 800469a:	4608      	mov	r0, r1
 800469c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <__sfputs_r>:
 80046a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a4:	4606      	mov	r6, r0
 80046a6:	460f      	mov	r7, r1
 80046a8:	4614      	mov	r4, r2
 80046aa:	18d5      	adds	r5, r2, r3
 80046ac:	42ac      	cmp	r4, r5
 80046ae:	d101      	bne.n	80046b4 <__sfputs_r+0x12>
 80046b0:	2000      	movs	r0, #0
 80046b2:	e007      	b.n	80046c4 <__sfputs_r+0x22>
 80046b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b8:	463a      	mov	r2, r7
 80046ba:	4630      	mov	r0, r6
 80046bc:	f7ff ffda 	bl	8004674 <__sfputc_r>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d1f3      	bne.n	80046ac <__sfputs_r+0xa>
 80046c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046c8 <_vfiprintf_r>:
 80046c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046cc:	460d      	mov	r5, r1
 80046ce:	b09d      	sub	sp, #116	; 0x74
 80046d0:	4614      	mov	r4, r2
 80046d2:	4698      	mov	r8, r3
 80046d4:	4606      	mov	r6, r0
 80046d6:	b118      	cbz	r0, 80046e0 <_vfiprintf_r+0x18>
 80046d8:	6a03      	ldr	r3, [r0, #32]
 80046da:	b90b      	cbnz	r3, 80046e0 <_vfiprintf_r+0x18>
 80046dc:	f7ff fc78 	bl	8003fd0 <__sinit>
 80046e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046e2:	07d9      	lsls	r1, r3, #31
 80046e4:	d405      	bmi.n	80046f2 <_vfiprintf_r+0x2a>
 80046e6:	89ab      	ldrh	r3, [r5, #12]
 80046e8:	059a      	lsls	r2, r3, #22
 80046ea:	d402      	bmi.n	80046f2 <_vfiprintf_r+0x2a>
 80046ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046ee:	f7ff feb9 	bl	8004464 <__retarget_lock_acquire_recursive>
 80046f2:	89ab      	ldrh	r3, [r5, #12]
 80046f4:	071b      	lsls	r3, r3, #28
 80046f6:	d501      	bpl.n	80046fc <_vfiprintf_r+0x34>
 80046f8:	692b      	ldr	r3, [r5, #16]
 80046fa:	b99b      	cbnz	r3, 8004724 <_vfiprintf_r+0x5c>
 80046fc:	4629      	mov	r1, r5
 80046fe:	4630      	mov	r0, r6
 8004700:	f7ff fd8a 	bl	8004218 <__swsetup_r>
 8004704:	b170      	cbz	r0, 8004724 <_vfiprintf_r+0x5c>
 8004706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004708:	07dc      	lsls	r4, r3, #31
 800470a:	d504      	bpl.n	8004716 <_vfiprintf_r+0x4e>
 800470c:	f04f 30ff 	mov.w	r0, #4294967295
 8004710:	b01d      	add	sp, #116	; 0x74
 8004712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004716:	89ab      	ldrh	r3, [r5, #12]
 8004718:	0598      	lsls	r0, r3, #22
 800471a:	d4f7      	bmi.n	800470c <_vfiprintf_r+0x44>
 800471c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800471e:	f7ff fea2 	bl	8004466 <__retarget_lock_release_recursive>
 8004722:	e7f3      	b.n	800470c <_vfiprintf_r+0x44>
 8004724:	2300      	movs	r3, #0
 8004726:	9309      	str	r3, [sp, #36]	; 0x24
 8004728:	2320      	movs	r3, #32
 800472a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800472e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004732:	2330      	movs	r3, #48	; 0x30
 8004734:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80048e8 <_vfiprintf_r+0x220>
 8004738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800473c:	f04f 0901 	mov.w	r9, #1
 8004740:	4623      	mov	r3, r4
 8004742:	469a      	mov	sl, r3
 8004744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004748:	b10a      	cbz	r2, 800474e <_vfiprintf_r+0x86>
 800474a:	2a25      	cmp	r2, #37	; 0x25
 800474c:	d1f9      	bne.n	8004742 <_vfiprintf_r+0x7a>
 800474e:	ebba 0b04 	subs.w	fp, sl, r4
 8004752:	d00b      	beq.n	800476c <_vfiprintf_r+0xa4>
 8004754:	465b      	mov	r3, fp
 8004756:	4622      	mov	r2, r4
 8004758:	4629      	mov	r1, r5
 800475a:	4630      	mov	r0, r6
 800475c:	f7ff ffa1 	bl	80046a2 <__sfputs_r>
 8004760:	3001      	adds	r0, #1
 8004762:	f000 80a9 	beq.w	80048b8 <_vfiprintf_r+0x1f0>
 8004766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004768:	445a      	add	r2, fp
 800476a:	9209      	str	r2, [sp, #36]	; 0x24
 800476c:	f89a 3000 	ldrb.w	r3, [sl]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80a1 	beq.w	80048b8 <_vfiprintf_r+0x1f0>
 8004776:	2300      	movs	r3, #0
 8004778:	f04f 32ff 	mov.w	r2, #4294967295
 800477c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004780:	f10a 0a01 	add.w	sl, sl, #1
 8004784:	9304      	str	r3, [sp, #16]
 8004786:	9307      	str	r3, [sp, #28]
 8004788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800478c:	931a      	str	r3, [sp, #104]	; 0x68
 800478e:	4654      	mov	r4, sl
 8004790:	2205      	movs	r2, #5
 8004792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004796:	4854      	ldr	r0, [pc, #336]	; (80048e8 <_vfiprintf_r+0x220>)
 8004798:	f7fb fd1a 	bl	80001d0 <memchr>
 800479c:	9a04      	ldr	r2, [sp, #16]
 800479e:	b9d8      	cbnz	r0, 80047d8 <_vfiprintf_r+0x110>
 80047a0:	06d1      	lsls	r1, r2, #27
 80047a2:	bf44      	itt	mi
 80047a4:	2320      	movmi	r3, #32
 80047a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047aa:	0713      	lsls	r3, r2, #28
 80047ac:	bf44      	itt	mi
 80047ae:	232b      	movmi	r3, #43	; 0x2b
 80047b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047b4:	f89a 3000 	ldrb.w	r3, [sl]
 80047b8:	2b2a      	cmp	r3, #42	; 0x2a
 80047ba:	d015      	beq.n	80047e8 <_vfiprintf_r+0x120>
 80047bc:	9a07      	ldr	r2, [sp, #28]
 80047be:	4654      	mov	r4, sl
 80047c0:	2000      	movs	r0, #0
 80047c2:	f04f 0c0a 	mov.w	ip, #10
 80047c6:	4621      	mov	r1, r4
 80047c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047cc:	3b30      	subs	r3, #48	; 0x30
 80047ce:	2b09      	cmp	r3, #9
 80047d0:	d94d      	bls.n	800486e <_vfiprintf_r+0x1a6>
 80047d2:	b1b0      	cbz	r0, 8004802 <_vfiprintf_r+0x13a>
 80047d4:	9207      	str	r2, [sp, #28]
 80047d6:	e014      	b.n	8004802 <_vfiprintf_r+0x13a>
 80047d8:	eba0 0308 	sub.w	r3, r0, r8
 80047dc:	fa09 f303 	lsl.w	r3, r9, r3
 80047e0:	4313      	orrs	r3, r2
 80047e2:	9304      	str	r3, [sp, #16]
 80047e4:	46a2      	mov	sl, r4
 80047e6:	e7d2      	b.n	800478e <_vfiprintf_r+0xc6>
 80047e8:	9b03      	ldr	r3, [sp, #12]
 80047ea:	1d19      	adds	r1, r3, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	9103      	str	r1, [sp, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bfbb      	ittet	lt
 80047f4:	425b      	neglt	r3, r3
 80047f6:	f042 0202 	orrlt.w	r2, r2, #2
 80047fa:	9307      	strge	r3, [sp, #28]
 80047fc:	9307      	strlt	r3, [sp, #28]
 80047fe:	bfb8      	it	lt
 8004800:	9204      	strlt	r2, [sp, #16]
 8004802:	7823      	ldrb	r3, [r4, #0]
 8004804:	2b2e      	cmp	r3, #46	; 0x2e
 8004806:	d10c      	bne.n	8004822 <_vfiprintf_r+0x15a>
 8004808:	7863      	ldrb	r3, [r4, #1]
 800480a:	2b2a      	cmp	r3, #42	; 0x2a
 800480c:	d134      	bne.n	8004878 <_vfiprintf_r+0x1b0>
 800480e:	9b03      	ldr	r3, [sp, #12]
 8004810:	1d1a      	adds	r2, r3, #4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	9203      	str	r2, [sp, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	bfb8      	it	lt
 800481a:	f04f 33ff 	movlt.w	r3, #4294967295
 800481e:	3402      	adds	r4, #2
 8004820:	9305      	str	r3, [sp, #20]
 8004822:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80048f8 <_vfiprintf_r+0x230>
 8004826:	7821      	ldrb	r1, [r4, #0]
 8004828:	2203      	movs	r2, #3
 800482a:	4650      	mov	r0, sl
 800482c:	f7fb fcd0 	bl	80001d0 <memchr>
 8004830:	b138      	cbz	r0, 8004842 <_vfiprintf_r+0x17a>
 8004832:	9b04      	ldr	r3, [sp, #16]
 8004834:	eba0 000a 	sub.w	r0, r0, sl
 8004838:	2240      	movs	r2, #64	; 0x40
 800483a:	4082      	lsls	r2, r0
 800483c:	4313      	orrs	r3, r2
 800483e:	3401      	adds	r4, #1
 8004840:	9304      	str	r3, [sp, #16]
 8004842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004846:	4829      	ldr	r0, [pc, #164]	; (80048ec <_vfiprintf_r+0x224>)
 8004848:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800484c:	2206      	movs	r2, #6
 800484e:	f7fb fcbf 	bl	80001d0 <memchr>
 8004852:	2800      	cmp	r0, #0
 8004854:	d03f      	beq.n	80048d6 <_vfiprintf_r+0x20e>
 8004856:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <_vfiprintf_r+0x228>)
 8004858:	bb1b      	cbnz	r3, 80048a2 <_vfiprintf_r+0x1da>
 800485a:	9b03      	ldr	r3, [sp, #12]
 800485c:	3307      	adds	r3, #7
 800485e:	f023 0307 	bic.w	r3, r3, #7
 8004862:	3308      	adds	r3, #8
 8004864:	9303      	str	r3, [sp, #12]
 8004866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004868:	443b      	add	r3, r7
 800486a:	9309      	str	r3, [sp, #36]	; 0x24
 800486c:	e768      	b.n	8004740 <_vfiprintf_r+0x78>
 800486e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004872:	460c      	mov	r4, r1
 8004874:	2001      	movs	r0, #1
 8004876:	e7a6      	b.n	80047c6 <_vfiprintf_r+0xfe>
 8004878:	2300      	movs	r3, #0
 800487a:	3401      	adds	r4, #1
 800487c:	9305      	str	r3, [sp, #20]
 800487e:	4619      	mov	r1, r3
 8004880:	f04f 0c0a 	mov.w	ip, #10
 8004884:	4620      	mov	r0, r4
 8004886:	f810 2b01 	ldrb.w	r2, [r0], #1
 800488a:	3a30      	subs	r2, #48	; 0x30
 800488c:	2a09      	cmp	r2, #9
 800488e:	d903      	bls.n	8004898 <_vfiprintf_r+0x1d0>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0c6      	beq.n	8004822 <_vfiprintf_r+0x15a>
 8004894:	9105      	str	r1, [sp, #20]
 8004896:	e7c4      	b.n	8004822 <_vfiprintf_r+0x15a>
 8004898:	fb0c 2101 	mla	r1, ip, r1, r2
 800489c:	4604      	mov	r4, r0
 800489e:	2301      	movs	r3, #1
 80048a0:	e7f0      	b.n	8004884 <_vfiprintf_r+0x1bc>
 80048a2:	ab03      	add	r3, sp, #12
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	462a      	mov	r2, r5
 80048a8:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <_vfiprintf_r+0x22c>)
 80048aa:	a904      	add	r1, sp, #16
 80048ac:	4630      	mov	r0, r6
 80048ae:	f3af 8000 	nop.w
 80048b2:	4607      	mov	r7, r0
 80048b4:	1c78      	adds	r0, r7, #1
 80048b6:	d1d6      	bne.n	8004866 <_vfiprintf_r+0x19e>
 80048b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048ba:	07d9      	lsls	r1, r3, #31
 80048bc:	d405      	bmi.n	80048ca <_vfiprintf_r+0x202>
 80048be:	89ab      	ldrh	r3, [r5, #12]
 80048c0:	059a      	lsls	r2, r3, #22
 80048c2:	d402      	bmi.n	80048ca <_vfiprintf_r+0x202>
 80048c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048c6:	f7ff fdce 	bl	8004466 <__retarget_lock_release_recursive>
 80048ca:	89ab      	ldrh	r3, [r5, #12]
 80048cc:	065b      	lsls	r3, r3, #25
 80048ce:	f53f af1d 	bmi.w	800470c <_vfiprintf_r+0x44>
 80048d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048d4:	e71c      	b.n	8004710 <_vfiprintf_r+0x48>
 80048d6:	ab03      	add	r3, sp, #12
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	462a      	mov	r2, r5
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <_vfiprintf_r+0x22c>)
 80048de:	a904      	add	r1, sp, #16
 80048e0:	4630      	mov	r0, r6
 80048e2:	f000 f879 	bl	80049d8 <_printf_i>
 80048e6:	e7e4      	b.n	80048b2 <_vfiprintf_r+0x1ea>
 80048e8:	080050f0 	.word	0x080050f0
 80048ec:	080050fa 	.word	0x080050fa
 80048f0:	00000000 	.word	0x00000000
 80048f4:	080046a3 	.word	0x080046a3
 80048f8:	080050f6 	.word	0x080050f6

080048fc <_printf_common>:
 80048fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004900:	4616      	mov	r6, r2
 8004902:	4699      	mov	r9, r3
 8004904:	688a      	ldr	r2, [r1, #8]
 8004906:	690b      	ldr	r3, [r1, #16]
 8004908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800490c:	4293      	cmp	r3, r2
 800490e:	bfb8      	it	lt
 8004910:	4613      	movlt	r3, r2
 8004912:	6033      	str	r3, [r6, #0]
 8004914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004918:	4607      	mov	r7, r0
 800491a:	460c      	mov	r4, r1
 800491c:	b10a      	cbz	r2, 8004922 <_printf_common+0x26>
 800491e:	3301      	adds	r3, #1
 8004920:	6033      	str	r3, [r6, #0]
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	0699      	lsls	r1, r3, #26
 8004926:	bf42      	ittt	mi
 8004928:	6833      	ldrmi	r3, [r6, #0]
 800492a:	3302      	addmi	r3, #2
 800492c:	6033      	strmi	r3, [r6, #0]
 800492e:	6825      	ldr	r5, [r4, #0]
 8004930:	f015 0506 	ands.w	r5, r5, #6
 8004934:	d106      	bne.n	8004944 <_printf_common+0x48>
 8004936:	f104 0a19 	add.w	sl, r4, #25
 800493a:	68e3      	ldr	r3, [r4, #12]
 800493c:	6832      	ldr	r2, [r6, #0]
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	42ab      	cmp	r3, r5
 8004942:	dc26      	bgt.n	8004992 <_printf_common+0x96>
 8004944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004948:	1e13      	subs	r3, r2, #0
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	bf18      	it	ne
 800494e:	2301      	movne	r3, #1
 8004950:	0692      	lsls	r2, r2, #26
 8004952:	d42b      	bmi.n	80049ac <_printf_common+0xb0>
 8004954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004958:	4649      	mov	r1, r9
 800495a:	4638      	mov	r0, r7
 800495c:	47c0      	blx	r8
 800495e:	3001      	adds	r0, #1
 8004960:	d01e      	beq.n	80049a0 <_printf_common+0xa4>
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	6922      	ldr	r2, [r4, #16]
 8004966:	f003 0306 	and.w	r3, r3, #6
 800496a:	2b04      	cmp	r3, #4
 800496c:	bf02      	ittt	eq
 800496e:	68e5      	ldreq	r5, [r4, #12]
 8004970:	6833      	ldreq	r3, [r6, #0]
 8004972:	1aed      	subeq	r5, r5, r3
 8004974:	68a3      	ldr	r3, [r4, #8]
 8004976:	bf0c      	ite	eq
 8004978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800497c:	2500      	movne	r5, #0
 800497e:	4293      	cmp	r3, r2
 8004980:	bfc4      	itt	gt
 8004982:	1a9b      	subgt	r3, r3, r2
 8004984:	18ed      	addgt	r5, r5, r3
 8004986:	2600      	movs	r6, #0
 8004988:	341a      	adds	r4, #26
 800498a:	42b5      	cmp	r5, r6
 800498c:	d11a      	bne.n	80049c4 <_printf_common+0xc8>
 800498e:	2000      	movs	r0, #0
 8004990:	e008      	b.n	80049a4 <_printf_common+0xa8>
 8004992:	2301      	movs	r3, #1
 8004994:	4652      	mov	r2, sl
 8004996:	4649      	mov	r1, r9
 8004998:	4638      	mov	r0, r7
 800499a:	47c0      	blx	r8
 800499c:	3001      	adds	r0, #1
 800499e:	d103      	bne.n	80049a8 <_printf_common+0xac>
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a8:	3501      	adds	r5, #1
 80049aa:	e7c6      	b.n	800493a <_printf_common+0x3e>
 80049ac:	18e1      	adds	r1, r4, r3
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	2030      	movs	r0, #48	; 0x30
 80049b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049b6:	4422      	add	r2, r4
 80049b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049c0:	3302      	adds	r3, #2
 80049c2:	e7c7      	b.n	8004954 <_printf_common+0x58>
 80049c4:	2301      	movs	r3, #1
 80049c6:	4622      	mov	r2, r4
 80049c8:	4649      	mov	r1, r9
 80049ca:	4638      	mov	r0, r7
 80049cc:	47c0      	blx	r8
 80049ce:	3001      	adds	r0, #1
 80049d0:	d0e6      	beq.n	80049a0 <_printf_common+0xa4>
 80049d2:	3601      	adds	r6, #1
 80049d4:	e7d9      	b.n	800498a <_printf_common+0x8e>
	...

080049d8 <_printf_i>:
 80049d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	7e0f      	ldrb	r7, [r1, #24]
 80049de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049e0:	2f78      	cmp	r7, #120	; 0x78
 80049e2:	4691      	mov	r9, r2
 80049e4:	4680      	mov	r8, r0
 80049e6:	460c      	mov	r4, r1
 80049e8:	469a      	mov	sl, r3
 80049ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ee:	d807      	bhi.n	8004a00 <_printf_i+0x28>
 80049f0:	2f62      	cmp	r7, #98	; 0x62
 80049f2:	d80a      	bhi.n	8004a0a <_printf_i+0x32>
 80049f4:	2f00      	cmp	r7, #0
 80049f6:	f000 80d4 	beq.w	8004ba2 <_printf_i+0x1ca>
 80049fa:	2f58      	cmp	r7, #88	; 0x58
 80049fc:	f000 80c0 	beq.w	8004b80 <_printf_i+0x1a8>
 8004a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a08:	e03a      	b.n	8004a80 <_printf_i+0xa8>
 8004a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a0e:	2b15      	cmp	r3, #21
 8004a10:	d8f6      	bhi.n	8004a00 <_printf_i+0x28>
 8004a12:	a101      	add	r1, pc, #4	; (adr r1, 8004a18 <_printf_i+0x40>)
 8004a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a18:	08004a71 	.word	0x08004a71
 8004a1c:	08004a85 	.word	0x08004a85
 8004a20:	08004a01 	.word	0x08004a01
 8004a24:	08004a01 	.word	0x08004a01
 8004a28:	08004a01 	.word	0x08004a01
 8004a2c:	08004a01 	.word	0x08004a01
 8004a30:	08004a85 	.word	0x08004a85
 8004a34:	08004a01 	.word	0x08004a01
 8004a38:	08004a01 	.word	0x08004a01
 8004a3c:	08004a01 	.word	0x08004a01
 8004a40:	08004a01 	.word	0x08004a01
 8004a44:	08004b89 	.word	0x08004b89
 8004a48:	08004ab1 	.word	0x08004ab1
 8004a4c:	08004b43 	.word	0x08004b43
 8004a50:	08004a01 	.word	0x08004a01
 8004a54:	08004a01 	.word	0x08004a01
 8004a58:	08004bab 	.word	0x08004bab
 8004a5c:	08004a01 	.word	0x08004a01
 8004a60:	08004ab1 	.word	0x08004ab1
 8004a64:	08004a01 	.word	0x08004a01
 8004a68:	08004a01 	.word	0x08004a01
 8004a6c:	08004b4b 	.word	0x08004b4b
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	1d1a      	adds	r2, r3, #4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	602a      	str	r2, [r5, #0]
 8004a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a80:	2301      	movs	r3, #1
 8004a82:	e09f      	b.n	8004bc4 <_printf_i+0x1ec>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	682b      	ldr	r3, [r5, #0]
 8004a88:	0607      	lsls	r7, r0, #24
 8004a8a:	f103 0104 	add.w	r1, r3, #4
 8004a8e:	6029      	str	r1, [r5, #0]
 8004a90:	d501      	bpl.n	8004a96 <_printf_i+0xbe>
 8004a92:	681e      	ldr	r6, [r3, #0]
 8004a94:	e003      	b.n	8004a9e <_printf_i+0xc6>
 8004a96:	0646      	lsls	r6, r0, #25
 8004a98:	d5fb      	bpl.n	8004a92 <_printf_i+0xba>
 8004a9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a9e:	2e00      	cmp	r6, #0
 8004aa0:	da03      	bge.n	8004aaa <_printf_i+0xd2>
 8004aa2:	232d      	movs	r3, #45	; 0x2d
 8004aa4:	4276      	negs	r6, r6
 8004aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aaa:	485a      	ldr	r0, [pc, #360]	; (8004c14 <_printf_i+0x23c>)
 8004aac:	230a      	movs	r3, #10
 8004aae:	e012      	b.n	8004ad6 <_printf_i+0xfe>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	6820      	ldr	r0, [r4, #0]
 8004ab4:	1d19      	adds	r1, r3, #4
 8004ab6:	6029      	str	r1, [r5, #0]
 8004ab8:	0605      	lsls	r5, r0, #24
 8004aba:	d501      	bpl.n	8004ac0 <_printf_i+0xe8>
 8004abc:	681e      	ldr	r6, [r3, #0]
 8004abe:	e002      	b.n	8004ac6 <_printf_i+0xee>
 8004ac0:	0641      	lsls	r1, r0, #25
 8004ac2:	d5fb      	bpl.n	8004abc <_printf_i+0xe4>
 8004ac4:	881e      	ldrh	r6, [r3, #0]
 8004ac6:	4853      	ldr	r0, [pc, #332]	; (8004c14 <_printf_i+0x23c>)
 8004ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8004aca:	bf0c      	ite	eq
 8004acc:	2308      	moveq	r3, #8
 8004ace:	230a      	movne	r3, #10
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ad6:	6865      	ldr	r5, [r4, #4]
 8004ad8:	60a5      	str	r5, [r4, #8]
 8004ada:	2d00      	cmp	r5, #0
 8004adc:	bfa2      	ittt	ge
 8004ade:	6821      	ldrge	r1, [r4, #0]
 8004ae0:	f021 0104 	bicge.w	r1, r1, #4
 8004ae4:	6021      	strge	r1, [r4, #0]
 8004ae6:	b90e      	cbnz	r6, 8004aec <_printf_i+0x114>
 8004ae8:	2d00      	cmp	r5, #0
 8004aea:	d04b      	beq.n	8004b84 <_printf_i+0x1ac>
 8004aec:	4615      	mov	r5, r2
 8004aee:	fbb6 f1f3 	udiv	r1, r6, r3
 8004af2:	fb03 6711 	mls	r7, r3, r1, r6
 8004af6:	5dc7      	ldrb	r7, [r0, r7]
 8004af8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004afc:	4637      	mov	r7, r6
 8004afe:	42bb      	cmp	r3, r7
 8004b00:	460e      	mov	r6, r1
 8004b02:	d9f4      	bls.n	8004aee <_printf_i+0x116>
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d10b      	bne.n	8004b20 <_printf_i+0x148>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	07de      	lsls	r6, r3, #31
 8004b0c:	d508      	bpl.n	8004b20 <_printf_i+0x148>
 8004b0e:	6923      	ldr	r3, [r4, #16]
 8004b10:	6861      	ldr	r1, [r4, #4]
 8004b12:	4299      	cmp	r1, r3
 8004b14:	bfde      	ittt	le
 8004b16:	2330      	movle	r3, #48	; 0x30
 8004b18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b20:	1b52      	subs	r2, r2, r5
 8004b22:	6122      	str	r2, [r4, #16]
 8004b24:	f8cd a000 	str.w	sl, [sp]
 8004b28:	464b      	mov	r3, r9
 8004b2a:	aa03      	add	r2, sp, #12
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4640      	mov	r0, r8
 8004b30:	f7ff fee4 	bl	80048fc <_printf_common>
 8004b34:	3001      	adds	r0, #1
 8004b36:	d14a      	bne.n	8004bce <_printf_i+0x1f6>
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	b004      	add	sp, #16
 8004b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	f043 0320 	orr.w	r3, r3, #32
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	4833      	ldr	r0, [pc, #204]	; (8004c18 <_printf_i+0x240>)
 8004b4c:	2778      	movs	r7, #120	; 0x78
 8004b4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	6829      	ldr	r1, [r5, #0]
 8004b56:	061f      	lsls	r7, r3, #24
 8004b58:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b5c:	d402      	bmi.n	8004b64 <_printf_i+0x18c>
 8004b5e:	065f      	lsls	r7, r3, #25
 8004b60:	bf48      	it	mi
 8004b62:	b2b6      	uxthmi	r6, r6
 8004b64:	07df      	lsls	r7, r3, #31
 8004b66:	bf48      	it	mi
 8004b68:	f043 0320 	orrmi.w	r3, r3, #32
 8004b6c:	6029      	str	r1, [r5, #0]
 8004b6e:	bf48      	it	mi
 8004b70:	6023      	strmi	r3, [r4, #0]
 8004b72:	b91e      	cbnz	r6, 8004b7c <_printf_i+0x1a4>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	f023 0320 	bic.w	r3, r3, #32
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	e7a7      	b.n	8004ad0 <_printf_i+0xf8>
 8004b80:	4824      	ldr	r0, [pc, #144]	; (8004c14 <_printf_i+0x23c>)
 8004b82:	e7e4      	b.n	8004b4e <_printf_i+0x176>
 8004b84:	4615      	mov	r5, r2
 8004b86:	e7bd      	b.n	8004b04 <_printf_i+0x12c>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	6826      	ldr	r6, [r4, #0]
 8004b8c:	6961      	ldr	r1, [r4, #20]
 8004b8e:	1d18      	adds	r0, r3, #4
 8004b90:	6028      	str	r0, [r5, #0]
 8004b92:	0635      	lsls	r5, r6, #24
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	d501      	bpl.n	8004b9c <_printf_i+0x1c4>
 8004b98:	6019      	str	r1, [r3, #0]
 8004b9a:	e002      	b.n	8004ba2 <_printf_i+0x1ca>
 8004b9c:	0670      	lsls	r0, r6, #25
 8004b9e:	d5fb      	bpl.n	8004b98 <_printf_i+0x1c0>
 8004ba0:	8019      	strh	r1, [r3, #0]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6123      	str	r3, [r4, #16]
 8004ba6:	4615      	mov	r5, r2
 8004ba8:	e7bc      	b.n	8004b24 <_printf_i+0x14c>
 8004baa:	682b      	ldr	r3, [r5, #0]
 8004bac:	1d1a      	adds	r2, r3, #4
 8004bae:	602a      	str	r2, [r5, #0]
 8004bb0:	681d      	ldr	r5, [r3, #0]
 8004bb2:	6862      	ldr	r2, [r4, #4]
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f7fb fb0a 	bl	80001d0 <memchr>
 8004bbc:	b108      	cbz	r0, 8004bc2 <_printf_i+0x1ea>
 8004bbe:	1b40      	subs	r0, r0, r5
 8004bc0:	6060      	str	r0, [r4, #4]
 8004bc2:	6863      	ldr	r3, [r4, #4]
 8004bc4:	6123      	str	r3, [r4, #16]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bcc:	e7aa      	b.n	8004b24 <_printf_i+0x14c>
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	462a      	mov	r2, r5
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	47d0      	blx	sl
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d0ad      	beq.n	8004b38 <_printf_i+0x160>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	079b      	lsls	r3, r3, #30
 8004be0:	d413      	bmi.n	8004c0a <_printf_i+0x232>
 8004be2:	68e0      	ldr	r0, [r4, #12]
 8004be4:	9b03      	ldr	r3, [sp, #12]
 8004be6:	4298      	cmp	r0, r3
 8004be8:	bfb8      	it	lt
 8004bea:	4618      	movlt	r0, r3
 8004bec:	e7a6      	b.n	8004b3c <_printf_i+0x164>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	4632      	mov	r2, r6
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	4640      	mov	r0, r8
 8004bf6:	47d0      	blx	sl
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d09d      	beq.n	8004b38 <_printf_i+0x160>
 8004bfc:	3501      	adds	r5, #1
 8004bfe:	68e3      	ldr	r3, [r4, #12]
 8004c00:	9903      	ldr	r1, [sp, #12]
 8004c02:	1a5b      	subs	r3, r3, r1
 8004c04:	42ab      	cmp	r3, r5
 8004c06:	dcf2      	bgt.n	8004bee <_printf_i+0x216>
 8004c08:	e7eb      	b.n	8004be2 <_printf_i+0x20a>
 8004c0a:	2500      	movs	r5, #0
 8004c0c:	f104 0619 	add.w	r6, r4, #25
 8004c10:	e7f5      	b.n	8004bfe <_printf_i+0x226>
 8004c12:	bf00      	nop
 8004c14:	08005101 	.word	0x08005101
 8004c18:	08005112 	.word	0x08005112

08004c1c <__sflush_r>:
 8004c1c:	898a      	ldrh	r2, [r1, #12]
 8004c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c22:	4605      	mov	r5, r0
 8004c24:	0710      	lsls	r0, r2, #28
 8004c26:	460c      	mov	r4, r1
 8004c28:	d458      	bmi.n	8004cdc <__sflush_r+0xc0>
 8004c2a:	684b      	ldr	r3, [r1, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	dc05      	bgt.n	8004c3c <__sflush_r+0x20>
 8004c30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	dc02      	bgt.n	8004c3c <__sflush_r+0x20>
 8004c36:	2000      	movs	r0, #0
 8004c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c3e:	2e00      	cmp	r6, #0
 8004c40:	d0f9      	beq.n	8004c36 <__sflush_r+0x1a>
 8004c42:	2300      	movs	r3, #0
 8004c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c48:	682f      	ldr	r7, [r5, #0]
 8004c4a:	6a21      	ldr	r1, [r4, #32]
 8004c4c:	602b      	str	r3, [r5, #0]
 8004c4e:	d032      	beq.n	8004cb6 <__sflush_r+0x9a>
 8004c50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	075a      	lsls	r2, r3, #29
 8004c56:	d505      	bpl.n	8004c64 <__sflush_r+0x48>
 8004c58:	6863      	ldr	r3, [r4, #4]
 8004c5a:	1ac0      	subs	r0, r0, r3
 8004c5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c5e:	b10b      	cbz	r3, 8004c64 <__sflush_r+0x48>
 8004c60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c62:	1ac0      	subs	r0, r0, r3
 8004c64:	2300      	movs	r3, #0
 8004c66:	4602      	mov	r2, r0
 8004c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c6a:	6a21      	ldr	r1, [r4, #32]
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	47b0      	blx	r6
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	d106      	bne.n	8004c84 <__sflush_r+0x68>
 8004c76:	6829      	ldr	r1, [r5, #0]
 8004c78:	291d      	cmp	r1, #29
 8004c7a:	d82b      	bhi.n	8004cd4 <__sflush_r+0xb8>
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <__sflush_r+0x108>)
 8004c7e:	410a      	asrs	r2, r1
 8004c80:	07d6      	lsls	r6, r2, #31
 8004c82:	d427      	bmi.n	8004cd4 <__sflush_r+0xb8>
 8004c84:	2200      	movs	r2, #0
 8004c86:	6062      	str	r2, [r4, #4]
 8004c88:	04d9      	lsls	r1, r3, #19
 8004c8a:	6922      	ldr	r2, [r4, #16]
 8004c8c:	6022      	str	r2, [r4, #0]
 8004c8e:	d504      	bpl.n	8004c9a <__sflush_r+0x7e>
 8004c90:	1c42      	adds	r2, r0, #1
 8004c92:	d101      	bne.n	8004c98 <__sflush_r+0x7c>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	b903      	cbnz	r3, 8004c9a <__sflush_r+0x7e>
 8004c98:	6560      	str	r0, [r4, #84]	; 0x54
 8004c9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c9c:	602f      	str	r7, [r5, #0]
 8004c9e:	2900      	cmp	r1, #0
 8004ca0:	d0c9      	beq.n	8004c36 <__sflush_r+0x1a>
 8004ca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ca6:	4299      	cmp	r1, r3
 8004ca8:	d002      	beq.n	8004cb0 <__sflush_r+0x94>
 8004caa:	4628      	mov	r0, r5
 8004cac:	f7ff fbea 	bl	8004484 <_free_r>
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	6360      	str	r0, [r4, #52]	; 0x34
 8004cb4:	e7c0      	b.n	8004c38 <__sflush_r+0x1c>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47b0      	blx	r6
 8004cbc:	1c41      	adds	r1, r0, #1
 8004cbe:	d1c8      	bne.n	8004c52 <__sflush_r+0x36>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0c5      	beq.n	8004c52 <__sflush_r+0x36>
 8004cc6:	2b1d      	cmp	r3, #29
 8004cc8:	d001      	beq.n	8004cce <__sflush_r+0xb2>
 8004cca:	2b16      	cmp	r3, #22
 8004ccc:	d101      	bne.n	8004cd2 <__sflush_r+0xb6>
 8004cce:	602f      	str	r7, [r5, #0]
 8004cd0:	e7b1      	b.n	8004c36 <__sflush_r+0x1a>
 8004cd2:	89a3      	ldrh	r3, [r4, #12]
 8004cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	e7ad      	b.n	8004c38 <__sflush_r+0x1c>
 8004cdc:	690f      	ldr	r7, [r1, #16]
 8004cde:	2f00      	cmp	r7, #0
 8004ce0:	d0a9      	beq.n	8004c36 <__sflush_r+0x1a>
 8004ce2:	0793      	lsls	r3, r2, #30
 8004ce4:	680e      	ldr	r6, [r1, #0]
 8004ce6:	bf08      	it	eq
 8004ce8:	694b      	ldreq	r3, [r1, #20]
 8004cea:	600f      	str	r7, [r1, #0]
 8004cec:	bf18      	it	ne
 8004cee:	2300      	movne	r3, #0
 8004cf0:	eba6 0807 	sub.w	r8, r6, r7
 8004cf4:	608b      	str	r3, [r1, #8]
 8004cf6:	f1b8 0f00 	cmp.w	r8, #0
 8004cfa:	dd9c      	ble.n	8004c36 <__sflush_r+0x1a>
 8004cfc:	6a21      	ldr	r1, [r4, #32]
 8004cfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d00:	4643      	mov	r3, r8
 8004d02:	463a      	mov	r2, r7
 8004d04:	4628      	mov	r0, r5
 8004d06:	47b0      	blx	r6
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	dc06      	bgt.n	8004d1a <__sflush_r+0xfe>
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d12:	81a3      	strh	r3, [r4, #12]
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	e78e      	b.n	8004c38 <__sflush_r+0x1c>
 8004d1a:	4407      	add	r7, r0
 8004d1c:	eba8 0800 	sub.w	r8, r8, r0
 8004d20:	e7e9      	b.n	8004cf6 <__sflush_r+0xda>
 8004d22:	bf00      	nop
 8004d24:	dfbffffe 	.word	0xdfbffffe

08004d28 <_fflush_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	690b      	ldr	r3, [r1, #16]
 8004d2c:	4605      	mov	r5, r0
 8004d2e:	460c      	mov	r4, r1
 8004d30:	b913      	cbnz	r3, 8004d38 <_fflush_r+0x10>
 8004d32:	2500      	movs	r5, #0
 8004d34:	4628      	mov	r0, r5
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	b118      	cbz	r0, 8004d42 <_fflush_r+0x1a>
 8004d3a:	6a03      	ldr	r3, [r0, #32]
 8004d3c:	b90b      	cbnz	r3, 8004d42 <_fflush_r+0x1a>
 8004d3e:	f7ff f947 	bl	8003fd0 <__sinit>
 8004d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f3      	beq.n	8004d32 <_fflush_r+0xa>
 8004d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d4c:	07d0      	lsls	r0, r2, #31
 8004d4e:	d404      	bmi.n	8004d5a <_fflush_r+0x32>
 8004d50:	0599      	lsls	r1, r3, #22
 8004d52:	d402      	bmi.n	8004d5a <_fflush_r+0x32>
 8004d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d56:	f7ff fb85 	bl	8004464 <__retarget_lock_acquire_recursive>
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	f7ff ff5d 	bl	8004c1c <__sflush_r>
 8004d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d64:	07da      	lsls	r2, r3, #31
 8004d66:	4605      	mov	r5, r0
 8004d68:	d4e4      	bmi.n	8004d34 <_fflush_r+0xc>
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	059b      	lsls	r3, r3, #22
 8004d6e:	d4e1      	bmi.n	8004d34 <_fflush_r+0xc>
 8004d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d72:	f7ff fb78 	bl	8004466 <__retarget_lock_release_recursive>
 8004d76:	e7dd      	b.n	8004d34 <_fflush_r+0xc>

08004d78 <__swhatbuf_r>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d80:	2900      	cmp	r1, #0
 8004d82:	b096      	sub	sp, #88	; 0x58
 8004d84:	4615      	mov	r5, r2
 8004d86:	461e      	mov	r6, r3
 8004d88:	da0d      	bge.n	8004da6 <__swhatbuf_r+0x2e>
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d90:	f04f 0100 	mov.w	r1, #0
 8004d94:	bf0c      	ite	eq
 8004d96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004d9a:	2340      	movne	r3, #64	; 0x40
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	6031      	str	r1, [r6, #0]
 8004da0:	602b      	str	r3, [r5, #0]
 8004da2:	b016      	add	sp, #88	; 0x58
 8004da4:	bd70      	pop	{r4, r5, r6, pc}
 8004da6:	466a      	mov	r2, sp
 8004da8:	f000 f848 	bl	8004e3c <_fstat_r>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	dbec      	blt.n	8004d8a <__swhatbuf_r+0x12>
 8004db0:	9901      	ldr	r1, [sp, #4]
 8004db2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004db6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004dba:	4259      	negs	r1, r3
 8004dbc:	4159      	adcs	r1, r3
 8004dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dc2:	e7eb      	b.n	8004d9c <__swhatbuf_r+0x24>

08004dc4 <__smakebuf_r>:
 8004dc4:	898b      	ldrh	r3, [r1, #12]
 8004dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dc8:	079d      	lsls	r5, r3, #30
 8004dca:	4606      	mov	r6, r0
 8004dcc:	460c      	mov	r4, r1
 8004dce:	d507      	bpl.n	8004de0 <__smakebuf_r+0x1c>
 8004dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	6123      	str	r3, [r4, #16]
 8004dd8:	2301      	movs	r3, #1
 8004dda:	6163      	str	r3, [r4, #20]
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	ab01      	add	r3, sp, #4
 8004de2:	466a      	mov	r2, sp
 8004de4:	f7ff ffc8 	bl	8004d78 <__swhatbuf_r>
 8004de8:	9900      	ldr	r1, [sp, #0]
 8004dea:	4605      	mov	r5, r0
 8004dec:	4630      	mov	r0, r6
 8004dee:	f7ff fbb5 	bl	800455c <_malloc_r>
 8004df2:	b948      	cbnz	r0, 8004e08 <__smakebuf_r+0x44>
 8004df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df8:	059a      	lsls	r2, r3, #22
 8004dfa:	d4ef      	bmi.n	8004ddc <__smakebuf_r+0x18>
 8004dfc:	f023 0303 	bic.w	r3, r3, #3
 8004e00:	f043 0302 	orr.w	r3, r3, #2
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	e7e3      	b.n	8004dd0 <__smakebuf_r+0xc>
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	6020      	str	r0, [r4, #0]
 8004e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e10:	81a3      	strh	r3, [r4, #12]
 8004e12:	9b00      	ldr	r3, [sp, #0]
 8004e14:	6163      	str	r3, [r4, #20]
 8004e16:	9b01      	ldr	r3, [sp, #4]
 8004e18:	6120      	str	r0, [r4, #16]
 8004e1a:	b15b      	cbz	r3, 8004e34 <__smakebuf_r+0x70>
 8004e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e20:	4630      	mov	r0, r6
 8004e22:	f000 f81d 	bl	8004e60 <_isatty_r>
 8004e26:	b128      	cbz	r0, 8004e34 <__smakebuf_r+0x70>
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	431d      	orrs	r5, r3
 8004e38:	81a5      	strh	r5, [r4, #12]
 8004e3a:	e7cf      	b.n	8004ddc <__smakebuf_r+0x18>

08004e3c <_fstat_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4d07      	ldr	r5, [pc, #28]	; (8004e5c <_fstat_r+0x20>)
 8004e40:	2300      	movs	r3, #0
 8004e42:	4604      	mov	r4, r0
 8004e44:	4608      	mov	r0, r1
 8004e46:	4611      	mov	r1, r2
 8004e48:	602b      	str	r3, [r5, #0]
 8004e4a:	f7fb fcd7 	bl	80007fc <_fstat>
 8004e4e:	1c43      	adds	r3, r0, #1
 8004e50:	d102      	bne.n	8004e58 <_fstat_r+0x1c>
 8004e52:	682b      	ldr	r3, [r5, #0]
 8004e54:	b103      	cbz	r3, 8004e58 <_fstat_r+0x1c>
 8004e56:	6023      	str	r3, [r4, #0]
 8004e58:	bd38      	pop	{r3, r4, r5, pc}
 8004e5a:	bf00      	nop
 8004e5c:	2000138c 	.word	0x2000138c

08004e60 <_isatty_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4d06      	ldr	r5, [pc, #24]	; (8004e7c <_isatty_r+0x1c>)
 8004e64:	2300      	movs	r3, #0
 8004e66:	4604      	mov	r4, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	602b      	str	r3, [r5, #0]
 8004e6c:	f7fb fcd6 	bl	800081c <_isatty>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d102      	bne.n	8004e7a <_isatty_r+0x1a>
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	b103      	cbz	r3, 8004e7a <_isatty_r+0x1a>
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	2000138c 	.word	0x2000138c

08004e80 <_sbrk_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	4d06      	ldr	r5, [pc, #24]	; (8004e9c <_sbrk_r+0x1c>)
 8004e84:	2300      	movs	r3, #0
 8004e86:	4604      	mov	r4, r0
 8004e88:	4608      	mov	r0, r1
 8004e8a:	602b      	str	r3, [r5, #0]
 8004e8c:	f7fb fcde 	bl	800084c <_sbrk>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d102      	bne.n	8004e9a <_sbrk_r+0x1a>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	b103      	cbz	r3, 8004e9a <_sbrk_r+0x1a>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	2000138c 	.word	0x2000138c

08004ea0 <_init>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr

08004eac <_fini>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	bf00      	nop
 8004eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb2:	bc08      	pop	{r3}
 8004eb4:	469e      	mov	lr, r3
 8004eb6:	4770      	bx	lr
