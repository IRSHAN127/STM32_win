
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023a4  080023a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080023a4  080023a4  000123a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023ac  080023ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023ac  080023ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023b0  080023b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080023b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000010  080023c4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080023c4  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004497  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000115a  00000000  00000000  00024512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c0  00000000  00000000  00025670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000037c  00000000  00000000  00025b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012780  00000000  00000000  00025eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000622b  00000000  00000000  0003862c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007295f  00000000  00000000  0003e857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001044  00000000  00000000  000b11b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b21fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002370 	.word	0x08002370

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002370 	.word	0x08002370

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 fa78 	bl	80007d0 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 fa73 	bl	80007d0 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__aeabi_fmul>:
 8000454:	0243      	lsls	r3, r0, #9
 8000456:	0a5b      	lsrs	r3, r3, #9
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	464f      	mov	r7, r9
 800045c:	4646      	mov	r6, r8
 800045e:	4699      	mov	r9, r3
 8000460:	46d6      	mov	lr, sl
 8000462:	0fc3      	lsrs	r3, r0, #31
 8000464:	0045      	lsls	r5, r0, #1
 8000466:	4698      	mov	r8, r3
 8000468:	b5c0      	push	{r6, r7, lr}
 800046a:	464b      	mov	r3, r9
 800046c:	1c0f      	adds	r7, r1, #0
 800046e:	0e2d      	lsrs	r5, r5, #24
 8000470:	d100      	bne.n	8000474 <__aeabi_fmul+0x20>
 8000472:	e0cb      	b.n	800060c <__aeabi_fmul+0x1b8>
 8000474:	2dff      	cmp	r5, #255	; 0xff
 8000476:	d100      	bne.n	800047a <__aeabi_fmul+0x26>
 8000478:	e0cf      	b.n	800061a <__aeabi_fmul+0x1c6>
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	00db      	lsls	r3, r3, #3
 800047e:	04d2      	lsls	r2, r2, #19
 8000480:	431a      	orrs	r2, r3
 8000482:	2300      	movs	r3, #0
 8000484:	4691      	mov	r9, r2
 8000486:	2600      	movs	r6, #0
 8000488:	469a      	mov	sl, r3
 800048a:	3d7f      	subs	r5, #127	; 0x7f
 800048c:	027c      	lsls	r4, r7, #9
 800048e:	007b      	lsls	r3, r7, #1
 8000490:	0a64      	lsrs	r4, r4, #9
 8000492:	0e1b      	lsrs	r3, r3, #24
 8000494:	0fff      	lsrs	r7, r7, #31
 8000496:	2b00      	cmp	r3, #0
 8000498:	d100      	bne.n	800049c <__aeabi_fmul+0x48>
 800049a:	e0a9      	b.n	80005f0 <__aeabi_fmul+0x19c>
 800049c:	2bff      	cmp	r3, #255	; 0xff
 800049e:	d011      	beq.n	80004c4 <__aeabi_fmul+0x70>
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	00e4      	lsls	r4, r4, #3
 80004a4:	04d2      	lsls	r2, r2, #19
 80004a6:	4314      	orrs	r4, r2
 80004a8:	4642      	mov	r2, r8
 80004aa:	3b7f      	subs	r3, #127	; 0x7f
 80004ac:	195b      	adds	r3, r3, r5
 80004ae:	407a      	eors	r2, r7
 80004b0:	2000      	movs	r0, #0
 80004b2:	b2d2      	uxtb	r2, r2
 80004b4:	1c5d      	adds	r5, r3, #1
 80004b6:	2e0a      	cmp	r6, #10
 80004b8:	dd13      	ble.n	80004e2 <__aeabi_fmul+0x8e>
 80004ba:	003a      	movs	r2, r7
 80004bc:	2e0b      	cmp	r6, #11
 80004be:	d047      	beq.n	8000550 <__aeabi_fmul+0xfc>
 80004c0:	4647      	mov	r7, r8
 80004c2:	e03f      	b.n	8000544 <__aeabi_fmul+0xf0>
 80004c4:	002b      	movs	r3, r5
 80004c6:	33ff      	adds	r3, #255	; 0xff
 80004c8:	2c00      	cmp	r4, #0
 80004ca:	d11e      	bne.n	800050a <__aeabi_fmul+0xb6>
 80004cc:	2202      	movs	r2, #2
 80004ce:	4316      	orrs	r6, r2
 80004d0:	4642      	mov	r2, r8
 80004d2:	3501      	adds	r5, #1
 80004d4:	407a      	eors	r2, r7
 80004d6:	b2d2      	uxtb	r2, r2
 80004d8:	35ff      	adds	r5, #255	; 0xff
 80004da:	2e0a      	cmp	r6, #10
 80004dc:	dd00      	ble.n	80004e0 <__aeabi_fmul+0x8c>
 80004de:	e0e4      	b.n	80006aa <__aeabi_fmul+0x256>
 80004e0:	2002      	movs	r0, #2
 80004e2:	2e02      	cmp	r6, #2
 80004e4:	dc1c      	bgt.n	8000520 <__aeabi_fmul+0xcc>
 80004e6:	3e01      	subs	r6, #1
 80004e8:	2e01      	cmp	r6, #1
 80004ea:	d842      	bhi.n	8000572 <__aeabi_fmul+0x11e>
 80004ec:	2802      	cmp	r0, #2
 80004ee:	d03d      	beq.n	800056c <__aeabi_fmul+0x118>
 80004f0:	2801      	cmp	r0, #1
 80004f2:	d166      	bne.n	80005c2 <__aeabi_fmul+0x16e>
 80004f4:	2000      	movs	r0, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	05c0      	lsls	r0, r0, #23
 80004fa:	4308      	orrs	r0, r1
 80004fc:	07d2      	lsls	r2, r2, #31
 80004fe:	4310      	orrs	r0, r2
 8000500:	bce0      	pop	{r5, r6, r7}
 8000502:	46ba      	mov	sl, r7
 8000504:	46b1      	mov	r9, r6
 8000506:	46a8      	mov	r8, r5
 8000508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050a:	2203      	movs	r2, #3
 800050c:	4316      	orrs	r6, r2
 800050e:	4642      	mov	r2, r8
 8000510:	3501      	adds	r5, #1
 8000512:	407a      	eors	r2, r7
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	35ff      	adds	r5, #255	; 0xff
 8000518:	2e0a      	cmp	r6, #10
 800051a:	dd00      	ble.n	800051e <__aeabi_fmul+0xca>
 800051c:	e0e4      	b.n	80006e8 <__aeabi_fmul+0x294>
 800051e:	2003      	movs	r0, #3
 8000520:	2101      	movs	r1, #1
 8000522:	40b1      	lsls	r1, r6
 8000524:	26a6      	movs	r6, #166	; 0xa6
 8000526:	00f6      	lsls	r6, r6, #3
 8000528:	4231      	tst	r1, r6
 800052a:	d10a      	bne.n	8000542 <__aeabi_fmul+0xee>
 800052c:	2690      	movs	r6, #144	; 0x90
 800052e:	00b6      	lsls	r6, r6, #2
 8000530:	4231      	tst	r1, r6
 8000532:	d116      	bne.n	8000562 <__aeabi_fmul+0x10e>
 8000534:	3eb9      	subs	r6, #185	; 0xb9
 8000536:	3eff      	subs	r6, #255	; 0xff
 8000538:	420e      	tst	r6, r1
 800053a:	d01a      	beq.n	8000572 <__aeabi_fmul+0x11e>
 800053c:	46a1      	mov	r9, r4
 800053e:	4682      	mov	sl, r0
 8000540:	e000      	b.n	8000544 <__aeabi_fmul+0xf0>
 8000542:	0017      	movs	r7, r2
 8000544:	4653      	mov	r3, sl
 8000546:	003a      	movs	r2, r7
 8000548:	2b02      	cmp	r3, #2
 800054a:	d00f      	beq.n	800056c <__aeabi_fmul+0x118>
 800054c:	464c      	mov	r4, r9
 800054e:	4650      	mov	r0, sl
 8000550:	2803      	cmp	r0, #3
 8000552:	d1cd      	bne.n	80004f0 <__aeabi_fmul+0x9c>
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	03c9      	lsls	r1, r1, #15
 8000558:	4321      	orrs	r1, r4
 800055a:	0249      	lsls	r1, r1, #9
 800055c:	20ff      	movs	r0, #255	; 0xff
 800055e:	0a49      	lsrs	r1, r1, #9
 8000560:	e7ca      	b.n	80004f8 <__aeabi_fmul+0xa4>
 8000562:	2180      	movs	r1, #128	; 0x80
 8000564:	2200      	movs	r2, #0
 8000566:	20ff      	movs	r0, #255	; 0xff
 8000568:	03c9      	lsls	r1, r1, #15
 800056a:	e7c5      	b.n	80004f8 <__aeabi_fmul+0xa4>
 800056c:	20ff      	movs	r0, #255	; 0xff
 800056e:	2100      	movs	r1, #0
 8000570:	e7c2      	b.n	80004f8 <__aeabi_fmul+0xa4>
 8000572:	0c20      	lsrs	r0, r4, #16
 8000574:	4649      	mov	r1, r9
 8000576:	0424      	lsls	r4, r4, #16
 8000578:	0c24      	lsrs	r4, r4, #16
 800057a:	0027      	movs	r7, r4
 800057c:	0c0e      	lsrs	r6, r1, #16
 800057e:	0409      	lsls	r1, r1, #16
 8000580:	0c09      	lsrs	r1, r1, #16
 8000582:	4374      	muls	r4, r6
 8000584:	434f      	muls	r7, r1
 8000586:	4346      	muls	r6, r0
 8000588:	4348      	muls	r0, r1
 800058a:	0c39      	lsrs	r1, r7, #16
 800058c:	1900      	adds	r0, r0, r4
 800058e:	1809      	adds	r1, r1, r0
 8000590:	428c      	cmp	r4, r1
 8000592:	d903      	bls.n	800059c <__aeabi_fmul+0x148>
 8000594:	2080      	movs	r0, #128	; 0x80
 8000596:	0240      	lsls	r0, r0, #9
 8000598:	4684      	mov	ip, r0
 800059a:	4466      	add	r6, ip
 800059c:	043f      	lsls	r7, r7, #16
 800059e:	0408      	lsls	r0, r1, #16
 80005a0:	0c3f      	lsrs	r7, r7, #16
 80005a2:	19c0      	adds	r0, r0, r7
 80005a4:	0184      	lsls	r4, r0, #6
 80005a6:	1e67      	subs	r7, r4, #1
 80005a8:	41bc      	sbcs	r4, r7
 80005aa:	0c09      	lsrs	r1, r1, #16
 80005ac:	0e80      	lsrs	r0, r0, #26
 80005ae:	1989      	adds	r1, r1, r6
 80005b0:	4304      	orrs	r4, r0
 80005b2:	0189      	lsls	r1, r1, #6
 80005b4:	430c      	orrs	r4, r1
 80005b6:	0109      	lsls	r1, r1, #4
 80005b8:	d571      	bpl.n	800069e <__aeabi_fmul+0x24a>
 80005ba:	2301      	movs	r3, #1
 80005bc:	0861      	lsrs	r1, r4, #1
 80005be:	401c      	ands	r4, r3
 80005c0:	430c      	orrs	r4, r1
 80005c2:	002b      	movs	r3, r5
 80005c4:	337f      	adds	r3, #127	; 0x7f
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	dd51      	ble.n	800066e <__aeabi_fmul+0x21a>
 80005ca:	0761      	lsls	r1, r4, #29
 80005cc:	d004      	beq.n	80005d8 <__aeabi_fmul+0x184>
 80005ce:	210f      	movs	r1, #15
 80005d0:	4021      	ands	r1, r4
 80005d2:	2904      	cmp	r1, #4
 80005d4:	d000      	beq.n	80005d8 <__aeabi_fmul+0x184>
 80005d6:	3404      	adds	r4, #4
 80005d8:	0121      	lsls	r1, r4, #4
 80005da:	d503      	bpl.n	80005e4 <__aeabi_fmul+0x190>
 80005dc:	4b43      	ldr	r3, [pc, #268]	; (80006ec <__aeabi_fmul+0x298>)
 80005de:	401c      	ands	r4, r3
 80005e0:	002b      	movs	r3, r5
 80005e2:	3380      	adds	r3, #128	; 0x80
 80005e4:	2bfe      	cmp	r3, #254	; 0xfe
 80005e6:	dcc1      	bgt.n	800056c <__aeabi_fmul+0x118>
 80005e8:	01a1      	lsls	r1, r4, #6
 80005ea:	0a49      	lsrs	r1, r1, #9
 80005ec:	b2d8      	uxtb	r0, r3
 80005ee:	e783      	b.n	80004f8 <__aeabi_fmul+0xa4>
 80005f0:	2c00      	cmp	r4, #0
 80005f2:	d12c      	bne.n	800064e <__aeabi_fmul+0x1fa>
 80005f4:	2301      	movs	r3, #1
 80005f6:	4642      	mov	r2, r8
 80005f8:	431e      	orrs	r6, r3
 80005fa:	002b      	movs	r3, r5
 80005fc:	407a      	eors	r2, r7
 80005fe:	2001      	movs	r0, #1
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	1c5d      	adds	r5, r3, #1
 8000604:	2e0a      	cmp	r6, #10
 8000606:	dd00      	ble.n	800060a <__aeabi_fmul+0x1b6>
 8000608:	e757      	b.n	80004ba <__aeabi_fmul+0x66>
 800060a:	e76a      	b.n	80004e2 <__aeabi_fmul+0x8e>
 800060c:	2b00      	cmp	r3, #0
 800060e:	d110      	bne.n	8000632 <__aeabi_fmul+0x1de>
 8000610:	2301      	movs	r3, #1
 8000612:	2604      	movs	r6, #4
 8000614:	2500      	movs	r5, #0
 8000616:	469a      	mov	sl, r3
 8000618:	e738      	b.n	800048c <__aeabi_fmul+0x38>
 800061a:	2b00      	cmp	r3, #0
 800061c:	d104      	bne.n	8000628 <__aeabi_fmul+0x1d4>
 800061e:	2302      	movs	r3, #2
 8000620:	2608      	movs	r6, #8
 8000622:	25ff      	movs	r5, #255	; 0xff
 8000624:	469a      	mov	sl, r3
 8000626:	e731      	b.n	800048c <__aeabi_fmul+0x38>
 8000628:	2303      	movs	r3, #3
 800062a:	260c      	movs	r6, #12
 800062c:	25ff      	movs	r5, #255	; 0xff
 800062e:	469a      	mov	sl, r3
 8000630:	e72c      	b.n	800048c <__aeabi_fmul+0x38>
 8000632:	4648      	mov	r0, r9
 8000634:	f000 f8ae 	bl	8000794 <__clzsi2>
 8000638:	464a      	mov	r2, r9
 800063a:	1f43      	subs	r3, r0, #5
 800063c:	2576      	movs	r5, #118	; 0x76
 800063e:	409a      	lsls	r2, r3
 8000640:	2300      	movs	r3, #0
 8000642:	426d      	negs	r5, r5
 8000644:	4691      	mov	r9, r2
 8000646:	2600      	movs	r6, #0
 8000648:	469a      	mov	sl, r3
 800064a:	1a2d      	subs	r5, r5, r0
 800064c:	e71e      	b.n	800048c <__aeabi_fmul+0x38>
 800064e:	0020      	movs	r0, r4
 8000650:	f000 f8a0 	bl	8000794 <__clzsi2>
 8000654:	4642      	mov	r2, r8
 8000656:	1f43      	subs	r3, r0, #5
 8000658:	409c      	lsls	r4, r3
 800065a:	1a2b      	subs	r3, r5, r0
 800065c:	3b76      	subs	r3, #118	; 0x76
 800065e:	407a      	eors	r2, r7
 8000660:	2000      	movs	r0, #0
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	1c5d      	adds	r5, r3, #1
 8000666:	2e0a      	cmp	r6, #10
 8000668:	dd00      	ble.n	800066c <__aeabi_fmul+0x218>
 800066a:	e726      	b.n	80004ba <__aeabi_fmul+0x66>
 800066c:	e739      	b.n	80004e2 <__aeabi_fmul+0x8e>
 800066e:	2101      	movs	r1, #1
 8000670:	1acb      	subs	r3, r1, r3
 8000672:	2b1b      	cmp	r3, #27
 8000674:	dd00      	ble.n	8000678 <__aeabi_fmul+0x224>
 8000676:	e73d      	b.n	80004f4 <__aeabi_fmul+0xa0>
 8000678:	359e      	adds	r5, #158	; 0x9e
 800067a:	0021      	movs	r1, r4
 800067c:	40ac      	lsls	r4, r5
 800067e:	40d9      	lsrs	r1, r3
 8000680:	1e63      	subs	r3, r4, #1
 8000682:	419c      	sbcs	r4, r3
 8000684:	4321      	orrs	r1, r4
 8000686:	074b      	lsls	r3, r1, #29
 8000688:	d004      	beq.n	8000694 <__aeabi_fmul+0x240>
 800068a:	230f      	movs	r3, #15
 800068c:	400b      	ands	r3, r1
 800068e:	2b04      	cmp	r3, #4
 8000690:	d000      	beq.n	8000694 <__aeabi_fmul+0x240>
 8000692:	3104      	adds	r1, #4
 8000694:	014b      	lsls	r3, r1, #5
 8000696:	d504      	bpl.n	80006a2 <__aeabi_fmul+0x24e>
 8000698:	2001      	movs	r0, #1
 800069a:	2100      	movs	r1, #0
 800069c:	e72c      	b.n	80004f8 <__aeabi_fmul+0xa4>
 800069e:	001d      	movs	r5, r3
 80006a0:	e78f      	b.n	80005c2 <__aeabi_fmul+0x16e>
 80006a2:	0189      	lsls	r1, r1, #6
 80006a4:	2000      	movs	r0, #0
 80006a6:	0a49      	lsrs	r1, r1, #9
 80006a8:	e726      	b.n	80004f8 <__aeabi_fmul+0xa4>
 80006aa:	2302      	movs	r3, #2
 80006ac:	2e0f      	cmp	r6, #15
 80006ae:	d10c      	bne.n	80006ca <__aeabi_fmul+0x276>
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	464b      	mov	r3, r9
 80006b4:	03c9      	lsls	r1, r1, #15
 80006b6:	420b      	tst	r3, r1
 80006b8:	d00d      	beq.n	80006d6 <__aeabi_fmul+0x282>
 80006ba:	420c      	tst	r4, r1
 80006bc:	d10b      	bne.n	80006d6 <__aeabi_fmul+0x282>
 80006be:	4321      	orrs	r1, r4
 80006c0:	0249      	lsls	r1, r1, #9
 80006c2:	003a      	movs	r2, r7
 80006c4:	20ff      	movs	r0, #255	; 0xff
 80006c6:	0a49      	lsrs	r1, r1, #9
 80006c8:	e716      	b.n	80004f8 <__aeabi_fmul+0xa4>
 80006ca:	2e0b      	cmp	r6, #11
 80006cc:	d000      	beq.n	80006d0 <__aeabi_fmul+0x27c>
 80006ce:	e6f7      	b.n	80004c0 <__aeabi_fmul+0x6c>
 80006d0:	46a1      	mov	r9, r4
 80006d2:	469a      	mov	sl, r3
 80006d4:	e736      	b.n	8000544 <__aeabi_fmul+0xf0>
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	464b      	mov	r3, r9
 80006da:	03c9      	lsls	r1, r1, #15
 80006dc:	4319      	orrs	r1, r3
 80006de:	0249      	lsls	r1, r1, #9
 80006e0:	4642      	mov	r2, r8
 80006e2:	20ff      	movs	r0, #255	; 0xff
 80006e4:	0a49      	lsrs	r1, r1, #9
 80006e6:	e707      	b.n	80004f8 <__aeabi_fmul+0xa4>
 80006e8:	2303      	movs	r3, #3
 80006ea:	e7df      	b.n	80006ac <__aeabi_fmul+0x258>
 80006ec:	f7ffffff 	.word	0xf7ffffff

080006f0 <__aeabi_i2f>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d013      	beq.n	800071e <__aeabi_i2f+0x2e>
 80006f6:	17c3      	asrs	r3, r0, #31
 80006f8:	18c5      	adds	r5, r0, r3
 80006fa:	405d      	eors	r5, r3
 80006fc:	0fc4      	lsrs	r4, r0, #31
 80006fe:	0028      	movs	r0, r5
 8000700:	f000 f848 	bl	8000794 <__clzsi2>
 8000704:	239e      	movs	r3, #158	; 0x9e
 8000706:	0001      	movs	r1, r0
 8000708:	1a1b      	subs	r3, r3, r0
 800070a:	2b96      	cmp	r3, #150	; 0x96
 800070c:	dc0f      	bgt.n	800072e <__aeabi_i2f+0x3e>
 800070e:	2808      	cmp	r0, #8
 8000710:	d031      	beq.n	8000776 <__aeabi_i2f+0x86>
 8000712:	3908      	subs	r1, #8
 8000714:	408d      	lsls	r5, r1
 8000716:	026d      	lsls	r5, r5, #9
 8000718:	0a6d      	lsrs	r5, r5, #9
 800071a:	b2d8      	uxtb	r0, r3
 800071c:	e002      	b.n	8000724 <__aeabi_i2f+0x34>
 800071e:	2400      	movs	r4, #0
 8000720:	2000      	movs	r0, #0
 8000722:	2500      	movs	r5, #0
 8000724:	05c0      	lsls	r0, r0, #23
 8000726:	4328      	orrs	r0, r5
 8000728:	07e4      	lsls	r4, r4, #31
 800072a:	4320      	orrs	r0, r4
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	2b99      	cmp	r3, #153	; 0x99
 8000730:	dd0c      	ble.n	800074c <__aeabi_i2f+0x5c>
 8000732:	2205      	movs	r2, #5
 8000734:	1a12      	subs	r2, r2, r0
 8000736:	0028      	movs	r0, r5
 8000738:	40d0      	lsrs	r0, r2
 800073a:	0002      	movs	r2, r0
 800073c:	0008      	movs	r0, r1
 800073e:	301b      	adds	r0, #27
 8000740:	4085      	lsls	r5, r0
 8000742:	0028      	movs	r0, r5
 8000744:	1e45      	subs	r5, r0, #1
 8000746:	41a8      	sbcs	r0, r5
 8000748:	4302      	orrs	r2, r0
 800074a:	0015      	movs	r5, r2
 800074c:	2905      	cmp	r1, #5
 800074e:	dc16      	bgt.n	800077e <__aeabi_i2f+0x8e>
 8000750:	002a      	movs	r2, r5
 8000752:	480f      	ldr	r0, [pc, #60]	; (8000790 <__aeabi_i2f+0xa0>)
 8000754:	4002      	ands	r2, r0
 8000756:	076e      	lsls	r6, r5, #29
 8000758:	d009      	beq.n	800076e <__aeabi_i2f+0x7e>
 800075a:	260f      	movs	r6, #15
 800075c:	4035      	ands	r5, r6
 800075e:	2d04      	cmp	r5, #4
 8000760:	d005      	beq.n	800076e <__aeabi_i2f+0x7e>
 8000762:	3204      	adds	r2, #4
 8000764:	0155      	lsls	r5, r2, #5
 8000766:	d502      	bpl.n	800076e <__aeabi_i2f+0x7e>
 8000768:	239f      	movs	r3, #159	; 0x9f
 800076a:	4002      	ands	r2, r0
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	0192      	lsls	r2, r2, #6
 8000770:	0a55      	lsrs	r5, r2, #9
 8000772:	b2d8      	uxtb	r0, r3
 8000774:	e7d6      	b.n	8000724 <__aeabi_i2f+0x34>
 8000776:	026d      	lsls	r5, r5, #9
 8000778:	2096      	movs	r0, #150	; 0x96
 800077a:	0a6d      	lsrs	r5, r5, #9
 800077c:	e7d2      	b.n	8000724 <__aeabi_i2f+0x34>
 800077e:	1f4a      	subs	r2, r1, #5
 8000780:	4095      	lsls	r5, r2
 8000782:	002a      	movs	r2, r5
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <__aeabi_i2f+0xa0>)
 8000786:	4002      	ands	r2, r0
 8000788:	076e      	lsls	r6, r5, #29
 800078a:	d0f0      	beq.n	800076e <__aeabi_i2f+0x7e>
 800078c:	e7e5      	b.n	800075a <__aeabi_i2f+0x6a>
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	fbffffff 	.word	0xfbffffff

08000794 <__clzsi2>:
 8000794:	211c      	movs	r1, #28
 8000796:	2301      	movs	r3, #1
 8000798:	041b      	lsls	r3, r3, #16
 800079a:	4298      	cmp	r0, r3
 800079c:	d301      	bcc.n	80007a2 <__clzsi2+0xe>
 800079e:	0c00      	lsrs	r0, r0, #16
 80007a0:	3910      	subs	r1, #16
 80007a2:	0a1b      	lsrs	r3, r3, #8
 80007a4:	4298      	cmp	r0, r3
 80007a6:	d301      	bcc.n	80007ac <__clzsi2+0x18>
 80007a8:	0a00      	lsrs	r0, r0, #8
 80007aa:	3908      	subs	r1, #8
 80007ac:	091b      	lsrs	r3, r3, #4
 80007ae:	4298      	cmp	r0, r3
 80007b0:	d301      	bcc.n	80007b6 <__clzsi2+0x22>
 80007b2:	0900      	lsrs	r0, r0, #4
 80007b4:	3904      	subs	r1, #4
 80007b6:	a202      	add	r2, pc, #8	; (adr r2, 80007c0 <__clzsi2+0x2c>)
 80007b8:	5c10      	ldrb	r0, [r2, r0]
 80007ba:	1840      	adds	r0, r0, r1
 80007bc:	4770      	bx	lr
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	02020304 	.word	0x02020304
 80007c4:	01010101 	.word	0x01010101
	...

080007d0 <__clzdi2>:
 80007d0:	b510      	push	{r4, lr}
 80007d2:	2900      	cmp	r1, #0
 80007d4:	d103      	bne.n	80007de <__clzdi2+0xe>
 80007d6:	f7ff ffdd 	bl	8000794 <__clzsi2>
 80007da:	3020      	adds	r0, #32
 80007dc:	e002      	b.n	80007e4 <__clzdi2+0x14>
 80007de:	0008      	movs	r0, r1
 80007e0:	f7ff ffd8 	bl	8000794 <__clzsi2>
 80007e4:	bd10      	pop	{r4, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 f9b0 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f82e 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f000 f8ec 	bl	80009d0 <MX_GPIO_Init>
  MX_ADC_Init();
 80007f8:	f000 f884 	bl	8000904 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc);
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <main+0x58>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fb8a 	bl	8000f18 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_PollForConversion(&hadc, 100);
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <main+0x58>)
 8000806:	2164      	movs	r1, #100	; 0x64
 8000808:	0018      	movs	r0, r3
 800080a:	f000 fbd9 	bl	8000fc0 <HAL_ADC_PollForConversion>

	  	 no_of_steps= HAL_ADC_GetValue(&hadc);
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <main+0x58>)
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fc71 	bl	80010f8 <HAL_ADC_GetValue>
 8000816:	0003      	movs	r3, r0
 8000818:	b29a      	uxth	r2, r3
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <main+0x5c>)
 800081c:	801a      	strh	r2, [r3, #0]

	  	 input_voltage = no_of_steps * step_size;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <main+0x5c>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff ff64 	bl	80006f0 <__aeabi_i2f>
 8000828:	1c02      	adds	r2, r0, #0
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <main+0x60>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	1c19      	adds	r1, r3, #0
 8000830:	1c10      	adds	r0, r2, #0
 8000832:	f7ff fe0f 	bl	8000454 <__aeabi_fmul>
 8000836:	1c03      	adds	r3, r0, #0
 8000838:	1c1a      	adds	r2, r3, #0
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <main+0x64>)
 800083c:	601a      	str	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc, 100);
 800083e:	e7e1      	b.n	8000804 <main+0x1c>
 8000840:	2000002c 	.word	0x2000002c
 8000844:	20000088 	.word	0x20000088
 8000848:	20000000 	.word	0x20000000
 800084c:	2000008c 	.word	0x2000008c

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b095      	sub	sp, #84	; 0x54
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	2418      	movs	r4, #24
 8000858:	193b      	adds	r3, r7, r4
 800085a:	0018      	movs	r0, r3
 800085c:	2338      	movs	r3, #56	; 0x38
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f001 fd59 	bl	8002318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f001 fd52 	bl	8002318 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <SystemClock_Config+0xac>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a21      	ldr	r2, [pc, #132]	; (8000900 <SystemClock_Config+0xb0>)
 800087a:	401a      	ands	r2, r3
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <SystemClock_Config+0xac>)
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	0109      	lsls	r1, r1, #4
 8000882:	430a      	orrs	r2, r1
 8000884:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000886:	0021      	movs	r1, r4
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0252      	lsls	r2, r2, #9
 8000894:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2202      	movs	r2, #2
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	0252      	lsls	r2, r2, #9
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	22c0      	movs	r2, #192	; 0xc0
 80008a8:	0312      	lsls	r2, r2, #12
 80008aa:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	03d2      	lsls	r2, r2, #15
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 ff7c 	bl	80017b4 <HAL_RCC_OscConfig>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008c0:	f000 f8a8 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	220f      	movs	r2, #15
 80008c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2203      	movs	r2, #3
 80008ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2101      	movs	r1, #1
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 fb28 	bl	8001f3c <HAL_RCC_ClockConfig>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008f0:	f000 f890 	bl	8000a14 <Error_Handler>
  }
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b015      	add	sp, #84	; 0x54
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	40007000 	.word	0x40007000
 8000900:	ffffe7ff 	.word	0xffffe7ff

08000904 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	003b      	movs	r3, r7
 800090c:	0018      	movs	r0, r3
 800090e:	2308      	movs	r3, #8
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f001 fd00 	bl	8002318 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <MX_ADC_Init+0xc0>)
 800091a:	4a2b      	ldr	r2, [pc, #172]	; (80009c8 <MX_ADC_Init+0xc4>)
 800091c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <MX_ADC_Init+0xc0>)
 8000920:	2200      	movs	r2, #0
 8000922:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <MX_ADC_Init+0xc0>)
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	05d2      	lsls	r2, r2, #23
 800092a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <MX_ADC_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000932:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <MX_ADC_Init+0xc0>)
 8000934:	2200      	movs	r2, #0
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_ADC_Init+0xc0>)
 800093a:	2201      	movs	r2, #1
 800093c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_ADC_Init+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_ADC_Init+0xc0>)
 8000946:	2220      	movs	r2, #32
 8000948:	2101      	movs	r1, #1
 800094a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_ADC_Init+0xc0>)
 800094e:	2221      	movs	r2, #33	; 0x21
 8000950:	2100      	movs	r1, #0
 8000952:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_ADC_Init+0xc0>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_ADC_Init+0xc0>)
 800095c:	22c2      	movs	r2, #194	; 0xc2
 800095e:	32ff      	adds	r2, #255	; 0xff
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_ADC_Init+0xc0>)
 8000964:	222c      	movs	r2, #44	; 0x2c
 8000966:	2100      	movs	r1, #0
 8000968:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_ADC_Init+0xc0>)
 800096c:	2204      	movs	r2, #4
 800096e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_ADC_Init+0xc0>)
 8000972:	2200      	movs	r2, #0
 8000974:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_ADC_Init+0xc0>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_ADC_Init+0xc0>)
 800097e:	2200      	movs	r2, #0
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_ADC_Init+0xc0>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_ADC_Init+0xc0>)
 800098a:	0018      	movs	r0, r3
 800098c:	f000 f950 	bl	8000c30 <HAL_ADC_Init>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000994:	f000 f83e 	bl	8000a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000998:	003b      	movs	r3, r7
 800099a:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <MX_ADC_Init+0xc8>)
 800099c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800099e:	003b      	movs	r3, r7
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	0152      	lsls	r2, r2, #5
 80009a4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009a6:	003a      	movs	r2, r7
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_ADC_Init+0xc0>)
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fbaf 	bl	8001110 <HAL_ADC_ConfigChannel>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80009b6:	f000 f82d 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	2000002c 	.word	0x2000002c
 80009c8:	40012400 	.word	0x40012400
 80009cc:	20000100 	.word	0x20000100

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_GPIO_Init+0x40>)
 80009d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_GPIO_Init+0x40>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	430a      	orrs	r2, r1
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_GPIO_Init+0x40>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	4013      	ands	r3, r2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_GPIO_Init+0x40>)
 80009f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_GPIO_Init+0x40>)
 80009f4:	2102      	movs	r1, #2
 80009f6:	430a      	orrs	r2, r1
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <MX_GPIO_Init+0x40>)
 80009fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fe:	2202      	movs	r2, #2
 8000a00:	4013      	ands	r3, r2
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	40021000 	.word	0x40021000

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <HAL_MspInit+0x24>)
 8000a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x24>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_MspInit+0x24>)
 8000a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_MspInit+0x24>)
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	0549      	lsls	r1, r1, #21
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	240c      	movs	r4, #12
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2314      	movs	r3, #20
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f001 fc5c 	bl	8002318 <memset>
  if(hadc->Instance==ADC1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <HAL_ADC_MspInit+0x70>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d121      	bne.n	8000aae <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_ADC_MspInit+0x74>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_ADC_MspInit+0x74>)
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0089      	lsls	r1, r1, #2
 8000a74:	430a      	orrs	r2, r1
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_ADC_MspInit+0x74>)
 8000a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_ADC_MspInit+0x74>)
 8000a7e:	2102      	movs	r1, #2
 8000a80:	430a      	orrs	r2, r1
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <HAL_ADC_MspInit+0x74>)
 8000a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a88:	2202      	movs	r2, #2
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2203      	movs	r2, #3
 8000a9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_ADC_MspInit+0x78>)
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	f000 fd0d 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b009      	add	sp, #36	; 0x24
 8000ab4:	bd90      	pop	{r4, r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40012400 	.word	0x40012400
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	50000400 	.word	0x50000400

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 f886 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b00:	f7ff fff7 	bl	8000af2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f001 fbfd 	bl	8002328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2e:	f7ff fe5b 	bl	80007e8 <main>

08000b32 <LoopForever>:

LoopForever:
    b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   r0, =_estack
 8000b34:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b40:	080023b4 	.word	0x080023b4
  ldr r2, =_sbss
 8000b44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b48:	20000094 	.word	0x20000094

08000b4c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_COMP_IRQHandler>
	...

08000b50 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_Init+0x3c>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_Init+0x3c>)
 8000b62:	2140      	movs	r1, #64	; 0x40
 8000b64:	430a      	orrs	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f000 f811 	bl	8000b90 <HAL_InitTick>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e001      	b.n	8000b7e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b7a:	f7ff ff51 	bl	8000a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
}
 8000b82:	0018      	movs	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_InitTick+0x5c>)
 8000b9a:	681c      	ldr	r4, [r3, #0]
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_InitTick+0x60>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	23fa      	movs	r3, #250	; 0xfa
 8000ba4:	0098      	lsls	r0, r3, #2
 8000ba6:	f7ff faaf 	bl	8000108 <__udivsi3>
 8000baa:	0003      	movs	r3, r0
 8000bac:	0019      	movs	r1, r3
 8000bae:	0020      	movs	r0, r4
 8000bb0:	f7ff faaa 	bl	8000108 <__udivsi3>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fc79 	bl	80014ae <HAL_SYSTICK_Config>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e00f      	b.n	8000be4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d80b      	bhi.n	8000be2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	425b      	negs	r3, r3
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fc56 	bl	8001484 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_InitTick+0x64>)
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b003      	add	sp, #12
 8000bea:	bd90      	pop	{r4, r7, pc}
 8000bec:	20000004 	.word	0x20000004
 8000bf0:	2000000c 	.word	0x2000000c
 8000bf4:	20000008 	.word	0x20000008

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	001a      	movs	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	18d2      	adds	r2, r2, r3
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	2000000c 	.word	0x2000000c
 8000c18:	20000090 	.word	0x20000090

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	20000090 	.word	0x20000090

08000c30 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e159      	b.n	8000ef6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10a      	bne.n	8000c60 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2250      	movs	r2, #80	; 0x50
 8000c54:	2100      	movs	r1, #0
 8000c56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fef4 	bl	8000a48 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c64:	2210      	movs	r2, #16
 8000c66:	4013      	ands	r3, r2
 8000c68:	2b10      	cmp	r3, #16
 8000c6a:	d005      	beq.n	8000c78 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2204      	movs	r2, #4
 8000c74:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c76:	d00b      	beq.n	8000c90 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c7c:	2210      	movs	r2, #16
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2250      	movs	r2, #80	; 0x50
 8000c88:	2100      	movs	r1, #0
 8000c8a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e132      	b.n	8000ef6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c94:	4a9a      	ldr	r2, [pc, #616]	; (8000f00 <HAL_ADC_Init+0x2d0>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	2202      	movs	r2, #2
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d108      	bne.n	8000cc0 <HAL_ADC_Init+0x90>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d101      	bne.n	8000cc0 <HAL_ADC_Init+0x90>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <HAL_ADC_Init+0x92>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d149      	bne.n	8000d5a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	23c0      	movs	r3, #192	; 0xc0
 8000ccc:	061b      	lsls	r3, r3, #24
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d00b      	beq.n	8000cea <HAL_ADC_Init+0xba>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	05db      	lsls	r3, r3, #23
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d005      	beq.n	8000cea <HAL_ADC_Init+0xba>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	061b      	lsls	r3, r3, #24
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d111      	bne.n	8000d0e <HAL_ADC_Init+0xde>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	0092      	lsls	r2, r2, #2
 8000cf6:	0892      	lsrs	r2, r2, #2
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6919      	ldr	r1, [r3, #16]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	e014      	b.n	8000d38 <HAL_ADC_Init+0x108>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	0892      	lsrs	r2, r2, #2
 8000d1c:	611a      	str	r2, [r3, #16]
 8000d1e:	4b79      	ldr	r3, [pc, #484]	; (8000f04 <HAL_ADC_Init+0x2d4>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4b78      	ldr	r3, [pc, #480]	; (8000f04 <HAL_ADC_Init+0x2d4>)
 8000d24:	4978      	ldr	r1, [pc, #480]	; (8000f08 <HAL_ADC_Init+0x2d8>)
 8000d26:	400a      	ands	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	4b76      	ldr	r3, [pc, #472]	; (8000f04 <HAL_ADC_Init+0x2d4>)
 8000d2c:	6819      	ldr	r1, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4b74      	ldr	r3, [pc, #464]	; (8000f04 <HAL_ADC_Init+0x2d4>)
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2118      	movs	r1, #24
 8000d44:	438a      	bics	r2, r1
 8000d46:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68d9      	ldr	r1, [r3, #12]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000d5a:	4b6a      	ldr	r3, [pc, #424]	; (8000f04 <HAL_ADC_Init+0x2d4>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b69      	ldr	r3, [pc, #420]	; (8000f04 <HAL_ADC_Init+0x2d4>)
 8000d60:	496a      	ldr	r1, [pc, #424]	; (8000f0c <HAL_ADC_Init+0x2dc>)
 8000d62:	400a      	ands	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000d66:	4b67      	ldr	r3, [pc, #412]	; (8000f04 <HAL_ADC_Init+0x2d4>)
 8000d68:	6819      	ldr	r1, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6e:	065a      	lsls	r2, r3, #25
 8000d70:	4b64      	ldr	r3, [pc, #400]	; (8000f04 <HAL_ADC_Init+0x2d4>)
 8000d72:	430a      	orrs	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	055b      	lsls	r3, r3, #21
 8000d80:	4013      	ands	r3, r2
 8000d82:	d108      	bne.n	8000d96 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0549      	lsls	r1, r1, #21
 8000d92:	430a      	orrs	r2, r1
 8000d94:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	495b      	ldr	r1, [pc, #364]	; (8000f10 <HAL_ADC_Init+0x2e0>)
 8000da2:	400a      	ands	r2, r1
 8000da4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68d9      	ldr	r1, [r3, #12]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d101      	bne.n	8000dbc <HAL_ADC_Init+0x18c>
 8000db8:	2304      	movs	r3, #4
 8000dba:	e000      	b.n	8000dbe <HAL_ADC_Init+0x18e>
 8000dbc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dbe:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2020      	movs	r0, #32
 8000dc4:	5c1b      	ldrb	r3, [r3, r0]
 8000dc6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000dc8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	202c      	movs	r0, #44	; 0x2c
 8000dce:	5c1b      	ldrb	r3, [r3, r0]
 8000dd0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dd2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000dd8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000de0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000de8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df6:	23c2      	movs	r3, #194	; 0xc2
 8000df8:	33ff      	adds	r3, #255	; 0xff
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d00b      	beq.n	8000e16 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68d9      	ldr	r1, [r3, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2221      	movs	r2, #33	; 0x21
 8000e1a:	5c9b      	ldrb	r3, [r3, r2]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d11a      	bne.n	8000e56 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2220      	movs	r2, #32
 8000e24:	5c9b      	ldrb	r3, [r3, r2]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d109      	bne.n	8000e3e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	0249      	lsls	r1, r1, #9
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	e00b      	b.n	8000e56 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e42:	2220      	movs	r2, #32
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	2201      	movs	r2, #1
 8000e50:	431a      	orrs	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d11f      	bne.n	8000e9e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	492a      	ldr	r1, [pc, #168]	; (8000f14 <HAL_ADC_Init+0x2e4>)
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6919      	ldr	r1, [r3, #16]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e7c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000e82:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2101      	movs	r1, #1
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	e00e      	b.n	8000ebc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d107      	bne.n	8000ebc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	691a      	ldr	r2, [r3, #16]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	438a      	bics	r2, r1
 8000eba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2107      	movs	r1, #7
 8000ec8:	438a      	bics	r2, r1
 8000eca:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6959      	ldr	r1, [r3, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee8:	2203      	movs	r2, #3
 8000eea:	4393      	bics	r3, r2
 8000eec:	2201      	movs	r2, #1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	fffffefd 	.word	0xfffffefd
 8000f04:	40012708 	.word	0x40012708
 8000f08:	ffc3ffff 	.word	0xffc3ffff
 8000f0c:	fdffffff 	.word	0xfdffffff
 8000f10:	fffe0219 	.word	0xfffe0219
 8000f14:	fffffc03 	.word	0xfffffc03

08000f18 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f20:	230f      	movs	r3, #15
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4013      	ands	r3, r2
 8000f32:	d138      	bne.n	8000fa6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2250      	movs	r2, #80	; 0x50
 8000f38:	5c9b      	ldrb	r3, [r3, r2]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Start+0x2a>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e038      	b.n	8000fb4 <HAL_ADC_Start+0x9c>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2250      	movs	r2, #80	; 0x50
 8000f46:	2101      	movs	r1, #1
 8000f48:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d007      	beq.n	8000f62 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000f52:	230f      	movs	r3, #15
 8000f54:	18fc      	adds	r4, r7, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 f979 	bl	8001250 <ADC_Enable>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f62:	230f      	movs	r3, #15
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d120      	bne.n	8000fae <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <HAL_ADC_Start+0xa4>)
 8000f72:	4013      	ands	r3, r2
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	0052      	lsls	r2, r2, #1
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2250      	movs	r2, #80	; 0x50
 8000f88:	2100      	movs	r1, #0
 8000f8a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	221c      	movs	r2, #28
 8000f92:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	e003      	b.n	8000fae <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	2202      	movs	r2, #2
 8000fac:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fae:	230f      	movs	r3, #15
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	781b      	ldrb	r3, [r3, #0]
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b005      	add	sp, #20
 8000fba:	bd90      	pop	{r4, r7, pc}
 8000fbc:	fffff0fe 	.word	0xfffff0fe

08000fc0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d102      	bne.n	8000fe0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	e014      	b.n	800100a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4013      	ands	r3, r2
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d10b      	bne.n	8001006 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2250      	movs	r2, #80	; 0x50
 8000ffe:	2100      	movs	r1, #0
 8001000:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e072      	b.n	80010ec <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001006:	230c      	movs	r3, #12
 8001008:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800100a:	f7ff fe07 	bl	8000c1c <HAL_GetTick>
 800100e:	0003      	movs	r3, r0
 8001010:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001012:	e01f      	b.n	8001054 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	d01c      	beq.n	8001054 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <HAL_ADC_PollForConversion+0x70>
 8001020:	f7ff fdfc 	bl	8000c1c <HAL_GetTick>
 8001024:	0002      	movs	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d211      	bcs.n	8001054 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4013      	ands	r3, r2
 800103a:	d10b      	bne.n	8001054 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001040:	2204      	movs	r2, #4
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2250      	movs	r2, #80	; 0x50
 800104c:	2100      	movs	r1, #0
 800104e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e04b      	b.n	80010ec <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4013      	ands	r3, r2
 800105e:	d0d9      	beq.n	8001014 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	23c0      	movs	r3, #192	; 0xc0
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	4013      	ands	r3, r2
 800107a:	d12e      	bne.n	80010da <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2220      	movs	r2, #32
 8001080:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001082:	2b00      	cmp	r3, #0
 8001084:	d129      	bne.n	80010da <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2208      	movs	r2, #8
 800108e:	4013      	ands	r3, r2
 8001090:	2b08      	cmp	r3, #8
 8001092:	d122      	bne.n	80010da <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2204      	movs	r2, #4
 800109c:	4013      	ands	r3, r2
 800109e:	d110      	bne.n	80010c2 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	210c      	movs	r1, #12
 80010ac:	438a      	bics	r2, r1
 80010ae:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b4:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_ADC_PollForConversion+0x134>)
 80010b6:	4013      	ands	r3, r2
 80010b8:	2201      	movs	r2, #1
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	655a      	str	r2, [r3, #84]	; 0x54
 80010c0:	e00b      	b.n	80010da <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c6:	2220      	movs	r2, #32
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	2201      	movs	r2, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d103      	bne.n	80010ea <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b004      	add	sp, #16
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	fffffefe 	.word	0xfffffefe

080010f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2250      	movs	r2, #80	; 0x50
 800111e:	5c9b      	ldrb	r3, [r3, r2]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x18>
 8001124:	2302      	movs	r3, #2
 8001126:	e085      	b.n	8001234 <HAL_ADC_ConfigChannel+0x124>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2250      	movs	r2, #80	; 0x50
 800112c:	2101      	movs	r1, #1
 800112e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2204      	movs	r2, #4
 8001138:	4013      	ands	r3, r2
 800113a:	d00b      	beq.n	8001154 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001140:	2220      	movs	r2, #32
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2250      	movs	r2, #80	; 0x50
 800114c:	2100      	movs	r1, #0
 800114e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e06f      	b.n	8001234 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a38      	ldr	r2, [pc, #224]	; (800123c <HAL_ADC_ConfigChannel+0x12c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d035      	beq.n	80011ca <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	035b      	lsls	r3, r3, #13
 800116a:	0b5a      	lsrs	r2, r3, #13
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	02db      	lsls	r3, r3, #11
 800117c:	4013      	ands	r3, r2
 800117e:	d009      	beq.n	8001194 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	0409      	lsls	r1, r1, #16
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800118e:	200a      	movs	r0, #10
 8001190:	f000 f8c6 	bl	8001320 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	029b      	lsls	r3, r3, #10
 800119c:	4013      	ands	r3, r2
 800119e:	d006      	beq.n	80011ae <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	03c9      	lsls	r1, r1, #15
 80011aa:	430a      	orrs	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	4013      	ands	r3, r2
 80011b8:	d037      	beq.n	800122a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	0449      	lsls	r1, r1, #17
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e02f      	b.n	800122a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	035b      	lsls	r3, r3, #13
 80011d6:	0b5b      	lsrs	r3, r3, #13
 80011d8:	43d9      	mvns	r1, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	400a      	ands	r2, r1
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	02db      	lsls	r3, r3, #11
 80011ea:	4013      	ands	r3, r2
 80011ec:	d005      	beq.n	80011fa <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 80011f4:	4913      	ldr	r1, [pc, #76]	; (8001244 <HAL_ADC_ConfigChannel+0x134>)
 80011f6:	400a      	ands	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	029b      	lsls	r3, r3, #10
 8001202:	4013      	ands	r3, r2
 8001204:	d005      	beq.n	8001212 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 800120c:	490e      	ldr	r1, [pc, #56]	; (8001248 <HAL_ADC_ConfigChannel+0x138>)
 800120e:	400a      	ands	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	025b      	lsls	r3, r3, #9
 800121a:	4013      	ands	r3, r2
 800121c:	d005      	beq.n	800122a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <HAL_ADC_ConfigChannel+0x130>)
 8001224:	4909      	ldr	r1, [pc, #36]	; (800124c <HAL_ADC_ConfigChannel+0x13c>)
 8001226:	400a      	ands	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2250      	movs	r2, #80	; 0x50
 800122e:	2100      	movs	r1, #0
 8001230:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}
 800123c:	00001001 	.word	0x00001001
 8001240:	40012708 	.word	0x40012708
 8001244:	ff7fffff 	.word	0xff7fffff
 8001248:	ffbfffff 	.word	0xffbfffff
 800124c:	feffffff 	.word	0xfeffffff

08001250 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2203      	movs	r2, #3
 8001264:	4013      	ands	r3, r2
 8001266:	2b01      	cmp	r3, #1
 8001268:	d108      	bne.n	800127c <ADC_Enable+0x2c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	2b01      	cmp	r3, #1
 8001276:	d101      	bne.n	800127c <ADC_Enable+0x2c>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <ADC_Enable+0x2e>
 800127c:	2300      	movs	r3, #0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d146      	bne.n	8001310 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a24      	ldr	r2, [pc, #144]	; (800131c <ADC_Enable+0xcc>)
 800128a:	4013      	ands	r3, r2
 800128c:	d00d      	beq.n	80012aa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	2210      	movs	r2, #16
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	2201      	movs	r2, #1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e033      	b.n	8001312 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	430a      	orrs	r2, r1
 80012b8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f000 f830 	bl	8001320 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80012c0:	f7ff fcac 	bl	8000c1c <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012c8:	e01b      	b.n	8001302 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012ca:	f7ff fca7 	bl	8000c1c <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b0a      	cmp	r3, #10
 80012d6:	d914      	bls.n	8001302 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2201      	movs	r2, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d00d      	beq.n	8001302 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ea:	2210      	movs	r2, #16
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	2201      	movs	r2, #1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e007      	b.n	8001312 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2201      	movs	r2, #1
 800130a:	4013      	ands	r3, r2
 800130c:	2b01      	cmp	r3, #1
 800130e:	d1dc      	bne.n	80012ca <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b004      	add	sp, #16
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	80000017 	.word	0x80000017

08001320 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <ADC_DelayMicroSecond+0x38>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	490b      	ldr	r1, [pc, #44]	; (800135c <ADC_DelayMicroSecond+0x3c>)
 800132e:	0018      	movs	r0, r3
 8001330:	f7fe feea 	bl	8000108 <__udivsi3>
 8001334:	0003      	movs	r3, r0
 8001336:	001a      	movs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4353      	muls	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800133e:	e002      	b.n	8001346 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3b01      	subs	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f9      	bne.n	8001340 <ADC_DelayMicroSecond+0x20>
  }
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b004      	add	sp, #16
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	20000004 	.word	0x20000004
 800135c:	000f4240 	.word	0x000f4240

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	0002      	movs	r2, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b7f      	cmp	r3, #127	; 0x7f
 8001374:	d828      	bhi.n	80013c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001376:	4a2f      	ldr	r2, [pc, #188]	; (8001434 <__NVIC_SetPriority+0xd4>)
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	33c0      	adds	r3, #192	; 0xc0
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	589b      	ldr	r3, [r3, r2]
 8001386:	1dfa      	adds	r2, r7, #7
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	0011      	movs	r1, r2
 800138c:	2203      	movs	r2, #3
 800138e:	400a      	ands	r2, r1
 8001390:	00d2      	lsls	r2, r2, #3
 8001392:	21ff      	movs	r1, #255	; 0xff
 8001394:	4091      	lsls	r1, r2
 8001396:	000a      	movs	r2, r1
 8001398:	43d2      	mvns	r2, r2
 800139a:	401a      	ands	r2, r3
 800139c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	019b      	lsls	r3, r3, #6
 80013a2:	22ff      	movs	r2, #255	; 0xff
 80013a4:	401a      	ands	r2, r3
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	0018      	movs	r0, r3
 80013ac:	2303      	movs	r3, #3
 80013ae:	4003      	ands	r3, r0
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b4:	481f      	ldr	r0, [pc, #124]	; (8001434 <__NVIC_SetPriority+0xd4>)
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	430a      	orrs	r2, r1
 80013c0:	33c0      	adds	r3, #192	; 0xc0
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013c6:	e031      	b.n	800142c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <__NVIC_SetPriority+0xd8>)
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	0019      	movs	r1, r3
 80013d0:	230f      	movs	r3, #15
 80013d2:	400b      	ands	r3, r1
 80013d4:	3b08      	subs	r3, #8
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3306      	adds	r3, #6
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	18d3      	adds	r3, r2, r3
 80013de:	3304      	adds	r3, #4
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	1dfa      	adds	r2, r7, #7
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	0011      	movs	r1, r2
 80013e8:	2203      	movs	r2, #3
 80013ea:	400a      	ands	r2, r1
 80013ec:	00d2      	lsls	r2, r2, #3
 80013ee:	21ff      	movs	r1, #255	; 0xff
 80013f0:	4091      	lsls	r1, r2
 80013f2:	000a      	movs	r2, r1
 80013f4:	43d2      	mvns	r2, r2
 80013f6:	401a      	ands	r2, r3
 80013f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	019b      	lsls	r3, r3, #6
 80013fe:	22ff      	movs	r2, #255	; 0xff
 8001400:	401a      	ands	r2, r3
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	0018      	movs	r0, r3
 8001408:	2303      	movs	r3, #3
 800140a:	4003      	ands	r3, r0
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001410:	4809      	ldr	r0, [pc, #36]	; (8001438 <__NVIC_SetPriority+0xd8>)
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	001c      	movs	r4, r3
 8001418:	230f      	movs	r3, #15
 800141a:	4023      	ands	r3, r4
 800141c:	3b08      	subs	r3, #8
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	430a      	orrs	r2, r1
 8001422:	3306      	adds	r3, #6
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	18c3      	adds	r3, r0, r3
 8001428:	3304      	adds	r3, #4
 800142a:	601a      	str	r2, [r3, #0]
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b003      	add	sp, #12
 8001432:	bd90      	pop	{r4, r7, pc}
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	045b      	lsls	r3, r3, #17
 800144c:	429a      	cmp	r2, r3
 800144e:	d301      	bcc.n	8001454 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001450:	2301      	movs	r3, #1
 8001452:	e010      	b.n	8001476 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <SysTick_Config+0x44>)
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	3a01      	subs	r2, #1
 800145a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145c:	2301      	movs	r3, #1
 800145e:	425b      	negs	r3, r3
 8001460:	2103      	movs	r1, #3
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff ff7c 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <SysTick_Config+0x44>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SysTick_Config+0x44>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b002      	add	sp, #8
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	210f      	movs	r1, #15
 8001490:	187b      	adds	r3, r7, r1
 8001492:	1c02      	adds	r2, r0, #0
 8001494:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	187b      	adds	r3, r7, r1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b25b      	sxtb	r3, r3
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff ff5d 	bl	8001360 <__NVIC_SetPriority>
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b004      	add	sp, #16
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff ffbf 	bl	800143c <SysTick_Config>
 80014be:	0003      	movs	r3, r0
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014de:	e14f      	b.n	8001780 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	4091      	lsls	r1, r2
 80014ea:	000a      	movs	r2, r1
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d100      	bne.n	80014f8 <HAL_GPIO_Init+0x30>
 80014f6:	e140      	b.n	800177a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2203      	movs	r2, #3
 80014fe:	4013      	ands	r3, r2
 8001500:	2b01      	cmp	r3, #1
 8001502:	d005      	beq.n	8001510 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2203      	movs	r2, #3
 800150a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800150c:	2b02      	cmp	r3, #2
 800150e:	d130      	bne.n	8001572 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	409a      	lsls	r2, r3
 800151e:	0013      	movs	r3, r2
 8001520:	43da      	mvns	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	409a      	lsls	r2, r3
 8001532:	0013      	movs	r3, r2
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001546:	2201      	movs	r2, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	43da      	mvns	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	2201      	movs	r2, #1
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2203      	movs	r2, #3
 8001578:	4013      	ands	r3, r2
 800157a:	2b03      	cmp	r3, #3
 800157c:	d017      	beq.n	80015ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	409a      	lsls	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2203      	movs	r2, #3
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d123      	bne.n	8001602 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	08da      	lsrs	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3208      	adds	r2, #8
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	58d3      	ldr	r3, [r2, r3]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2207      	movs	r2, #7
 80015cc:	4013      	ands	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	43da      	mvns	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2107      	movs	r1, #7
 80015e6:	400b      	ands	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	6939      	ldr	r1, [r7, #16]
 8001600:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	2203      	movs	r2, #3
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	43da      	mvns	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2203      	movs	r2, #3
 8001620:	401a      	ands	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	23c0      	movs	r3, #192	; 0xc0
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	d100      	bne.n	8001644 <HAL_GPIO_Init+0x17c>
 8001642:	e09a      	b.n	800177a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001644:	4b54      	ldr	r3, [pc, #336]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 8001646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_GPIO_Init+0x2d0>)
 800164a:	2101      	movs	r1, #1
 800164c:	430a      	orrs	r2, r1
 800164e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_GPIO_Init+0x2d4>)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	589b      	ldr	r3, [r3, r2]
 800165c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2203      	movs	r2, #3
 8001662:	4013      	ands	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	409a      	lsls	r2, r3
 800166a:	0013      	movs	r3, r2
 800166c:	43da      	mvns	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	23a0      	movs	r3, #160	; 0xa0
 8001678:	05db      	lsls	r3, r3, #23
 800167a:	429a      	cmp	r2, r3
 800167c:	d019      	beq.n	80016b2 <HAL_GPIO_Init+0x1ea>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a47      	ldr	r2, [pc, #284]	; (80017a0 <HAL_GPIO_Init+0x2d8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0x1e6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a46      	ldr	r2, [pc, #280]	; (80017a4 <HAL_GPIO_Init+0x2dc>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00d      	beq.n	80016aa <HAL_GPIO_Init+0x1e2>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a45      	ldr	r2, [pc, #276]	; (80017a8 <HAL_GPIO_Init+0x2e0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x1de>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a44      	ldr	r2, [pc, #272]	; (80017ac <HAL_GPIO_Init+0x2e4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_GPIO_Init+0x1da>
 800169e:	2305      	movs	r3, #5
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x1ec>
 80016a2:	2306      	movs	r3, #6
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x1ec>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x1ec>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x1ec>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x1ec>
 80016b2:	2300      	movs	r3, #0
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	2103      	movs	r1, #3
 80016b8:	400a      	ands	r2, r1
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	; (800179c <HAL_GPIO_Init+0x2d4>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43da      	mvns	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	035b      	lsls	r3, r3, #13
 80016ea:	4013      	ands	r3, r2
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43da      	mvns	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	039b      	lsls	r3, r3, #14
 8001714:	4013      	ands	r3, r2
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43da      	mvns	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	029b      	lsls	r3, r3, #10
 800173e:	4013      	ands	r3, r2
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43da      	mvns	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	025b      	lsls	r3, r3, #9
 8001768:	4013      	ands	r3, r2
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	40da      	lsrs	r2, r3
 8001788:	1e13      	subs	r3, r2, #0
 800178a:	d000      	beq.n	800178e <HAL_GPIO_Init+0x2c6>
 800178c:	e6a8      	b.n	80014e0 <HAL_GPIO_Init+0x18>
  }
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b006      	add	sp, #24
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	50000400 	.word	0x50000400
 80017a4:	50000800 	.word	0x50000800
 80017a8:	50000c00 	.word	0x50000c00
 80017ac:	50001c00 	.word	0x50001c00
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b4:	b5b0      	push	{r4, r5, r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f000 fbaf 	bl	8001f26 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c8:	4bcf      	ldr	r3, [pc, #828]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	220c      	movs	r2, #12
 80017ce:	4013      	ands	r3, r2
 80017d0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d2:	4bcd      	ldr	r3, [pc, #820]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	4013      	ands	r3, r2
 80017dc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2201      	movs	r2, #1
 80017e4:	4013      	ands	r3, r2
 80017e6:	d100      	bne.n	80017ea <HAL_RCC_OscConfig+0x36>
 80017e8:	e07e      	b.n	80018e8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d007      	beq.n	8001800 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	2b0c      	cmp	r3, #12
 80017f4:	d112      	bne.n	800181c <HAL_RCC_OscConfig+0x68>
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d10d      	bne.n	800181c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	4bc1      	ldr	r3, [pc, #772]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	029b      	lsls	r3, r3, #10
 8001808:	4013      	ands	r3, r2
 800180a:	d100      	bne.n	800180e <HAL_RCC_OscConfig+0x5a>
 800180c:	e06b      	b.n	80018e6 <HAL_RCC_OscConfig+0x132>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d167      	bne.n	80018e6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f000 fb85 	bl	8001f26 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	025b      	lsls	r3, r3, #9
 8001824:	429a      	cmp	r2, r3
 8001826:	d107      	bne.n	8001838 <HAL_RCC_OscConfig+0x84>
 8001828:	4bb7      	ldr	r3, [pc, #732]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4bb6      	ldr	r3, [pc, #728]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	0249      	lsls	r1, r1, #9
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e027      	b.n	8001888 <HAL_RCC_OscConfig+0xd4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	23a0      	movs	r3, #160	; 0xa0
 800183e:	02db      	lsls	r3, r3, #11
 8001840:	429a      	cmp	r2, r3
 8001842:	d10e      	bne.n	8001862 <HAL_RCC_OscConfig+0xae>
 8001844:	4bb0      	ldr	r3, [pc, #704]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4baf      	ldr	r3, [pc, #700]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 800184a:	2180      	movs	r1, #128	; 0x80
 800184c:	02c9      	lsls	r1, r1, #11
 800184e:	430a      	orrs	r2, r1
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	4bad      	ldr	r3, [pc, #692]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4bac      	ldr	r3, [pc, #688]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	0249      	lsls	r1, r1, #9
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e012      	b.n	8001888 <HAL_RCC_OscConfig+0xd4>
 8001862:	4ba9      	ldr	r3, [pc, #676]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4ba8      	ldr	r3, [pc, #672]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001868:	49a8      	ldr	r1, [pc, #672]	; (8001b0c <HAL_RCC_OscConfig+0x358>)
 800186a:	400a      	ands	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	4ba6      	ldr	r3, [pc, #664]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	025b      	lsls	r3, r3, #9
 8001876:	4013      	ands	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4ba2      	ldr	r3, [pc, #648]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4ba1      	ldr	r3, [pc, #644]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001882:	49a3      	ldr	r1, [pc, #652]	; (8001b10 <HAL_RCC_OscConfig+0x35c>)
 8001884:	400a      	ands	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d015      	beq.n	80018bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff f9c4 	bl	8000c1c <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001898:	e009      	b.n	80018ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189a:	f7ff f9bf 	bl	8000c1c <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b64      	cmp	r3, #100	; 0x64
 80018a6:	d902      	bls.n	80018ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	f000 fb3c 	bl	8001f26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ae:	4b96      	ldr	r3, [pc, #600]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	029b      	lsls	r3, r3, #10
 80018b6:	4013      	ands	r3, r2
 80018b8:	d0ef      	beq.n	800189a <HAL_RCC_OscConfig+0xe6>
 80018ba:	e015      	b.n	80018e8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff f9ae 	bl	8000c1c <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c6:	f7ff f9a9 	bl	8000c1c <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	; 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e326      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018d8:	4b8b      	ldr	r3, [pc, #556]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	4013      	ands	r3, r2
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x112>
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2202      	movs	r2, #2
 80018ee:	4013      	ands	r3, r2
 80018f0:	d100      	bne.n	80018f4 <HAL_RCC_OscConfig+0x140>
 80018f2:	e08b      	b.n	8001a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d13e      	bne.n	8001984 <HAL_RCC_OscConfig+0x1d0>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d13b      	bne.n	8001984 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800190c:	4b7e      	ldr	r3, [pc, #504]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2204      	movs	r2, #4
 8001912:	4013      	ands	r3, r2
 8001914:	d004      	beq.n	8001920 <HAL_RCC_OscConfig+0x16c>
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e302      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a7b      	ldr	r2, [pc, #492]	; (8001b14 <HAL_RCC_OscConfig+0x360>)
 8001926:	4013      	ands	r3, r2
 8001928:	0019      	movs	r1, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	021a      	lsls	r2, r3, #8
 8001930:	4b75      	ldr	r3, [pc, #468]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001936:	4b74      	ldr	r3, [pc, #464]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2209      	movs	r2, #9
 800193c:	4393      	bics	r3, r2
 800193e:	0019      	movs	r1, r3
 8001940:	4b71      	ldr	r3, [pc, #452]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001948:	f000 fc40 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 800194c:	0001      	movs	r1, r0
 800194e:	4b6e      	ldr	r3, [pc, #440]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	220f      	movs	r2, #15
 8001956:	4013      	ands	r3, r2
 8001958:	4a6f      	ldr	r2, [pc, #444]	; (8001b18 <HAL_RCC_OscConfig+0x364>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	000a      	movs	r2, r1
 800195e:	40da      	lsrs	r2, r3
 8001960:	4b6e      	ldr	r3, [pc, #440]	; (8001b1c <HAL_RCC_OscConfig+0x368>)
 8001962:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001964:	4b6e      	ldr	r3, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x36c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2513      	movs	r5, #19
 800196a:	197c      	adds	r4, r7, r5
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff f90f 	bl	8000b90 <HAL_InitTick>
 8001972:	0003      	movs	r3, r0
 8001974:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001976:	197b      	adds	r3, r7, r5
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d046      	beq.n	8001a0c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800197e:	197b      	adds	r3, r7, r5
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	e2d0      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d027      	beq.n	80019da <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800198a:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2209      	movs	r2, #9
 8001990:	4393      	bics	r3, r2
 8001992:	0019      	movs	r1, r3
 8001994:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff f93e 	bl	8000c1c <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff f939 	bl	8000c1c <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e2b6      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2204      	movs	r2, #4
 80019be:	4013      	ands	r3, r2
 80019c0:	d0f1      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c2:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a53      	ldr	r2, [pc, #332]	; (8001b14 <HAL_RCC_OscConfig+0x360>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	021a      	lsls	r2, r3, #8
 80019d2:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	e018      	b.n	8001a0c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	438a      	bics	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff f919 	bl	8000c1c <HAL_GetTick>
 80019ea:	0003      	movs	r3, r0
 80019ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f0:	f7ff f914 	bl	8000c1c <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e291      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a02:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2204      	movs	r2, #4
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d1f1      	bne.n	80019f0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2210      	movs	r2, #16
 8001a12:	4013      	ands	r3, r2
 8001a14:	d100      	bne.n	8001a18 <HAL_RCC_OscConfig+0x264>
 8001a16:	e0a1      	b.n	8001b5c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d140      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d005      	beq.n	8001a36 <HAL_RCC_OscConfig+0x282>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e277      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a36:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a3a      	ldr	r2, [pc, #232]	; (8001b24 <HAL_RCC_OscConfig+0x370>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	0019      	movs	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a44:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001a46:	430a      	orrs	r2, r1
 8001a48:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	0a19      	lsrs	r1, r3, #8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	061a      	lsls	r2, r3, #24
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	0b5b      	lsrs	r3, r3, #13
 8001a64:	3301      	adds	r3, #1
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	0212      	lsls	r2, r2, #8
 8001a6a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	210f      	movs	r1, #15
 8001a74:	400b      	ands	r3, r1
 8001a76:	4928      	ldr	r1, [pc, #160]	; (8001b18 <HAL_RCC_OscConfig+0x364>)
 8001a78:	5ccb      	ldrb	r3, [r1, r3]
 8001a7a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a7c:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_RCC_OscConfig+0x368>)
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x36c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2513      	movs	r5, #19
 8001a86:	197c      	adds	r4, r7, r5
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff f881 	bl	8000b90 <HAL_InitTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001a92:	197b      	adds	r3, r7, r5
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d060      	beq.n	8001b5c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001a9a:	197b      	adds	r3, r7, r5
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	e242      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d03f      	beq.n	8001b28 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	0049      	lsls	r1, r1, #1
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f8b1 	bl	8000c1c <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f8ac 	bl	8000c1c <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e229      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4013      	ands	r3, r2
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <HAL_RCC_OscConfig+0x370>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001aee:	430a      	orrs	r2, r1
 8001af0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	0a19      	lsrs	r1, r3, #8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	061a      	lsls	r2, r3, #24
 8001b00:	4b01      	ldr	r3, [pc, #4]	; (8001b08 <HAL_RCC_OscConfig+0x354>)
 8001b02:	430a      	orrs	r2, r1
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	e029      	b.n	8001b5c <HAL_RCC_OscConfig+0x3a8>
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	fffeffff 	.word	0xfffeffff
 8001b10:	fffbffff 	.word	0xfffbffff
 8001b14:	ffffe0ff 	.word	0xffffe0ff
 8001b18:	08002388 	.word	0x08002388
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	20000008 	.word	0x20000008
 8001b24:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b28:	4bbd      	ldr	r3, [pc, #756]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4bbc      	ldr	r3, [pc, #752]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001b2e:	49bd      	ldr	r1, [pc, #756]	; (8001e24 <HAL_RCC_OscConfig+0x670>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff f872 	bl	8000c1c <HAL_GetTick>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b3e:	f7ff f86d 	bl	8000c1c <HAL_GetTick>
 8001b42:	0002      	movs	r2, r0
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e1ea      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b50:	4bb3      	ldr	r3, [pc, #716]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2208      	movs	r2, #8
 8001b62:	4013      	ands	r3, r2
 8001b64:	d036      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d019      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6e:	4bac      	ldr	r3, [pc, #688]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b72:	4bab      	ldr	r3, [pc, #684]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001b74:	2101      	movs	r1, #1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f84f 	bl	8000c1c <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff f84a 	bl	8000c1c <HAL_GetTick>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1c7      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b96:	4ba2      	ldr	r3, [pc, #648]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d0f1      	beq.n	8001b84 <HAL_RCC_OscConfig+0x3d0>
 8001ba0:	e018      	b.n	8001bd4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba2:	4b9f      	ldr	r3, [pc, #636]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ba6:	4b9e      	ldr	r3, [pc, #632]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001ba8:	2101      	movs	r1, #1
 8001baa:	438a      	bics	r2, r1
 8001bac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bae:	f7ff f835 	bl	8000c1c <HAL_GetTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff f830 	bl	8000c1c <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e1ad      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bca:	4b95      	ldr	r3, [pc, #596]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d1f1      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d100      	bne.n	8001be0 <HAL_RCC_OscConfig+0x42c>
 8001bde:	e0ae      	b.n	8001d3e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be0:	2027      	movs	r0, #39	; 0x27
 8001be2:	183b      	adds	r3, r7, r0
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be8:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	055b      	lsls	r3, r3, #21
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d109      	bne.n	8001c08 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4b8a      	ldr	r3, [pc, #552]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bf8:	4b89      	ldr	r3, [pc, #548]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	0549      	lsls	r1, r1, #21
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c02:	183b      	adds	r3, r7, r0
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	4b87      	ldr	r3, [pc, #540]	; (8001e28 <HAL_RCC_OscConfig+0x674>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4013      	ands	r3, r2
 8001c12:	d11a      	bne.n	8001c4a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c14:	4b84      	ldr	r3, [pc, #528]	; (8001e28 <HAL_RCC_OscConfig+0x674>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b83      	ldr	r3, [pc, #524]	; (8001e28 <HAL_RCC_OscConfig+0x674>)
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	0049      	lsls	r1, r1, #1
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c22:	f7fe fffb 	bl	8000c1c <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2c:	f7fe fff6 	bl	8000c1c <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e173      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b7a      	ldr	r3, [pc, #488]	; (8001e28 <HAL_RCC_OscConfig+0x674>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4b2>
 8001c56:	4b72      	ldr	r3, [pc, #456]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001c58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c5a:	4b71      	ldr	r3, [pc, #452]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	0049      	lsls	r1, r1, #1
 8001c60:	430a      	orrs	r2, r1
 8001c62:	651a      	str	r2, [r3, #80]	; 0x50
 8001c64:	e031      	b.n	8001cca <HAL_RCC_OscConfig+0x516>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4d4>
 8001c6e:	4b6c      	ldr	r3, [pc, #432]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c72:	4b6b      	ldr	r3, [pc, #428]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001c74:	496b      	ldr	r1, [pc, #428]	; (8001e24 <HAL_RCC_OscConfig+0x670>)
 8001c76:	400a      	ands	r2, r1
 8001c78:	651a      	str	r2, [r3, #80]	; 0x50
 8001c7a:	4b69      	ldr	r3, [pc, #420]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c7e:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001c80:	496a      	ldr	r1, [pc, #424]	; (8001e2c <HAL_RCC_OscConfig+0x678>)
 8001c82:	400a      	ands	r2, r1
 8001c84:	651a      	str	r2, [r3, #80]	; 0x50
 8001c86:	e020      	b.n	8001cca <HAL_RCC_OscConfig+0x516>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	23a0      	movs	r3, #160	; 0xa0
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d10e      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x4fe>
 8001c94:	4b62      	ldr	r3, [pc, #392]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001c96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c98:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	00c9      	lsls	r1, r1, #3
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca6:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0049      	lsls	r1, r1, #1
 8001cac:	430a      	orrs	r2, r1
 8001cae:	651a      	str	r2, [r3, #80]	; 0x50
 8001cb0:	e00b      	b.n	8001cca <HAL_RCC_OscConfig+0x516>
 8001cb2:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001cb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cb6:	4b5a      	ldr	r3, [pc, #360]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001cb8:	495a      	ldr	r1, [pc, #360]	; (8001e24 <HAL_RCC_OscConfig+0x670>)
 8001cba:	400a      	ands	r2, r1
 8001cbc:	651a      	str	r2, [r3, #80]	; 0x50
 8001cbe:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001cc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cc2:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001cc4:	4959      	ldr	r1, [pc, #356]	; (8001e2c <HAL_RCC_OscConfig+0x678>)
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d015      	beq.n	8001cfe <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7fe ffa3 	bl	8000c1c <HAL_GetTick>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cda:	e009      	b.n	8001cf0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7fe ff9e 	bl	8000c1c <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	4a52      	ldr	r2, [pc, #328]	; (8001e30 <HAL_RCC_OscConfig+0x67c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e11a      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001cf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d0ef      	beq.n	8001cdc <HAL_RCC_OscConfig+0x528>
 8001cfc:	e014      	b.n	8001d28 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7fe ff8d 	bl	8000c1c <HAL_GetTick>
 8001d02:	0003      	movs	r3, r0
 8001d04:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d06:	e009      	b.n	8001d1c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7fe ff88 	bl	8000c1c <HAL_GetTick>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	4a47      	ldr	r2, [pc, #284]	; (8001e30 <HAL_RCC_OscConfig+0x67c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e104      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001d1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d1ef      	bne.n	8001d08 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d28:	2327      	movs	r3, #39	; 0x27
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d105      	bne.n	8001d3e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d36:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001d38:	493e      	ldr	r1, [pc, #248]	; (8001e34 <HAL_RCC_OscConfig+0x680>)
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2220      	movs	r2, #32
 8001d44:	4013      	ands	r3, r2
 8001d46:	d049      	beq.n	8001ddc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d026      	beq.n	8001d9e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001d56:	2101      	movs	r1, #1
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d60:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001d62:	2101      	movs	r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34
 8001d68:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <HAL_RCC_OscConfig+0x684>)
 8001d6a:	6a1a      	ldr	r2, [r3, #32]
 8001d6c:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <HAL_RCC_OscConfig+0x684>)
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	0189      	lsls	r1, r1, #6
 8001d72:	430a      	orrs	r2, r1
 8001d74:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7fe ff51 	bl	8000c1c <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d80:	f7fe ff4c 	bl	8000c1c <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0c9      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d92:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2202      	movs	r2, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d0f1      	beq.n	8001d80 <HAL_RCC_OscConfig+0x5cc>
 8001d9c:	e01e      	b.n	8001ddc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	438a      	bics	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_RCC_OscConfig+0x684>)
 8001dac:	6a1a      	ldr	r2, [r3, #32]
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <HAL_RCC_OscConfig+0x684>)
 8001db0:	4922      	ldr	r1, [pc, #136]	; (8001e3c <HAL_RCC_OscConfig+0x688>)
 8001db2:	400a      	ands	r2, r1
 8001db4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7fe ff31 	bl	8000c1c <HAL_GetTick>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dc0:	f7fe ff2c 	bl	8000c1c <HAL_GetTick>
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0a9      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d1f1      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d100      	bne.n	8001de6 <HAL_RCC_OscConfig+0x632>
 8001de4:	e09e      	b.n	8001f24 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	2b0c      	cmp	r3, #12
 8001dea:	d100      	bne.n	8001dee <HAL_RCC_OscConfig+0x63a>
 8001dec:	e077      	b.n	8001ede <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d158      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_OscConfig+0x66c>)
 8001dfc:	4910      	ldr	r1, [pc, #64]	; (8001e40 <HAL_RCC_OscConfig+0x68c>)
 8001dfe:	400a      	ands	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7fe ff0b 	bl	8000c1c <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e0a:	e01b      	b.n	8001e44 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe ff06 	bl	8000c1c <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d914      	bls.n	8001e44 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e083      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40021000 	.word	0x40021000
 8001e24:	fffffeff 	.word	0xfffffeff
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	fffffbff 	.word	0xfffffbff
 8001e30:	00001388 	.word	0x00001388
 8001e34:	efffffff 	.word	0xefffffff
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	ffffdfff 	.word	0xffffdfff
 8001e40:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e44:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <HAL_RCC_OscConfig+0x77c>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	049b      	lsls	r3, r3, #18
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d1dd      	bne.n	8001e0c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e50:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_RCC_OscConfig+0x77c>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a37      	ldr	r2, [pc, #220]	; (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_RCC_OscConfig+0x77c>)
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_RCC_OscConfig+0x77c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <HAL_RCC_OscConfig+0x77c>)
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	0449      	lsls	r1, r1, #17
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7fe fecd 	bl	8000c1c <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e88:	f7fe fec8 	bl	8000c1c <HAL_GetTick>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e045      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_OscConfig+0x77c>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	049b      	lsls	r3, r3, #18
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x6d4>
 8001ea6:	e03d      	b.n	8001f24 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_RCC_OscConfig+0x77c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_RCC_OscConfig+0x77c>)
 8001eae:	4922      	ldr	r1, [pc, #136]	; (8001f38 <HAL_RCC_OscConfig+0x784>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7fe feb2 	bl	8000c1c <HAL_GetTick>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7fe fead 	bl	8000c1c <HAL_GetTick>
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e02a      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_RCC_OscConfig+0x77c>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	049b      	lsls	r3, r3, #18
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x70a>
 8001edc:	e022      	b.n	8001f24 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e01d      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_OscConfig+0x77c>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	025b      	lsls	r3, r3, #9
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d10f      	bne.n	8001f20 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	039b      	lsls	r3, r3, #14
 8001f06:	401a      	ands	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	23c0      	movs	r3, #192	; 0xc0
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	401a      	ands	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b00a      	add	sp, #40	; 0x28
 8001f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	40021000 	.word	0x40021000
 8001f34:	ff02ffff 	.word	0xff02ffff
 8001f38:	feffffff 	.word	0xfeffffff

08001f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f3c:	b5b0      	push	{r4, r5, r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e128      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b96      	ldr	r3, [pc, #600]	; (80021ac <HAL_RCC_ClockConfig+0x270>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d91e      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b93      	ldr	r3, [pc, #588]	; (80021ac <HAL_RCC_ClockConfig+0x270>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2201      	movs	r2, #1
 8001f64:	4393      	bics	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	4b90      	ldr	r3, [pc, #576]	; (80021ac <HAL_RCC_ClockConfig+0x270>)
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f70:	f7fe fe54 	bl	8000c1c <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f78:	e009      	b.n	8001f8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7a:	f7fe fe4f 	bl	8000c1c <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	4a8a      	ldr	r2, [pc, #552]	; (80021b0 <HAL_RCC_ClockConfig+0x274>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e109      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b87      	ldr	r3, [pc, #540]	; (80021ac <HAL_RCC_ClockConfig+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2201      	movs	r2, #1
 8001f94:	4013      	ands	r3, r2
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1ee      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa6:	4b83      	ldr	r3, [pc, #524]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	22f0      	movs	r2, #240	; 0xf0
 8001fac:	4393      	bics	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d100      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x8a>
 8001fc4:	e089      	b.n	80020da <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fce:	4b79      	ldr	r3, [pc, #484]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	029b      	lsls	r3, r3, #10
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d120      	bne.n	800201c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0e1      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fe6:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	049b      	lsls	r3, r3, #18
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d114      	bne.n	800201c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0d5      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2204      	movs	r2, #4
 8002004:	4013      	ands	r3, r2
 8002006:	d109      	bne.n	800201c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0ca      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800200c:	4b69      	ldr	r3, [pc, #420]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0c2      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201c:	4b65      	ldr	r3, [pc, #404]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2203      	movs	r2, #3
 8002022:	4393      	bics	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4b62      	ldr	r3, [pc, #392]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 800202c:	430a      	orrs	r2, r1
 800202e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002030:	f7fe fdf4 	bl	8000c1c <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d111      	bne.n	8002064 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002040:	e009      	b.n	8002056 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002042:	f7fe fdeb 	bl	8000c1c <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <HAL_RCC_ClockConfig+0x274>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e0a5      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002056:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	220c      	movs	r2, #12
 800205c:	4013      	ands	r3, r2
 800205e:	2b08      	cmp	r3, #8
 8002060:	d1ef      	bne.n	8002042 <HAL_RCC_ClockConfig+0x106>
 8002062:	e03a      	b.n	80020da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d111      	bne.n	8002090 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206c:	e009      	b.n	8002082 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206e:	f7fe fdd5 	bl	8000c1c <HAL_GetTick>
 8002072:	0002      	movs	r2, r0
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	4a4d      	ldr	r2, [pc, #308]	; (80021b0 <HAL_RCC_ClockConfig+0x274>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e08f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002082:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	220c      	movs	r2, #12
 8002088:	4013      	ands	r3, r2
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d1ef      	bne.n	800206e <HAL_RCC_ClockConfig+0x132>
 800208e:	e024      	b.n	80020da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d11b      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002098:	e009      	b.n	80020ae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209a:	f7fe fdbf 	bl	8000c1c <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	4a42      	ldr	r2, [pc, #264]	; (80021b0 <HAL_RCC_ClockConfig+0x274>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e079      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	220c      	movs	r2, #12
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d1ef      	bne.n	800209a <HAL_RCC_ClockConfig+0x15e>
 80020ba:	e00e      	b.n	80020da <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020bc:	f7fe fdae 	bl	8000c1c <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	4a3a      	ldr	r2, [pc, #232]	; (80021b0 <HAL_RCC_ClockConfig+0x274>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e068      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80020d0:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	220c      	movs	r2, #12
 80020d6:	4013      	ands	r3, r2
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020da:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_ClockConfig+0x270>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2201      	movs	r2, #1
 80020e0:	4013      	ands	r3, r2
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d21e      	bcs.n	8002126 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e8:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_RCC_ClockConfig+0x270>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4393      	bics	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_RCC_ClockConfig+0x270>)
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020fa:	f7fe fd8f 	bl	8000c1c <HAL_GetTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	e009      	b.n	8002118 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f7fe fd8a 	bl	8000c1c <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <HAL_RCC_ClockConfig+0x274>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e044      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_ClockConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d1ee      	bne.n	8002104 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	d009      	beq.n	8002144 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <HAL_RCC_ClockConfig+0x27c>)
 8002136:	4013      	ands	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 8002140:	430a      	orrs	r2, r1
 8002142:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2208      	movs	r2, #8
 800214a:	4013      	ands	r3, r2
 800214c:	d00a      	beq.n	8002164 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <HAL_RCC_ClockConfig+0x280>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	00da      	lsls	r2, r3, #3
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 8002160:	430a      	orrs	r2, r1
 8002162:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002164:	f000 f832 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 8002168:	0001      	movs	r1, r0
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_RCC_ClockConfig+0x278>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	220f      	movs	r2, #15
 8002172:	4013      	ands	r3, r2
 8002174:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <HAL_RCC_ClockConfig+0x284>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	000a      	movs	r2, r1
 800217a:	40da      	lsrs	r2, r3
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_RCC_ClockConfig+0x288>)
 800217e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_RCC_ClockConfig+0x28c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	250b      	movs	r5, #11
 8002186:	197c      	adds	r4, r7, r5
 8002188:	0018      	movs	r0, r3
 800218a:	f7fe fd01 	bl	8000b90 <HAL_InitTick>
 800218e:	0003      	movs	r3, r0
 8002190:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002192:	197b      	adds	r3, r7, r5
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800219a:	197b      	adds	r3, r7, r5
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	e000      	b.n	80021a2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	0018      	movs	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b004      	add	sp, #16
 80021a8:	bdb0      	pop	{r4, r5, r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	40022000 	.word	0x40022000
 80021b0:	00001388 	.word	0x00001388
 80021b4:	40021000 	.word	0x40021000
 80021b8:	fffff8ff 	.word	0xfffff8ff
 80021bc:	ffffc7ff 	.word	0xffffc7ff
 80021c0:	08002388 	.word	0x08002388
 80021c4:	20000004 	.word	0x20000004
 80021c8:	20000008 	.word	0x20000008

080021cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b08e      	sub	sp, #56	; 0x38
 80021d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80021d2:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <HAL_RCC_GetSysClockFreq+0x138>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021da:	230c      	movs	r3, #12
 80021dc:	4013      	ands	r3, r2
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d014      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x40>
 80021e2:	d900      	bls.n	80021e6 <HAL_RCC_GetSysClockFreq+0x1a>
 80021e4:	e07b      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x112>
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x24>
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d00b      	beq.n	8002206 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ee:	e076      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80021f0:	4b44      	ldr	r3, [pc, #272]	; (8002304 <HAL_RCC_GetSysClockFreq+0x138>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2210      	movs	r2, #16
 80021f6:	4013      	ands	r3, r2
 80021f8:	d002      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80021fa:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_RCC_GetSysClockFreq+0x13c>)
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80021fe:	e07c      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002200:	4b42      	ldr	r3, [pc, #264]	; (800230c <HAL_RCC_GetSysClockFreq+0x140>)
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002204:	e079      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002206:	4b42      	ldr	r3, [pc, #264]	; (8002310 <HAL_RCC_GetSysClockFreq+0x144>)
 8002208:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800220a:	e076      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220e:	0c9a      	lsrs	r2, r3, #18
 8002210:	230f      	movs	r3, #15
 8002212:	401a      	ands	r2, r3
 8002214:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <HAL_RCC_GetSysClockFreq+0x148>)
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	0d9a      	lsrs	r2, r3, #22
 800221e:	2303      	movs	r3, #3
 8002220:	4013      	ands	r3, r2
 8002222:	3301      	adds	r3, #1
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002226:	4b37      	ldr	r3, [pc, #220]	; (8002304 <HAL_RCC_GetSysClockFreq+0x138>)
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	025b      	lsls	r3, r3, #9
 800222e:	4013      	ands	r3, r2
 8002230:	d01a      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	4a35      	ldr	r2, [pc, #212]	; (8002310 <HAL_RCC_GetSysClockFreq+0x144>)
 800223c:	2300      	movs	r3, #0
 800223e:	69b8      	ldr	r0, [r7, #24]
 8002240:	69f9      	ldr	r1, [r7, #28]
 8002242:	f7fe f80d 	bl	8000260 <__aeabi_lmul>
 8002246:	0002      	movs	r2, r0
 8002248:	000b      	movs	r3, r1
 800224a:	0010      	movs	r0, r2
 800224c:	0019      	movs	r1, r3
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f7fd ffe1 	bl	8000220 <__aeabi_uldivmod>
 800225e:	0002      	movs	r2, r0
 8002260:	000b      	movs	r3, r1
 8002262:	0013      	movs	r3, r2
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
 8002266:	e037      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002268:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_RCC_GetSysClockFreq+0x138>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2210      	movs	r2, #16
 800226e:	4013      	ands	r3, r2
 8002270:	d01a      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4a23      	ldr	r2, [pc, #140]	; (8002308 <HAL_RCC_GetSysClockFreq+0x13c>)
 800227c:	2300      	movs	r3, #0
 800227e:	68b8      	ldr	r0, [r7, #8]
 8002280:	68f9      	ldr	r1, [r7, #12]
 8002282:	f7fd ffed 	bl	8000260 <__aeabi_lmul>
 8002286:	0002      	movs	r2, r0
 8002288:	000b      	movs	r3, r1
 800228a:	0010      	movs	r0, r2
 800228c:	0019      	movs	r1, r3
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f7fd ffc1 	bl	8000220 <__aeabi_uldivmod>
 800229e:	0002      	movs	r2, r0
 80022a0:	000b      	movs	r3, r1
 80022a2:	0013      	movs	r3, r2
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
 80022a6:	e017      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	0018      	movs	r0, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	0019      	movs	r1, r3
 80022b0:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_RCC_GetSysClockFreq+0x140>)
 80022b2:	2300      	movs	r3, #0
 80022b4:	f7fd ffd4 	bl	8000260 <__aeabi_lmul>
 80022b8:	0002      	movs	r2, r0
 80022ba:	000b      	movs	r3, r1
 80022bc:	0010      	movs	r0, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	001c      	movs	r4, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	001d      	movs	r5, r3
 80022c8:	0022      	movs	r2, r4
 80022ca:	002b      	movs	r3, r5
 80022cc:	f7fd ffa8 	bl	8000220 <__aeabi_uldivmod>
 80022d0:	0002      	movs	r2, r0
 80022d2:	000b      	movs	r3, r1
 80022d4:	0013      	movs	r3, r2
 80022d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022dc:	e00d      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_GetSysClockFreq+0x138>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0b5b      	lsrs	r3, r3, #13
 80022e4:	2207      	movs	r2, #7
 80022e6:	4013      	ands	r3, r2
 80022e8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	3301      	adds	r3, #1
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	0212      	lsls	r2, r2, #8
 80022f2:	409a      	lsls	r2, r3
 80022f4:	0013      	movs	r3, r2
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022f8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b00e      	add	sp, #56	; 0x38
 8002302:	bdb0      	pop	{r4, r5, r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	003d0900 	.word	0x003d0900
 800230c:	00f42400 	.word	0x00f42400
 8002310:	007a1200 	.word	0x007a1200
 8002314:	08002398 	.word	0x08002398

08002318 <memset>:
 8002318:	0003      	movs	r3, r0
 800231a:	1882      	adds	r2, r0, r2
 800231c:	4293      	cmp	r3, r2
 800231e:	d100      	bne.n	8002322 <memset+0xa>
 8002320:	4770      	bx	lr
 8002322:	7019      	strb	r1, [r3, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	e7f9      	b.n	800231c <memset+0x4>

08002328 <__libc_init_array>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	2600      	movs	r6, #0
 800232c:	4c0c      	ldr	r4, [pc, #48]	; (8002360 <__libc_init_array+0x38>)
 800232e:	4d0d      	ldr	r5, [pc, #52]	; (8002364 <__libc_init_array+0x3c>)
 8002330:	1b64      	subs	r4, r4, r5
 8002332:	10a4      	asrs	r4, r4, #2
 8002334:	42a6      	cmp	r6, r4
 8002336:	d109      	bne.n	800234c <__libc_init_array+0x24>
 8002338:	2600      	movs	r6, #0
 800233a:	f000 f819 	bl	8002370 <_init>
 800233e:	4c0a      	ldr	r4, [pc, #40]	; (8002368 <__libc_init_array+0x40>)
 8002340:	4d0a      	ldr	r5, [pc, #40]	; (800236c <__libc_init_array+0x44>)
 8002342:	1b64      	subs	r4, r4, r5
 8002344:	10a4      	asrs	r4, r4, #2
 8002346:	42a6      	cmp	r6, r4
 8002348:	d105      	bne.n	8002356 <__libc_init_array+0x2e>
 800234a:	bd70      	pop	{r4, r5, r6, pc}
 800234c:	00b3      	lsls	r3, r6, #2
 800234e:	58eb      	ldr	r3, [r5, r3]
 8002350:	4798      	blx	r3
 8002352:	3601      	adds	r6, #1
 8002354:	e7ee      	b.n	8002334 <__libc_init_array+0xc>
 8002356:	00b3      	lsls	r3, r6, #2
 8002358:	58eb      	ldr	r3, [r5, r3]
 800235a:	4798      	blx	r3
 800235c:	3601      	adds	r6, #1
 800235e:	e7f2      	b.n	8002346 <__libc_init_array+0x1e>
 8002360:	080023ac 	.word	0x080023ac
 8002364:	080023ac 	.word	0x080023ac
 8002368:	080023b0 	.word	0x080023b0
 800236c:	080023ac 	.word	0x080023ac

08002370 <_init>:
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002376:	bc08      	pop	{r3}
 8002378:	469e      	mov	lr, r3
 800237a:	4770      	bx	lr

0800237c <_fini>:
 800237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002382:	bc08      	pop	{r3}
 8002384:	469e      	mov	lr, r3
 8002386:	4770      	bx	lr
